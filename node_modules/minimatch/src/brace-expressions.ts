var posixClasses = {
    "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", !0],
    "[:alpha:]": ["\\p{L}\\p{Nl}", !0],
    "[:ascii:]": ["\\x00-\\x7f", !1],
    "[:blank:]": ["\\p{Zs}\\t", !0],
    "[:cntrl:]": ["\\p{Cc}", !0],
    "[:digit:]": ["\\p{Nd}", !0],
    "[:graph:]": ["\\p{Z}\\p{C}", !0, !0],
    "[:lower:]": ["\\p{Ll}", !0],
    "[:print:]": ["\\p{C}", !0],
    "[:punct:]": ["\\p{P}", !0],
    "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", !0],
    "[:upper:]": ["\\p{Lu}", !0],
    "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", !0],
    "[:xdigit:]": ["A-Fa-f0-9", !1]
  },
  braceEscape = __name(s => s.replace(/[[\]\\-]/g, "\\$&"), "braceEscape"),
  regexpEscape = __name(s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "regexpEscape"),
  rangesToString = __name(ranges => ranges.join(""), "rangesToString"),
  parseClass = __name((glob, position) => {
    let pos = position;
    if (glob.charAt(pos) !== "[") throw new Error("not in a brace expression");
    let ranges = [],
      negs = [],
      i = pos + 1,
      sawStart = !1,
      uflag = !1,
      escaping = !1,
      negate = !1,
      endPos = pos,
      rangeStart = "";
    WHILE: for (; i < glob.length;) {
      let c = glob.charAt(i);
      if ((c === "!" || c === "^") && i === pos + 1) {
        negate = !0, i++;
        continue;
      }
      if (c === "]" && sawStart && !escaping) {
        endPos = i + 1;
        break;
      }
      if (sawStart = !0, c === "\\" && !escaping) {
        escaping = !0, i++;
        continue;
      }
      if (c === "[" && !escaping) {
        for (let [cls, [unip, u, neg]] of Object.entries(posixClasses)) if (glob.startsWith(cls, i)) {
          if (rangeStart) return ["$.", !1, glob.length - pos, !0];
          i += cls.length, neg ? negs.push(unip) : ranges.push(unip), uflag = uflag || u;
          continue WHILE;
        }
      }
      if (escaping = !1, rangeStart) {
        c > rangeStart ? ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c)) : c === rangeStart && ranges.push(braceEscape(c)), rangeStart = "", i++;
        continue;
      }
      if (glob.startsWith("-]", i + 1)) {
        ranges.push(braceEscape(c + "-")), i += 2;
        continue;
      }
      if (glob.startsWith("-", i + 1)) {
        rangeStart = c, i += 2;
        continue;
      }
      ranges.push(braceEscape(c)), i++;
    }
    if (endPos < i) return ["", !1, 0, !1];
    if (!ranges.length && !negs.length) return ["$.", !1, glob.length - pos, !0];
    if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate) {
      let r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
      return [regexpEscape(r), !1, endPos - pos, !1];
    }
    let sranges = "[" + (negate ? "^" : "") + rangesToString(ranges) + "]",
      snegs = "[" + (negate ? "" : "^") + rangesToString(negs) + "]";
    return [ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs, uflag, endPos - pos, !0];
  }, "parseClass");