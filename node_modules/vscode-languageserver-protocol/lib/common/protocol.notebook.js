var require_protocol_notebook = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
  var vscode_languageserver_types_1 = PL(),
    Is = ML(),
    messages_1 = mo(),
    NotebookCellKind;
  (function (NotebookCellKind) {
    NotebookCellKind.Markup = 1, NotebookCellKind.Code = 2;
    function is(value) {
      return value === 1 || value === 2;
    }
    __name(is, "is"), NotebookCellKind.is = is;
  })(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));
  var ExecutionSummary;
  (function (ExecutionSummary) {
    function create(executionOrder, success) {
      let result = {
        executionOrder: executionOrder
      };
      return (success === !0 || success === !1) && (result.success = success), result;
    }
    __name(create, "create"), ExecutionSummary.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === void 0 || Is.boolean(candidate.success));
    }
    __name(is, "is"), ExecutionSummary.is = is;
    function equals(one, other) {
      return one === other ? !0 : one == null || other === null || other === void 0 ? !1 : one.executionOrder === other.executionOrder && one.success === other.success;
    }
    __name(equals, "equals"), ExecutionSummary.equals = equals;
  })(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));
  var NotebookCell;
  (function (NotebookCell) {
    function create(kind, document) {
      return {
        kind: kind,
        document: document
      };
    }
    __name(create, "create"), NotebookCell.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === void 0 || Is.objectLiteral(candidate.metadata));
    }
    __name(is, "is"), NotebookCell.is = is;
    function diff(one, two) {
      let result = new Set();
      return one.document !== two.document && result.add("document"), one.kind !== two.kind && result.add("kind"), one.executionSummary !== two.executionSummary && result.add("executionSummary"), (one.metadata !== void 0 || two.metadata !== void 0) && !equalsMetadata(one.metadata, two.metadata) && result.add("metadata"), (one.executionSummary !== void 0 || two.executionSummary !== void 0) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary) && result.add("executionSummary"), result;
    }
    __name(diff, "diff"), NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
      if (one === other) return !0;
      if (one == null || other === null || other === void 0 || typeof one != typeof other || typeof one != "object") return !1;
      let oneArray = Array.isArray(one),
        otherArray = Array.isArray(other);
      if (oneArray !== otherArray) return !1;
      if (oneArray && otherArray) {
        if (one.length !== other.length) return !1;
        for (let i = 0; i < one.length; i++) if (!equalsMetadata(one[i], other[i])) return !1;
      }
      if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
        let oneKeys = Object.keys(one),
          otherKeys = Object.keys(other);
        if (oneKeys.length !== otherKeys.length || (oneKeys.sort(), otherKeys.sort(), !equalsMetadata(oneKeys, otherKeys))) return !1;
        for (let i = 0; i < oneKeys.length; i++) {
          let prop = oneKeys[i];
          if (!equalsMetadata(one[prop], other[prop])) return !1;
        }
      }
      return !0;
    }
    __name(equalsMetadata, "equalsMetadata");
  })(NotebookCell || (exports.NotebookCell = NotebookCell = {}));
  var NotebookDocument;
  (function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
      return {
        uri: uri,
        notebookType: notebookType,
        version: version,
        cells: cells
      };
    }
    __name(create, "create"), NotebookDocument.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    __name(is, "is"), NotebookDocument.is = is;
  })(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));
  var NotebookDocumentSyncRegistrationType;
  (function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = "notebookDocument/sync", NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer, NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
  })(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
  var DidOpenNotebookDocumentNotification;
  (function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = "notebookDocument/didOpen", DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer, DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method), DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
  })(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
  var NotebookCellArrayChange;
  (function (NotebookCellArrayChange) {
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === void 0 || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    __name(is, "is"), NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
      let result = {
        start: start,
        deleteCount: deleteCount
      };
      return cells !== void 0 && (result.cells = cells), result;
    }
    __name(create, "create"), NotebookCellArrayChange.create = create;
  })(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));
  var DidChangeNotebookDocumentNotification;
  (function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = "notebookDocument/didChange", DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer, DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method), DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
  })(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
  var DidSaveNotebookDocumentNotification;
  (function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = "notebookDocument/didSave", DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer, DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method), DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
  })(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
  var DidCloseNotebookDocumentNotification;
  (function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = "notebookDocument/didClose", DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer, DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method), DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
  })(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));
});