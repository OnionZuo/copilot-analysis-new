var require_protocol_diagnostic = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
  var vscode_jsonrpc_1 = U_(),
    Is = ML(),
    messages_1 = mo(),
    DiagnosticServerCancellationData;
  (function (DiagnosticServerCancellationData) {
    function is(value) {
      let candidate = value;
      return candidate && Is.boolean(candidate.retriggerRequest);
    }
    __name(is, "is"), DiagnosticServerCancellationData.is = is;
  })(DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
  var DocumentDiagnosticReportKind;
  (function (DocumentDiagnosticReportKind) {
    DocumentDiagnosticReportKind.Full = "full", DocumentDiagnosticReportKind.Unchanged = "unchanged";
  })(DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
  var DocumentDiagnosticRequest;
  (function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = "textDocument/diagnostic", DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer, DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method), DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
  })(DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
  var WorkspaceDiagnosticRequest;
  (function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = "workspace/diagnostic", WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer, WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method), WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
  })(WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
  var DiagnosticRefreshRequest;
  (function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = "workspace/diagnostic/refresh", DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient, DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
  })(DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));
});