var bundledLanguagesInfo = [{
    id: "abap",
    name: "ABAP",
    import: __name(() => Promise.resolve().then(() => (uZe(), AZe)), "import")
  }, {
    id: "actionscript-3",
    name: "ActionScript",
    import: __name(() => Promise.resolve().then(() => (pZe(), mZe)), "import")
  }, {
    id: "ada",
    name: "Ada",
    import: __name(() => Promise.resolve().then(() => (gZe(), dZe)), "import")
  }, {
    id: "angular-html",
    name: "Angular HTML",
    import: __name(() => Promise.resolve().then(() => (f0e(), yZe)), "import")
  }, {
    id: "angular-ts",
    name: "Angular TypeScript",
    import: __name(() => Promise.resolve().then(() => (BZe(), EZe)), "import")
  }, {
    id: "apache",
    name: "Apache Conf",
    import: __name(() => Promise.resolve().then(() => (IZe(), vZe)), "import")
  }, {
    id: "apex",
    name: "Apex",
    import: __name(() => Promise.resolve().then(() => (DZe(), QZe)), "import")
  }, {
    id: "apl",
    name: "APL",
    import: __name(() => Promise.resolve().then(() => (RZe(), NZe)), "import")
  }, {
    id: "applescript",
    name: "AppleScript",
    import: __name(() => Promise.resolve().then(() => (PZe(), LZe)), "import")
  }, {
    id: "ara",
    name: "Ara",
    import: __name(() => Promise.resolve().then(() => (zZe(), MZe)), "import")
  }, {
    id: "asciidoc",
    name: "AsciiDoc",
    aliases: ["adoc"],
    import: __name(() => Promise.resolve().then(() => (BHe(), EHe)), "import")
  }, {
    id: "asm",
    name: "Assembly",
    import: __name(() => Promise.resolve().then(() => (IHe(), vHe)), "import")
  }, {
    id: "astro",
    name: "Astro",
    import: __name(() => Promise.resolve().then(() => (THe(), FHe)), "import")
  }, {
    id: "awk",
    name: "AWK",
    import: __name(() => Promise.resolve().then(() => (RHe(), NHe)), "import")
  }, {
    id: "ballerina",
    name: "Ballerina",
    import: __name(() => Promise.resolve().then(() => (PHe(), LHe)), "import")
  }, {
    id: "bat",
    name: "Batch File",
    aliases: ["batch"],
    import: __name(() => Promise.resolve().then(() => (B0e(), MHe)), "import")
  }, {
    id: "beancount",
    name: "Beancount",
    import: __name(() => Promise.resolve().then(() => ($He(), zHe)), "import")
  }, {
    id: "berry",
    name: "Berry",
    aliases: ["be"],
    import: __name(() => Promise.resolve().then(() => (jHe(), qHe)), "import")
  }, {
    id: "bibtex",
    name: "BibTeX",
    import: __name(() => Promise.resolve().then(() => (I0e(), UHe)), "import")
  }, {
    id: "bicep",
    name: "Bicep",
    import: __name(() => Promise.resolve().then(() => (GHe(), OHe)), "import")
  }, {
    id: "blade",
    name: "Blade",
    import: __name(() => Promise.resolve().then(() => (HHe(), ZHe)), "import")
  }, {
    id: "c",
    name: "C",
    import: __name(() => Promise.resolve().then(() => (Nb(), jZe)), "import")
  }, {
    id: "cadence",
    name: "Cadence",
    aliases: ["cdc"],
    import: __name(() => Promise.resolve().then(() => (YHe(), WHe)), "import")
  }, {
    id: "clarity",
    name: "Clarity",
    import: __name(() => Promise.resolve().then(() => (JHe(), KHe)), "import")
  }, {
    id: "clojure",
    name: "Clojure",
    aliases: ["clj"],
    import: __name(() => Promise.resolve().then(() => ($j(), UZe)), "import")
  }, {
    id: "cmake",
    name: "CMake",
    import: __name(() => Promise.resolve().then(() => (D0e(), VHe)), "import")
  }, {
    id: "cobol",
    name: "COBOL",
    import: __name(() => Promise.resolve().then(() => (eWe(), XHe)), "import")
  }, {
    id: "codeowners",
    name: "CODEOWNERS",
    import: __name(() => Promise.resolve().then(() => (nWe(), tWe)), "import")
  }, {
    id: "codeql",
    name: "CodeQL",
    aliases: ["ql"],
    import: __name(() => Promise.resolve().then(() => (iWe(), aWe)), "import")
  }, {
    id: "coffee",
    name: "CoffeeScript",
    aliases: ["coffeescript"],
    import: __name(() => Promise.resolve().then(() => (rC(), OZe)), "import")
  }, {
    id: "common-lisp",
    name: "Common Lisp",
    aliases: ["lisp"],
    import: __name(() => Promise.resolve().then(() => (oWe(), rWe)), "import")
  }, {
    id: "coq",
    name: "Coq",
    import: __name(() => Promise.resolve().then(() => (cWe(), sWe)), "import")
  }, {
    id: "cpp",
    name: "C++",
    aliases: ["c++"],
    import: __name(() => Promise.resolve().then(() => (r2(), KZe)), "import")
  }, {
    id: "crystal",
    name: "Crystal",
    import: __name(() => Promise.resolve().then(() => (AWe(), lWe)), "import")
  }, {
    id: "csharp",
    name: "C#",
    aliases: ["c#", "cs"],
    import: __name(() => Promise.resolve().then(() => (I8(), JZe)), "import")
  }, {
    id: "css",
    name: "CSS",
    import: __name(() => Promise.resolve().then(() => (Fr(), hZe)), "import")
  }, {
    id: "csv",
    name: "CSV",
    import: __name(() => Promise.resolve().then(() => (b0e(), qZe)), "import")
  }, {
    id: "cue",
    name: "CUE",
    import: __name(() => Promise.resolve().then(() => (mWe(), uWe)), "import")
  }, {
    id: "cypher",
    name: "Cypher",
    aliases: ["cql"],
    import: __name(() => Promise.resolve().then(() => (dWe(), pWe)), "import")
  }, {
    id: "d",
    name: "D",
    import: __name(() => Promise.resolve().then(() => (fWe(), gWe)), "import")
  }, {
    id: "dart",
    name: "Dart",
    import: __name(() => Promise.resolve().then(() => (F0e(), hWe)), "import")
  }, {
    id: "dax",
    name: "DAX",
    import: __name(() => Promise.resolve().then(() => (yWe(), bWe)), "import")
  }, {
    id: "desktop",
    name: "Desktop",
    import: __name(() => Promise.resolve().then(() => (CWe(), wWe)), "import")
  }, {
    id: "diff",
    name: "Diff",
    import: __name(() => Promise.resolve().then(() => (Q8(), VZe)), "import")
  }, {
    id: "docker",
    name: "Dockerfile",
    aliases: ["dockerfile"],
    import: __name(() => Promise.resolve().then(() => (jj(), XZe)), "import")
  }, {
    id: "dotenv",
    name: "dotEnv",
    import: __name(() => Promise.resolve().then(() => (xWe(), _We)), "import")
  }, {
    id: "dream-maker",
    name: "Dream Maker",
    import: __name(() => Promise.resolve().then(() => (EWe(), kWe)), "import")
  }, {
    id: "edge",
    name: "Edge",
    import: __name(() => Promise.resolve().then(() => (IWe(), vWe)), "import")
  }, {
    id: "elixir",
    name: "Elixir",
    import: __name(() => Promise.resolve().then(() => (Uj(), eHe)), "import")
  }, {
    id: "elm",
    name: "Elm",
    import: __name(() => Promise.resolve().then(() => (w0e(), tHe)), "import")
  }, {
    id: "emacs-lisp",
    name: "Emacs Lisp",
    aliases: ["elisp"],
    import: __name(() => Promise.resolve().then(() => (DWe(), QWe)), "import")
  }, {
    id: "erb",
    name: "ERB",
    import: __name(() => Promise.resolve().then(() => (FWe(), SWe)), "import")
  }, {
    id: "erlang",
    name: "Erlang",
    aliases: ["erl"],
    import: __name(() => Promise.resolve().then(() => (Oj(), nHe)), "import")
  }, {
    id: "fennel",
    name: "Fennel",
    import: __name(() => Promise.resolve().then(() => (NWe(), TWe)), "import")
  }, {
    id: "fish",
    name: "Fish",
    import: __name(() => Promise.resolve().then(() => (LWe(), RWe)), "import")
  }, {
    id: "fluent",
    name: "Fluent",
    aliases: ["ftl"],
    import: __name(() => Promise.resolve().then(() => (MWe(), PWe)), "import")
  }, {
    id: "fortran-fixed-form",
    name: "Fortran (Fixed Form)",
    aliases: ["f", "for", "f77"],
    import: __name(() => Promise.resolve().then(() => (qWe(), $We)), "import")
  }, {
    id: "fortran-free-form",
    name: "Fortran (Free Form)",
    aliases: ["f90", "f95", "f03", "f08", "f18"],
    import: __name(() => Promise.resolve().then(() => (N0e(), zWe)), "import")
  }, {
    id: "fsharp",
    name: "F#",
    aliases: ["f#", "fs"],
    import: __name(() => Promise.resolve().then(() => (L0e(), UWe)), "import")
  }, {
    id: "gdresource",
    name: "GDResource",
    import: __name(() => Promise.resolve().then(() => (HWe(), ZWe)), "import")
  }, {
    id: "gdscript",
    name: "GDScript",
    import: __name(() => Promise.resolve().then(() => ($0e(), GWe)), "import")
  }, {
    id: "gdshader",
    name: "GDShader",
    import: __name(() => Promise.resolve().then(() => (M0e(), OWe)), "import")
  }, {
    id: "genie",
    name: "Genie",
    import: __name(() => Promise.resolve().then(() => (YWe(), WWe)), "import")
  }, {
    id: "gherkin",
    name: "Gherkin",
    import: __name(() => Promise.resolve().then(() => (JWe(), KWe)), "import")
  }, {
    id: "git-commit",
    name: "Git Commit Message",
    import: __name(() => Promise.resolve().then(() => (XWe(), VWe)), "import")
  }, {
    id: "git-rebase",
    name: "Git Rebase Message",
    import: __name(() => Promise.resolve().then(() => (tYe(), eYe)), "import")
  }, {
    id: "gleam",
    name: "Gleam",
    import: __name(() => Promise.resolve().then(() => (aYe(), nYe)), "import")
  }, {
    id: "glimmer-js",
    name: "Glimmer JS",
    aliases: ["gjs"],
    import: __name(() => Promise.resolve().then(() => (rYe(), iYe)), "import")
  }, {
    id: "glimmer-ts",
    name: "Glimmer TS",
    aliases: ["gts"],
    import: __name(() => Promise.resolve().then(() => (sYe(), oYe)), "import")
  }, {
    id: "glsl",
    name: "GLSL",
    import: __name(() => Promise.resolve().then(() => (Lk(), ZZe)), "import")
  }, {
    id: "gnuplot",
    name: "Gnuplot",
    import: __name(() => Promise.resolve().then(() => (j0e(), cYe)), "import")
  }, {
    id: "go",
    name: "Go",
    import: __name(() => Promise.resolve().then(() => (T8(), aHe)), "import")
  }, {
    id: "graphql",
    name: "GraphQL",
    aliases: ["gql"],
    import: __name(() => Promise.resolve().then(() => (Xj(), lYe)), "import")
  }, {
    id: "groovy",
    name: "Groovy",
    import: __name(() => Promise.resolve().then(() => (Gj(), iHe)), "import")
  }, {
    id: "hack",
    name: "Hack",
    import: __name(() => Promise.resolve().then(() => (uYe(), AYe)), "import")
  }, {
    id: "haml",
    name: "Ruby Haml",
    import: __name(() => Promise.resolve().then(() => (pYe(), mYe)), "import")
  }, {
    id: "handlebars",
    name: "Handlebars",
    aliases: ["hbs"],
    import: __name(() => Promise.resolve().then(() => (O0e(), dYe)), "import")
  }, {
    id: "haskell",
    name: "Haskell",
    aliases: ["hs"],
    import: __name(() => Promise.resolve().then(() => (Zj(), rHe)), "import")
  }, {
    id: "haxe",
    name: "Haxe",
    import: __name(() => Promise.resolve().then(() => (Z0e(), gYe)), "import")
  }, {
    id: "hcl",
    name: "HashiCorp HCL",
    import: __name(() => Promise.resolve().then(() => (hYe(), fYe)), "import")
  }, {
    id: "hjson",
    name: "Hjson",
    import: __name(() => Promise.resolve().then(() => (yYe(), bYe)), "import")
  }, {
    id: "hlsl",
    name: "HLSL",
    import: __name(() => Promise.resolve().then(() => (W0e(), wYe)), "import")
  }, {
    id: "html",
    name: "HTML",
    import: __name(() => Promise.resolve().then(() => (wr(), bZe)), "import")
  }, {
    id: "html-derivative",
    name: "HTML (Derivative)",
    import: __name(() => Promise.resolve().then(() => (l2(), BWe)), "import")
  }, {
    id: "http",
    name: "HTTP",
    import: __name(() => Promise.resolve().then(() => (_Ye(), CYe)), "import")
  }, {
    id: "hxml",
    name: "HXML",
    import: __name(() => Promise.resolve().then(() => (kYe(), xYe)), "import")
  }, {
    id: "hy",
    name: "Hy",
    import: __name(() => Promise.resolve().then(() => (BYe(), EYe)), "import")
  }, {
    id: "imba",
    name: "Imba",
    import: __name(() => Promise.resolve().then(() => (IYe(), vYe)), "import")
  }, {
    id: "ini",
    name: "INI",
    aliases: ["properties"],
    import: __name(() => Promise.resolve().then(() => (K0e(), QYe)), "import")
  }, {
    id: "java",
    name: "Java",
    import: __name(() => Promise.resolve().then(() => (Rk(), SZe)), "import")
  }, {
    id: "javascript",
    name: "JavaScript",
    aliases: ["js"],
    import: __name(() => Promise.resolve().then(() => (Ii(), fZe)), "import")
  }, {
    id: "jinja",
    name: "Jinja",
    import: __name(() => Promise.resolve().then(() => (TYe(), FYe)), "import")
  }, {
    id: "jison",
    name: "Jison",
    import: __name(() => Promise.resolve().then(() => (RYe(), NYe)), "import")
  }, {
    id: "json",
    name: "JSON",
    import: __name(() => Promise.resolve().then(() => (Hd(), TZe)), "import")
  }, {
    id: "json5",
    name: "JSON5",
    import: __name(() => Promise.resolve().then(() => (V0e(), LYe)), "import")
  }, {
    id: "jsonc",
    name: "JSON with Comments",
    import: __name(() => Promise.resolve().then(() => (eU(), PYe)), "import")
  }, {
    id: "jsonl",
    name: "JSON Lines",
    import: __name(() => Promise.resolve().then(() => (zYe(), MYe)), "import")
  }, {
    id: "jsonnet",
    name: "Jsonnet",
    import: __name(() => Promise.resolve().then(() => (qYe(), $Ye)), "import")
  }, {
    id: "jssm",
    name: "JSSM",
    aliases: ["fsl"],
    import: __name(() => Promise.resolve().then(() => (UYe(), jYe)), "import")
  }, {
    id: "jsx",
    name: "JSX",
    import: __name(() => Promise.resolve().then(() => (L8(), oHe)), "import")
  }, {
    id: "julia",
    name: "Julia",
    aliases: ["jl"],
    import: __name(() => Promise.resolve().then(() => (P8(), lHe)), "import")
  }, {
    id: "kotlin",
    name: "Kotlin",
    aliases: ["kt", "kts"],
    import: __name(() => Promise.resolve().then(() => (_0e(), AHe)), "import")
  }, {
    id: "kusto",
    name: "Kusto",
    aliases: ["kql"],
    import: __name(() => Promise.resolve().then(() => (GYe(), OYe)), "import")
  }, {
    id: "latex",
    name: "LaTeX",
    import: __name(() => Promise.resolve().then(() => (nye(), HYe)), "import")
  }, {
    id: "lean",
    name: "Lean 4",
    aliases: ["lean4"],
    import: __name(() => Promise.resolve().then(() => (YYe(), WYe)), "import")
  }, {
    id: "less",
    name: "Less",
    import: __name(() => Promise.resolve().then(() => (sC(), uHe)), "import")
  }, {
    id: "liquid",
    name: "Liquid",
    import: __name(() => Promise.resolve().then(() => (JYe(), KYe)), "import")
  }, {
    id: "log",
    name: "Log file",
    import: __name(() => Promise.resolve().then(() => (XYe(), VYe)), "import")
  }, {
    id: "logo",
    name: "Logo",
    import: __name(() => Promise.resolve().then(() => (tKe(), eKe)), "import")
  }, {
    id: "lua",
    name: "Lua",
    import: __name(() => Promise.resolve().then(() => (s2(), hHe)), "import")
  }, {
    id: "luau",
    name: "Luau",
    import: __name(() => Promise.resolve().then(() => (aKe(), nKe)), "import")
  }, {
    id: "make",
    name: "Makefile",
    aliases: ["makefile"],
    import: __name(() => Promise.resolve().then(() => (Hj(), mHe)), "import")
  }, {
    id: "markdown",
    name: "Markdown",
    aliases: ["md"],
    import: __name(() => Promise.resolve().then(() => (qb(), jWe)), "import")
  }, {
    id: "marko",
    name: "Marko",
    import: __name(() => Promise.resolve().then(() => (rKe(), iKe)), "import")
  }, {
    id: "matlab",
    name: "MATLAB",
    import: __name(() => Promise.resolve().then(() => (sKe(), oKe)), "import")
  }, {
    id: "mdc",
    name: "MDC",
    import: __name(() => Promise.resolve().then(() => (lKe(), cKe)), "import")
  }, {
    id: "mdx",
    name: "MDX",
    import: __name(() => Promise.resolve().then(() => (uKe(), AKe)), "import")
  }, {
    id: "mermaid",
    name: "Mermaid",
    import: __name(() => Promise.resolve().then(() => (pKe(), mKe)), "import")
  }, {
    id: "mojo",
    name: "Mojo",
    import: __name(() => Promise.resolve().then(() => (gKe(), dKe)), "import")
  }, {
    id: "move",
    name: "Move",
    import: __name(() => Promise.resolve().then(() => (hKe(), fKe)), "import")
  }, {
    id: "narrat",
    name: "Narrat Language",
    aliases: ["nar"],
    import: __name(() => Promise.resolve().then(() => (yKe(), bKe)), "import")
  }, {
    id: "nextflow",
    name: "Nextflow",
    aliases: ["nf"],
    import: __name(() => Promise.resolve().then(() => (CKe(), wKe)), "import")
  }, {
    id: "nginx",
    name: "Nginx",
    import: __name(() => Promise.resolve().then(() => (xKe(), _Ke)), "import")
  }, {
    id: "nim",
    name: "Nim",
    import: __name(() => Promise.resolve().then(() => (EKe(), kKe)), "import")
  }, {
    id: "nix",
    name: "Nix",
    import: __name(() => Promise.resolve().then(() => (vKe(), BKe)), "import")
  }, {
    id: "nushell",
    name: "nushell",
    aliases: ["nu"],
    import: __name(() => Promise.resolve().then(() => (QKe(), IKe)), "import")
  }, {
    id: "objective-c",
    name: "Objective-C",
    aliases: ["objc"],
    import: __name(() => Promise.resolve().then(() => (Wj(), pHe)), "import")
  }, {
    id: "objective-cpp",
    name: "Objective-C++",
    import: __name(() => Promise.resolve().then(() => (SKe(), DKe)), "import")
  }, {
    id: "ocaml",
    name: "OCaml",
    import: __name(() => Promise.resolve().then(() => (k0e(), dHe)), "import")
  }, {
    id: "pascal",
    name: "Pascal",
    import: __name(() => Promise.resolve().then(() => (TKe(), FKe)), "import")
  }, {
    id: "perl",
    name: "Perl",
    import: __name(() => Promise.resolve().then(() => (Yj(), gHe)), "import")
  }, {
    id: "php",
    name: "PHP",
    import: __name(() => Promise.resolve().then(() => (tU(), NKe)), "import")
  }, {
    id: "plsql",
    name: "PL/SQL",
    import: __name(() => Promise.resolve().then(() => (LKe(), RKe)), "import")
  }, {
    id: "po",
    name: "Gettext PO",
    aliases: ["pot", "potx"],
    import: __name(() => Promise.resolve().then(() => (MKe(), PKe)), "import")
  }, {
    id: "postcss",
    name: "PostCSS",
    import: __name(() => Promise.resolve().then(() => (Vj(), DHe)), "import")
  }, {
    id: "powerquery",
    name: "PowerQuery",
    import: __name(() => Promise.resolve().then(() => ($Ke(), zKe)), "import")
  }, {
    id: "powershell",
    name: "PowerShell",
    aliases: ["ps", "ps1"],
    import: __name(() => Promise.resolve().then(() => (iye(), qKe)), "import")
  }, {
    id: "prisma",
    name: "Prisma",
    import: __name(() => Promise.resolve().then(() => (UKe(), jKe)), "import")
  }, {
    id: "prolog",
    name: "Prolog",
    import: __name(() => Promise.resolve().then(() => (GKe(), OKe)), "import")
  }, {
    id: "proto",
    name: "Protocol Buffer 3",
    aliases: ["protobuf"],
    import: __name(() => Promise.resolve().then(() => (HKe(), ZKe)), "import")
  }, {
    id: "pug",
    name: "Pug",
    aliases: ["jade"],
    import: __name(() => Promise.resolve().then(() => (K8(), WKe)), "import")
  }, {
    id: "puppet",
    name: "Puppet",
    import: __name(() => Promise.resolve().then(() => (KKe(), YKe)), "import")
  }, {
    id: "purescript",
    name: "PureScript",
    import: __name(() => Promise.resolve().then(() => (VKe(), JKe)), "import")
  }, {
    id: "python",
    name: "Python",
    aliases: ["py"],
    import: __name(() => Promise.resolve().then(() => (oC(), sHe)), "import")
  }, {
    id: "qml",
    name: "QML",
    import: __name(() => Promise.resolve().then(() => (eJe(), XKe)), "import")
  }, {
    id: "qmldir",
    name: "QML Directory",
    import: __name(() => Promise.resolve().then(() => (nJe(), tJe)), "import")
  }, {
    id: "qss",
    name: "Qt Style Sheets",
    import: __name(() => Promise.resolve().then(() => (iJe(), aJe)), "import")
  }, {
    id: "r",
    name: "R",
    import: __name(() => Promise.resolve().then(() => (o2(), cHe)), "import")
  }, {
    id: "racket",
    name: "Racket",
    import: __name(() => Promise.resolve().then(() => (oJe(), rJe)), "import")
  }, {
    id: "raku",
    name: "Raku",
    aliases: ["perl6"],
    import: __name(() => Promise.resolve().then(() => (oye(), sJe)), "import")
  }, {
    id: "razor",
    name: "ASP.NET Razor",
    import: __name(() => Promise.resolve().then(() => (lJe(), cJe)), "import")
  }, {
    id: "reg",
    name: "Windows Registry Script",
    import: __name(() => Promise.resolve().then(() => (uJe(), AJe)), "import")
  }, {
    id: "regexp",
    name: "RegExp",
    aliases: ["regex"],
    import: __name(() => Promise.resolve().then(() => (qj(), GZe)), "import")
  }, {
    id: "rel",
    name: "Rel",
    import: __name(() => Promise.resolve().then(() => (pJe(), mJe)), "import")
  }, {
    id: "riscv",
    name: "RISC-V",
    import: __name(() => Promise.resolve().then(() => (gJe(), dJe)), "import")
  }, {
    id: "rst",
    name: "reStructuredText",
    import: __name(() => Promise.resolve().then(() => (hJe(), fJe)), "import")
  }, {
    id: "ruby",
    name: "Ruby",
    aliases: ["rb"],
    import: __name(() => Promise.resolve().then(() => (Mb(), bHe)), "import")
  }, {
    id: "rust",
    name: "Rust",
    aliases: ["rs"],
    import: __name(() => Promise.resolve().then(() => (q8(), yHe)), "import")
  }, {
    id: "sas",
    name: "SAS",
    import: __name(() => Promise.resolve().then(() => (yJe(), bJe)), "import")
  }, {
    id: "sass",
    name: "Sass",
    import: __name(() => Promise.resolve().then(() => (cC(), wHe)), "import")
  }, {
    id: "scala",
    name: "Scala",
    import: __name(() => Promise.resolve().then(() => (j8(), CHe)), "import")
  }, {
    id: "scheme",
    name: "Scheme",
    import: __name(() => Promise.resolve().then(() => (CJe(), wJe)), "import")
  }, {
    id: "scss",
    name: "SCSS",
    import: __name(() => Promise.resolve().then(() => (Gd(), wZe)), "import")
  }, {
    id: "shaderlab",
    name: "ShaderLab",
    aliases: ["shader"],
    import: __name(() => Promise.resolve().then(() => (xJe(), _Je)), "import")
  }, {
    id: "shellscript",
    name: "Shell",
    aliases: ["bash", "sh", "shell", "zsh"],
    import: __name(() => Promise.resolve().then(() => (Yd(), fHe)), "import")
  }, {
    id: "shellsession",
    name: "Shell Session",
    aliases: ["console"],
    import: __name(() => Promise.resolve().then(() => (EJe(), kJe)), "import")
  }, {
    id: "smalltalk",
    name: "Smalltalk",
    import: __name(() => Promise.resolve().then(() => (vJe(), BJe)), "import")
  }, {
    id: "solidity",
    name: "Solidity",
    import: __name(() => Promise.resolve().then(() => (QJe(), IJe)), "import")
  }, {
    id: "soy",
    name: "Closure Templates",
    aliases: ["closure-templates"],
    import: __name(() => Promise.resolve().then(() => (SJe(), DJe)), "import")
  }, {
    id: "sparql",
    name: "SPARQL",
    import: __name(() => Promise.resolve().then(() => (NJe(), TJe)), "import")
  }, {
    id: "splunk",
    name: "Splunk Query Language",
    aliases: ["spl"],
    import: __name(() => Promise.resolve().then(() => (LJe(), RJe)), "import")
  }, {
    id: "sql",
    name: "SQL",
    import: __name(() => Promise.resolve().then(() => (el(), HZe)), "import")
  }, {
    id: "ssh-config",
    name: "SSH Config",
    import: __name(() => Promise.resolve().then(() => (MJe(), PJe)), "import")
  }, {
    id: "stata",
    name: "Stata",
    import: __name(() => Promise.resolve().then(() => ($Je(), zJe)), "import")
  }, {
    id: "stylus",
    name: "Stylus",
    aliases: ["styl"],
    import: __name(() => Promise.resolve().then(() => (c2(), QHe)), "import")
  }, {
    id: "svelte",
    name: "Svelte",
    import: __name(() => Promise.resolve().then(() => (jJe(), qJe)), "import")
  }, {
    id: "swift",
    name: "Swift",
    import: __name(() => Promise.resolve().then(() => (Kj(), _He)), "import")
  }, {
    id: "system-verilog",
    name: "SystemVerilog",
    import: __name(() => Promise.resolve().then(() => (OJe(), UJe)), "import")
  }, {
    id: "systemd",
    name: "Systemd Units",
    import: __name(() => Promise.resolve().then(() => (ZJe(), GJe)), "import")
  }, {
    id: "tasl",
    name: "Tasl",
    import: __name(() => Promise.resolve().then(() => (WJe(), HJe)), "import")
  }, {
    id: "tcl",
    name: "Tcl",
    import: __name(() => Promise.resolve().then(() => (KJe(), YJe)), "import")
  }, {
    id: "templ",
    name: "Templ",
    import: __name(() => Promise.resolve().then(() => (VJe(), JJe)), "import")
  }, {
    id: "terraform",
    name: "Terraform",
    aliases: ["tf", "tfvars"],
    import: __name(() => Promise.resolve().then(() => (eVe(), XJe)), "import")
  }, {
    id: "tex",
    name: "TeX",
    import: __name(() => Promise.resolve().then(() => (eye(), ZYe)), "import")
  }, {
    id: "toml",
    name: "TOML",
    import: __name(() => Promise.resolve().then(() => (Jj(), xHe)), "import")
  }, {
    id: "ts-tags",
    name: "TypeScript with Tags",
    aliases: ["lit"],
    import: __name(() => Promise.resolve().then(() => (mVe(), uVe)), "import")
  }, {
    id: "tsv",
    name: "TSV",
    import: __name(() => Promise.resolve().then(() => (dVe(), pVe)), "import")
  }, {
    id: "tsx",
    name: "TSX",
    import: __name(() => Promise.resolve().then(() => (Z8(), SHe)), "import")
  }, {
    id: "turtle",
    name: "Turtle",
    import: __name(() => Promise.resolve().then(() => (cye(), FJe)), "import")
  }, {
    id: "twig",
    name: "Twig",
    import: __name(() => Promise.resolve().then(() => (fVe(), gVe)), "import")
  }, {
    id: "typescript",
    name: "TypeScript",
    aliases: ["ts"],
    import: __name(() => Promise.resolve().then(() => (vc(), kHe)), "import")
  }, {
    id: "typespec",
    name: "TypeSpec",
    aliases: ["tsp"],
    import: __name(() => Promise.resolve().then(() => (bVe(), hVe)), "import")
  }, {
    id: "typst",
    name: "Typst",
    aliases: ["typ"],
    import: __name(() => Promise.resolve().then(() => (wVe(), yVe)), "import")
  }, {
    id: "v",
    name: "V",
    import: __name(() => Promise.resolve().then(() => (_Ve(), CVe)), "import")
  }, {
    id: "vala",
    name: "Vala",
    import: __name(() => Promise.resolve().then(() => (kVe(), xVe)), "import")
  }, {
    id: "vb",
    name: "Visual Basic",
    aliases: ["cmd"],
    import: __name(() => Promise.resolve().then(() => (Aye(), EVe)), "import")
  }, {
    id: "verilog",
    name: "Verilog",
    import: __name(() => Promise.resolve().then(() => (vVe(), BVe)), "import")
  }, {
    id: "vhdl",
    name: "VHDL",
    import: __name(() => Promise.resolve().then(() => (QVe(), IVe)), "import")
  }, {
    id: "viml",
    name: "Vim Script",
    aliases: ["vim", "vimscript"],
    import: __name(() => Promise.resolve().then(() => (SVe(), DVe)), "import")
  }, {
    id: "vue",
    name: "Vue",
    import: __name(() => Promise.resolve().then(() => (mye(), $Ve)), "import")
  }, {
    id: "vue-html",
    name: "Vue HTML",
    import: __name(() => Promise.resolve().then(() => (jVe(), qVe)), "import")
  }, {
    id: "vyper",
    name: "Vyper",
    aliases: ["vy"],
    import: __name(() => Promise.resolve().then(() => (OVe(), UVe)), "import")
  }, {
    id: "wasm",
    name: "WebAssembly",
    import: __name(() => Promise.resolve().then(() => (ZVe(), GVe)), "import")
  }, {
    id: "wenyan",
    name: "Wenyan",
    aliases: ["\u6587\u8A00"],
    import: __name(() => Promise.resolve().then(() => (WVe(), HVe)), "import")
  }, {
    id: "wgsl",
    name: "WGSL",
    import: __name(() => Promise.resolve().then(() => (KVe(), YVe)), "import")
  }, {
    id: "wikitext",
    name: "Wikitext",
    aliases: ["mediawiki", "wiki"],
    import: __name(() => Promise.resolve().then(() => (XVe(), VVe)), "import")
  }, {
    id: "wolfram",
    name: "Wolfram",
    aliases: ["wl"],
    import: __name(() => Promise.resolve().then(() => (tXe(), eXe)), "import")
  }, {
    id: "xml",
    name: "XML",
    import: __name(() => Promise.resolve().then(() => (nu(), FZe)), "import")
  }, {
    id: "xsl",
    name: "XSL",
    import: __name(() => Promise.resolve().then(() => (dye(), JVe)), "import")
  }, {
    id: "yaml",
    name: "YAML",
    aliases: ["yml"],
    import: __name(() => Promise.resolve().then(() => (Tb(), $Ze)), "import")
  }, {
    id: "zenscript",
    name: "ZenScript",
    import: __name(() => Promise.resolve().then(() => (aXe(), nXe)), "import")
  }, {
    id: "zig",
    name: "Zig",
    import: __name(() => Promise.resolve().then(() => (rXe(), iXe)), "import")
  }],
  bundledLanguagesBase = Object.fromEntries(bundledLanguagesInfo.map(i => [i.id, i.import])),
  bundledLanguagesAlias = Object.fromEntries(bundledLanguagesInfo.flatMap(i => {
    var _a;
    return ((_a = i.aliases) == null ? void 0 : _a.map(a => [a, i.import])) || [];
  })),
  bundledLanguages = {
    ...bundledLanguagesBase,
    ...bundledLanguagesAlias
  };