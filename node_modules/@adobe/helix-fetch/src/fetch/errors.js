var require_errors = __commonJSMin((exports, module) => {
  "use strict";

  var _FetchBaseError = class _FetchBaseError extends Error {
    constructor(message, type, name) {
      super(message), this.type = type, this._name = name;
    }
    get name() {
      return this._name;
    }
    get [Symbol.toStringTag]() {
      return this._name;
    }
  };
  __name(_FetchBaseError, "FetchBaseError");
  var FetchBaseError = _FetchBaseError,
    _FetchError = class _FetchError extends FetchBaseError {
      constructor(message, type, systemError) {
        super(message, type, "FetchError"), systemError && (this.code = systemError.code, this.errno = systemError.errno, this.erroredSysCall = systemError.syscall);
      }
    };
  __name(_FetchError, "FetchError");
  var FetchError = _FetchError,
    _AbortError = class _AbortError extends FetchBaseError {
      constructor(message, type = "aborted") {
        super(message, type, "AbortError");
      }
    };
  __name(_AbortError, "AbortError");
  var AbortError = _AbortError;
  module.exports = {
    FetchBaseError: FetchBaseError,
    FetchError: FetchError,
    AbortError: AbortError
  };
});