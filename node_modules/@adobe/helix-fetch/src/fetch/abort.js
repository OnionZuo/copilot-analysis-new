var require_abort = __commonJSMin((exports, module) => {
  "use strict";

  var {
      EventEmitter: EventEmitter
    } = require("events"),
    SIGNAL_INTERNALS = Symbol("AbortSignal internals"),
    _AbortSignal = class _AbortSignal {
      constructor() {
        this[SIGNAL_INTERNALS] = {
          eventEmitter: new EventEmitter(),
          onabort: null,
          aborted: !1
        };
      }
      get aborted() {
        return this[SIGNAL_INTERNALS].aborted;
      }
      get onabort() {
        return this[SIGNAL_INTERNALS].onabort;
      }
      set onabort(handler) {
        this[SIGNAL_INTERNALS].onabort = handler;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      removeEventListener(name, handler) {
        this[SIGNAL_INTERNALS].eventEmitter.removeListener(name, handler);
      }
      addEventListener(name, handler) {
        this[SIGNAL_INTERNALS].eventEmitter.on(name, handler);
      }
      dispatchEvent(type) {
        let event = {
            type: type,
            target: this
          },
          handlerName = `on${type}`;
        typeof this[SIGNAL_INTERNALS][handlerName] == "function" && this[handlerName](event), this[SIGNAL_INTERNALS].eventEmitter.emit(type, event);
      }
      fire() {
        this[SIGNAL_INTERNALS].aborted = !0, this.dispatchEvent("abort");
      }
    };
  __name(_AbortSignal, "AbortSignal");
  var AbortSignal = _AbortSignal;
  Object.defineProperties(AbortSignal.prototype, {
    addEventListener: {
      enumerable: !0
    },
    removeEventListener: {
      enumerable: !0
    },
    dispatchEvent: {
      enumerable: !0
    },
    aborted: {
      enumerable: !0
    },
    onabort: {
      enumerable: !0
    }
  });
  var _TimeoutSignal = class _TimeoutSignal extends AbortSignal {
    constructor(timeout) {
      if (!Number.isInteger(timeout)) throw new TypeError(`Expected an integer, got ${typeof timeout}`);
      super(), this[SIGNAL_INTERNALS].timerId = setTimeout(() => {
        this.fire();
      }, timeout);
    }
    clear() {
      clearTimeout(this[SIGNAL_INTERNALS].timerId);
    }
  };
  __name(_TimeoutSignal, "TimeoutSignal");
  var TimeoutSignal = _TimeoutSignal;
  Object.defineProperties(TimeoutSignal.prototype, {
    clear: {
      enumerable: !0
    }
  });
  var CONTROLLER_INTERNALS = Symbol("AbortController internals"),
    _AbortController = class _AbortController {
      constructor() {
        this[CONTROLLER_INTERNALS] = {
          signal: new AbortSignal()
        };
      }
      get signal() {
        return this[CONTROLLER_INTERNALS].signal;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      abort() {
        this[CONTROLLER_INTERNALS].signal.aborted || this[CONTROLLER_INTERNALS].signal.fire();
      }
    };
  __name(_AbortController, "AbortController");
  var AbortController = _AbortController;
  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: !0
    },
    abort: {
      enumerable: !0
    }
  });
  module.exports = {
    AbortController: AbortController,
    AbortSignal: AbortSignal,
    TimeoutSignal: TimeoutSignal
  };
});