var require_policy = __commonJSMin((exports, module) => {
  "use strict";

  var CachePolicy = Qke(),
    {
      Headers: Headers
    } = DB(),
    convertRequest = __name(req => ({
      url: req.url,
      method: req.method,
      headers: req.headers.plain()
    }), "convertRequest"),
    convertResponse = __name(res => ({
      status: res.status,
      headers: res.headers.plain()
    }), "convertResponse"),
    _CachePolicyWrapper = class _CachePolicyWrapper {
      constructor(req, res, options) {
        this.policy = new CachePolicy(convertRequest(req), convertResponse(res), options);
      }
      storable() {
        return this.policy.storable();
      }
      satisfiesWithoutRevalidation(req) {
        return this.policy.satisfiesWithoutRevalidation(convertRequest(req));
      }
      responseHeaders(res) {
        return new Headers(this.policy.responseHeaders(convertResponse(res)));
      }
      timeToLive() {
        return this.policy.timeToLive();
      }
    };
  __name(_CachePolicyWrapper, "CachePolicyWrapper");
  var CachePolicyWrapper = _CachePolicyWrapper;
  module.exports = CachePolicyWrapper;
});