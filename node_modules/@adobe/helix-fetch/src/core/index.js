var require_core = __commonJSMin((exports, module) => {
  "use strict";

  var debug = b_()("helix-fetch:core"),
    {
      request: request,
      setupContext: setupContext,
      resetContext: resetContext,
      RequestAbortedError: RequestAbortedError,
      ALPN_HTTP2: ALPN_HTTP2,
      ALPN_HTTP2C: ALPN_HTTP2C,
      ALPN_HTTP1_1: ALPN_HTTP1_1,
      ALPN_HTTP1_0: ALPN_HTTP1_0
    } = eEe(),
    _RequestContext = class _RequestContext {
      constructor(options) {
        this.options = {
          ...(options || {})
        }, setupContext(this);
      }
      api() {
        return {
          request: __name(async (url, options) => this.request(url, options), "request"),
          context: __name((options = {}) => new _RequestContext(options).api(), "context"),
          setCA: __name(ca => this.setCA(ca), "setCA"),
          reset: __name(async () => this.reset(), "reset"),
          RequestAbortedError: RequestAbortedError,
          ALPN_HTTP2: ALPN_HTTP2,
          ALPN_HTTP2C: ALPN_HTTP2C,
          ALPN_HTTP1_1: ALPN_HTTP1_1,
          ALPN_HTTP1_0: ALPN_HTTP1_0
        };
      }
      async request(url, options) {
        return request(this, url, options);
      }
      setCA(ca) {
        this.options.ca = ca;
      }
      async reset() {
        return debug("resetting context"), resetContext(this);
      }
    };
  __name(_RequestContext, "RequestContext");
  var RequestContext = _RequestContext;
  module.exports = new RequestContext().api();
});