var require_lock = __commonJSMin((exports, module) => {
  "use strict";

  var {
      EventEmitter: EventEmitter
    } = require("events"),
    lock = __name(() => {
      let locked = {},
        ee = new EventEmitter();
      return ee.setMaxListeners(0), {
        acquire: __name(key => new Promise(resolve => {
          if (!locked[key]) {
            locked[key] = !0, resolve();
            return;
          }
          let tryAcquire = __name(value => {
            locked[key] || (locked[key] = !0, ee.removeListener(key, tryAcquire), resolve(value));
          }, "tryAcquire");
          ee.on(key, tryAcquire);
        }), "acquire"),
        release: __name((key, value) => {
          Reflect.deleteProperty(locked, key), setImmediate(() => ee.emit(key, value));
        }, "release")
      };
    }, "lock");
  module.exports = lock;
});