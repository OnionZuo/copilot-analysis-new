var require_dist = __commonJSMin(exports => {
  "use strict";

  var __assign = exports && exports.__assign || function () {
      return __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      }, __assign.apply(this, arguments);
    },
    __spreadArray = exports && exports.__spreadArray || function (to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) (ar || !(i in from)) && (ar || (ar = Array.prototype.slice.call(from, 0, i)), ar[i] = from[i]);
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.convert = exports.Format = exports.addToGlobalAgent = exports.get = void 0;
  var https = require("https"),
    tls_1 = require("tls"),
    child_process_1 = require("child_process"),
    undici_1 = XPe(),
    formatter_1 = bze();
  Object.defineProperty(exports, "Format", {
    enumerable: !0,
    get: __name(function () {
      return formatter_1.Format;
    }, "get")
  });
  Object.defineProperty(exports, "convert", {
    enumerable: !0,
    get: __name(function () {
      return formatter_1.convert;
    }, "get")
  });
  var isMac = process.platform === "darwin",
    globalAgent = https.globalAgent,
    getParamsDefaults = {
      keychain: "all",
      unique: !0,
      excludeBundled: !0,
      format: formatter_1.Format.pem
    };
  function get(params) {
    if (params === void 0 && (params = getParamsDefaults), !isMac) return [];
    params = __assign(__assign({}, getParamsDefaults), params);
    var splitPattern = /(?=-----BEGIN\sCERTIFICATE-----)/g,
      args = ["find-certificate", "-a", "-p"],
      result = [];
    if (params.keychain === "all" || params.keychain === "SystemRootCertificates") {
      var systemRootCertsPath = "/System/Library/Keychains/SystemRootCertificates.keychain",
        root = (0, child_process_1.spawnSync)("/usr/bin/security", args.concat(systemRootCertsPath)).stdout.toString().split(splitPattern).map(function (c) {
          return c.trim();
        });
      result = __spreadArray(__spreadArray([], result, !0), root, !0);
    }
    if (params.keychain === "all" || params.keychain === "current") {
      var trusted = (0, child_process_1.spawnSync)("/usr/bin/security", args).stdout.toString().split(splitPattern).map(function (c) {
        return c.trim();
      });
      result = __spreadArray(__spreadArray([], result, !0), trusted, !0);
    }
    if (params.unique || params.excludeBundled) {
      var fingerprints_1 = result.map(function (c) {
          return (0, formatter_1.convert)(c, formatter_1.Format.fingerprint);
        }),
        nodeFingerprints_1 = params.excludeBundled ? tls_1.rootCertificates.map(function (c) {
          return (0, formatter_1.convert)(c, formatter_1.Format.fingerprint);
        }) : [];
      result = result.filter(function (pem, index) {
        var fingerprint = fingerprints_1[index];
        return !(params.unique && index !== fingerprints_1.indexOf(fingerprint) || params.excludeBundled && nodeFingerprints_1.includes(fingerprint));
      });
    }
    return result.map(function (c) {
      return (0, formatter_1.convert)(c, params.format);
    });
  }
  __name(get, "get");
  exports.get = get;
  var originalCA = globalAgent.options.ca,
    addToGlobalAgent = __name(function (params) {
      if (params === void 0 && (params = getParamsDefaults), !!isMac) {
        var cas;
        Array.isArray(originalCA) ? cas = Array.from(originalCA) : cas = typeof originalCA < "u" ? [originalCA] : [], get(__assign(__assign(__assign({}, getParamsDefaults), params), {
          format: formatter_1.Format.pem,
          excludeBundled: !1
        })).forEach(function (cert) {
          return cas.push(cert);
        }), globalAgent.options.ca = cas, https.Agent = function (original) {
          return function (options) {
            var opts = typeof options < "u" ? __assign({}, options) : {};
            return typeof opts.ca > "u" && (opts.ca = cas), original.call(this, opts);
          };
        }(https.Agent), (0, undici_1.setGlobalDispatcher)(new undici_1.Agent({
          connect: {
            ca: cas
          }
        }));
      }
    }, "addToGlobalAgent");
  exports.addToGlobalAgent = addToGlobalAgent;
});