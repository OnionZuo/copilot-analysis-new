var require_array_set = __commonJSMin(exports => {
  var util = yB(),
    has = Object.prototype.hasOwnProperty,
    hasNativeMap = typeof Map < "u";
  function ArraySet() {
    this._array = [], this._set = hasNativeMap ? new Map() : Object.create(null);
  }
  __name(ArraySet, "ArraySet");
  ArraySet.fromArray = __name(function (aArray, aAllowDuplicates) {
    for (var set = new ArraySet(), i = 0, len = aArray.length; i < len; i++) set.add(aArray[i], aAllowDuplicates);
    return set;
  }, "ArraySet_fromArray");
  ArraySet.prototype.size = __name(function () {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  }, "ArraySet_size");
  ArraySet.prototype.add = __name(function (aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr),
      isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr),
      idx = this._array.length;
    (!isDuplicate || aAllowDuplicates) && this._array.push(aStr), isDuplicate || (hasNativeMap ? this._set.set(aStr, idx) : this._set[sStr] = idx);
  }, "ArraySet_add");
  ArraySet.prototype.has = __name(function (aStr) {
    if (hasNativeMap) return this._set.has(aStr);
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }, "ArraySet_has");
  ArraySet.prototype.indexOf = __name(function (aStr) {
    if (hasNativeMap) {
      var idx = this._set.get(aStr);
      if (idx >= 0) return idx;
    } else {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) return this._set[sStr];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  }, "ArraySet_indexOf");
  ArraySet.prototype.at = __name(function (aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) return this._array[aIdx];
    throw new Error("No element indexed by " + aIdx);
  }, "ArraySet_at");
  ArraySet.prototype.toArray = __name(function () {
    return this._array.slice();
  }, "ArraySet_toArray");
  exports.ArraySet = ArraySet;
});