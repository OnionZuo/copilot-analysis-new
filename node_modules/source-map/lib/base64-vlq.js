var require_base64_vlq = __commonJSMin(exports => {
  var base64 = c_e(),
    VLQ_BASE_SHIFT = 5,
    VLQ_BASE = 1 << VLQ_BASE_SHIFT,
    VLQ_BASE_MASK = VLQ_BASE - 1,
    VLQ_CONTINUATION_BIT = VLQ_BASE;
  function toVLQSigned(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
  }
  __name(toVLQSigned, "toVLQSigned");
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1,
      shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
  }
  __name(fromVLQSigned, "fromVLQSigned");
  exports.encode = __name(function (aValue) {
    var encoded = "",
      digit,
      vlq = toVLQSigned(aValue);
    do digit = vlq & VLQ_BASE_MASK, vlq >>>= VLQ_BASE_SHIFT, vlq > 0 && (digit |= VLQ_CONTINUATION_BIT), encoded += base64.encode(digit); while (vlq > 0);
    return encoded;
  }, "base64VLQ_encode");
  exports.decode = __name(function (aStr, aIndex, aOutParam) {
    var strLen = aStr.length,
      result = 0,
      shift = 0,
      continuation,
      digit;
    do {
      if (aIndex >= strLen) throw new Error("Expected more digits in base 64 VLQ value.");
      if (digit = base64.decode(aStr.charCodeAt(aIndex++)), digit === -1) throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      continuation = !!(digit & VLQ_CONTINUATION_BIT), digit &= VLQ_BASE_MASK, result = result + (digit << shift), shift += VLQ_BASE_SHIFT;
    } while (continuation);
    aOutParam.value = fromVLQSigned(result), aOutParam.rest = aIndex;
  }, "base64VLQ_decode");
});