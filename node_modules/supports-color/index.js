var require_supports_color = __commonJSMin((exports, module) => {
  "use strict";

  var os = require("os"),
    tty = require("tty"),
    hasFlag = eke(),
    {
      env: env
    } = process,
    forceColor;
  hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1);
  "FORCE_COLOR" in env && (env.FORCE_COLOR === "true" ? forceColor = 1 : env.FORCE_COLOR === "false" ? forceColor = 0 : forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3));
  function translateLevel(level) {
    return level === 0 ? !1 : {
      level: level,
      hasBasic: !0,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  __name(translateLevel, "translateLevel");
  function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) return 0;
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
    if (hasFlag("color=256")) return 2;
    if (haveStream && !streamIsTTY && forceColor === void 0) return 0;
    let min = forceColor || 0;
    if (env.TERM === "dumb") return min;
    if (process.platform === "win32") {
      let osRelease = os.release().split(".");
      return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in env) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some(sign => sign in env) || env.CI_NAME === "codeship" ? 1 : min;
    if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    if (env.COLORTERM === "truecolor") return 3;
    if ("TERM_PROGRAM" in env) {
      let version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
  }
  __name(supportsColor, "supportsColor");
  function getSupportLevel(stream) {
    let level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
  }
  __name(getSupportLevel, "getSupportLevel");
  module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(!0, tty.isatty(1))),
    stderr: translateLevel(supportsColor(!0, tty.isatty(2)))
  };
});