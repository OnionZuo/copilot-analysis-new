var require_timers = __commonJSMin((exports, module) => {
  "use strict";

  var fastNow = 0,
    RESOLUTION_MS = 1e3,
    TICK_MS = (RESOLUTION_MS >> 1) - 1,
    fastNowTimeout,
    kFastTimer = Symbol("kFastTimer"),
    fastTimers = [],
    NOT_IN_LIST = -2,
    TO_BE_CLEARED = -1,
    PENDING = 0,
    ACTIVE = 1;
  function onTick() {
    fastNow += TICK_MS;
    let idx = 0,
      len = fastTimers.length;
    for (; idx < len;) {
      let timer = fastTimers[idx];
      timer._state === PENDING ? (timer._idleStart = fastNow - TICK_MS, timer._state = ACTIVE) : timer._state === ACTIVE && fastNow >= timer._idleStart + timer._idleTimeout && (timer._state = TO_BE_CLEARED, timer._idleStart = -1, timer._onTimeout(timer._timerArg)), timer._state === TO_BE_CLEARED ? (timer._state = NOT_IN_LIST, --len !== 0 && (fastTimers[idx] = fastTimers[len])) : ++idx;
    }
    fastTimers.length = len, fastTimers.length !== 0 && refreshTimeout();
  }
  __name(onTick, "onTick");
  function refreshTimeout() {
    fastNowTimeout ? fastNowTimeout.refresh() : (clearTimeout(fastNowTimeout), fastNowTimeout = setTimeout(onTick, TICK_MS), fastNowTimeout.unref && fastNowTimeout.unref());
  }
  __name(refreshTimeout, "refreshTimeout");
  var _a;
  _a = kFastTimer;
  var _FastTimer = class _FastTimer {
    constructor(callback, delay, arg) {
      __publicField(this, _a, !0);
      __publicField(this, "_state", NOT_IN_LIST);
      __publicField(this, "_idleTimeout", -1);
      __publicField(this, "_idleStart", -1);
      __publicField(this, "_onTimeout");
      __publicField(this, "_timerArg");
      this._onTimeout = callback, this._idleTimeout = delay, this._timerArg = arg, this.refresh();
    }
    refresh() {
      this._state === NOT_IN_LIST && fastTimers.push(this), (!fastNowTimeout || fastTimers.length === 1) && refreshTimeout(), this._state = PENDING;
    }
    clear() {
      this._state = TO_BE_CLEARED, this._idleStart = -1;
    }
  };
  __name(_FastTimer, "FastTimer");
  var FastTimer = _FastTimer;
  module.exports = {
    setTimeout(callback, delay, arg) {
      return delay <= RESOLUTION_MS ? setTimeout(callback, delay, arg) : new FastTimer(callback, delay, arg);
    },
    clearTimeout(timeout) {
      timeout[kFastTimer] ? timeout.clear() : clearTimeout(timeout);
    },
    setFastTimeout(callback, delay, arg) {
      return new FastTimer(callback, delay, arg);
    },
    clearFastTimeout(timeout) {
      timeout.clear();
    },
    now() {
      return fastNow;
    },
    tick(delay = 0) {
      fastNow += delay - RESOLUTION_MS + 1, onTick(), onTick();
    },
    reset() {
      fastNow = 0, fastTimers.length = 0, clearTimeout(fastNowTimeout), fastNowTimeout = null;
    },
    kFastTimer: kFastTimer
  };
});