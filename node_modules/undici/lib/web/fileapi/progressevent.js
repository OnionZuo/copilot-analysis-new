var require_progressevent = __commonJSMin((exports, module) => {
  "use strict";

  var {
      webidl: webidl
    } = Gc(),
    kState = Symbol("ProgressEvent state"),
    _ProgressEvent = class _ProgressEvent extends Event {
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type, "ProgressEvent constructor", "type"), eventInitDict = webidl.converters.ProgressEventInit(eventInitDict != null ? eventInitDict : {}), super(type, eventInitDict), this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        return webidl.brandCheck(this, _ProgressEvent), this[kState].lengthComputable;
      }
      get loaded() {
        return webidl.brandCheck(this, _ProgressEvent), this[kState].loaded;
      }
      get total() {
        return webidl.brandCheck(this, _ProgressEvent), this[kState].total;
      }
    };
  __name(_ProgressEvent, "ProgressEvent");
  var ProgressEvent = _ProgressEvent;
  webidl.converters.ProgressEventInit = webidl.dictionaryConverter([{
    key: "lengthComputable",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "loaded",
    converter: webidl.converters["unsigned long long"],
    defaultValue: __name(() => 0, "defaultValue")
  }, {
    key: "total",
    converter: webidl.converters["unsigned long long"],
    defaultValue: __name(() => 0, "defaultValue")
  }, {
    key: "bubbles",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "cancelable",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "composed",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }]);
  module.exports = {
    ProgressEvent: ProgressEvent
  };
});