var require_filereader = __commonJSMin((exports, module) => {
  "use strict";

  var {
      staticPropertyDescriptors: staticPropertyDescriptors,
      readOperation: readOperation,
      fireAProgressEvent: fireAProgressEvent
    } = p6e(),
    {
      kState: kState,
      kError: kError,
      kResult: kResult,
      kEvents: kEvents,
      kAborted: kAborted
    } = sse(),
    {
      webidl: webidl
    } = Gc(),
    {
      kEnumerableProperty: kEnumerableProperty
    } = oi(),
    _FileReader = class _FileReader extends EventTarget {
      constructor() {
        super(), this[kState] = "empty", this[kResult] = null, this[kError] = null, this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, _FileReader), webidl.argumentLengthCheck(arguments, 1, "FileReader.readAsArrayBuffer"), blob = webidl.converters.Blob(blob, {
          strict: !1
        }), readOperation(this, blob, "ArrayBuffer");
      }
      readAsBinaryString(blob) {
        webidl.brandCheck(this, _FileReader), webidl.argumentLengthCheck(arguments, 1, "FileReader.readAsBinaryString"), blob = webidl.converters.Blob(blob, {
          strict: !1
        }), readOperation(this, blob, "BinaryString");
      }
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, _FileReader), webidl.argumentLengthCheck(arguments, 1, "FileReader.readAsText"), blob = webidl.converters.Blob(blob, {
          strict: !1
        }), encoding !== void 0 && (encoding = webidl.converters.DOMString(encoding, "FileReader.readAsText", "encoding")), readOperation(this, blob, "Text", encoding);
      }
      readAsDataURL(blob) {
        webidl.brandCheck(this, _FileReader), webidl.argumentLengthCheck(arguments, 1, "FileReader.readAsDataURL"), blob = webidl.converters.Blob(blob, {
          strict: !1
        }), readOperation(this, blob, "DataURL");
      }
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        this[kState] === "loading" && (this[kState] = "done", this[kResult] = null), this[kAborted] = !0, fireAProgressEvent("abort", this), this[kState] !== "loading" && fireAProgressEvent("loadend", this);
      }
      get readyState() {
        switch (webidl.brandCheck(this, _FileReader), this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      get result() {
        return webidl.brandCheck(this, _FileReader), this[kResult];
      }
      get error() {
        return webidl.brandCheck(this, _FileReader), this[kError];
      }
      get onloadend() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].loadend;
      }
      set onloadend(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].loadend && this.removeEventListener("loadend", this[kEvents].loadend), typeof fn == "function" ? (this[kEvents].loadend = fn, this.addEventListener("loadend", fn)) : this[kEvents].loadend = null;
      }
      get onerror() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].error && this.removeEventListener("error", this[kEvents].error), typeof fn == "function" ? (this[kEvents].error = fn, this.addEventListener("error", fn)) : this[kEvents].error = null;
      }
      get onloadstart() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].loadstart;
      }
      set onloadstart(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].loadstart && this.removeEventListener("loadstart", this[kEvents].loadstart), typeof fn == "function" ? (this[kEvents].loadstart = fn, this.addEventListener("loadstart", fn)) : this[kEvents].loadstart = null;
      }
      get onprogress() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].progress;
      }
      set onprogress(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].progress && this.removeEventListener("progress", this[kEvents].progress), typeof fn == "function" ? (this[kEvents].progress = fn, this.addEventListener("progress", fn)) : this[kEvents].progress = null;
      }
      get onload() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].load;
      }
      set onload(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].load && this.removeEventListener("load", this[kEvents].load), typeof fn == "function" ? (this[kEvents].load = fn, this.addEventListener("load", fn)) : this[kEvents].load = null;
      }
      get onabort() {
        return webidl.brandCheck(this, _FileReader), this[kEvents].abort;
      }
      set onabort(fn) {
        webidl.brandCheck(this, _FileReader), this[kEvents].abort && this.removeEventListener("abort", this[kEvents].abort), typeof fn == "function" ? (this[kEvents].abort = fn, this.addEventListener("abort", fn)) : this[kEvents].abort = null;
      }
    };
  __name(_FileReader, "FileReader");
  var FileReader = _FileReader;
  FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
  FileReader.LOADING = FileReader.prototype.LOADING = 1;
  FileReader.DONE = FileReader.prototype.DONE = 2;
  Object.defineProperties(FileReader.prototype, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors,
    readAsArrayBuffer: kEnumerableProperty,
    readAsBinaryString: kEnumerableProperty,
    readAsText: kEnumerableProperty,
    readAsDataURL: kEnumerableProperty,
    abort: kEnumerableProperty,
    readyState: kEnumerableProperty,
    result: kEnumerableProperty,
    error: kEnumerableProperty,
    onloadstart: kEnumerableProperty,
    onprogress: kEnumerableProperty,
    onload: kEnumerableProperty,
    onabort: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onloadend: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "FileReader",
      writable: !1,
      enumerable: !1,
      configurable: !0
    }
  });
  Object.defineProperties(FileReader, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors
  });
  module.exports = {
    FileReader: FileReader
  };
});