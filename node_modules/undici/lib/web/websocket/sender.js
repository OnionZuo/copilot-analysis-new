var require_sender = __commonJSMin((exports, module) => {
  "use strict";

  var {
      WebsocketFrameSend: WebsocketFrameSend
    } = I7(),
    {
      opcodes: opcodes,
      sendHints: sendHints
    } = Px(),
    FixedQueue = rre(),
    FastBuffer = Buffer[Symbol.species],
    _queue,
    _running,
    _socket,
    _SendQueue_instances,
    run_fn,
    _SendQueue = class _SendQueue {
      constructor(socket) {
        __privateAdd(this, _SendQueue_instances);
        __privateAdd(this, _queue, new FixedQueue());
        __privateAdd(this, _running, !1);
        __privateAdd(this, _socket);
        __privateSet(this, _socket, socket);
      }
      add(item, cb, hint) {
        if (hint !== sendHints.blob) {
          let frame = createFrame(item, hint);
          if (!__privateGet(this, _running)) __privateGet(this, _socket).write(frame, cb);else {
            let node = {
              promise: null,
              callback: cb,
              frame: frame
            };
            __privateGet(this, _queue).push(node);
          }
          return;
        }
        let node = {
          promise: item.arrayBuffer().then(ab => {
            node.promise = null, node.frame = createFrame(ab, hint);
          }),
          callback: cb,
          frame: null
        };
        __privateGet(this, _queue).push(node), __privateGet(this, _running) || __privateMethod(this, _SendQueue_instances, run_fn).call(this);
      }
    };
  _queue = new WeakMap(), _running = new WeakMap(), _socket = new WeakMap(), _SendQueue_instances = new WeakSet(), run_fn = __name(async function () {
    __privateSet(this, _running, !0);
    let queue = __privateGet(this, _queue);
    for (; !queue.isEmpty();) {
      let node = queue.shift();
      node.promise !== null && (await node.promise), __privateGet(this, _socket).write(node.frame, node.callback), node.callback = node.frame = null;
    }
    __privateSet(this, _running, !1);
  }, "#run"), __name(_SendQueue, "SendQueue");
  var SendQueue = _SendQueue;
  function createFrame(data, hint) {
    return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.string ? opcodes.TEXT : opcodes.BINARY);
  }
  __name(createFrame, "createFrame");
  function toBuffer(data, hint) {
    switch (hint) {
      case sendHints.string:
        return Buffer.from(data);
      case sendHints.arrayBuffer:
      case sendHints.blob:
        return new FastBuffer(data);
      case sendHints.typedArray:
        return new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
    }
  }
  __name(toBuffer, "toBuffer");
  module.exports = {
    SendQueue: SendQueue
  };
});