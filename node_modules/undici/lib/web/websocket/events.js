var require_events = __commonJSMin((exports, module) => {
  "use strict";

  var {
      webidl: webidl
    } = Gc(),
    {
      kEnumerableProperty: kEnumerableProperty
    } = oi(),
    {
      kConstruct: kConstruct
    } = fo(),
    {
      MessagePort: MessagePort
    } = require("worker_threads"),
    _eventInit,
    _MessageEvent = class _MessageEvent extends Event {
      constructor(type, eventInitDict = {}) {
        var __super = (...args) => (super(...args), __privateAdd(this, _eventInit), this);
        if (type === kConstruct) {
          __super(arguments[1], arguments[2]), webidl.util.markAsUncloneable(this);
          return;
        }
        let prefix = "MessageEvent constructor";
        webidl.argumentLengthCheck(arguments, 1, prefix), type = webidl.converters.DOMString(type, prefix, "type"), eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, "eventInitDict"), __super(type, eventInitDict), __privateSet(this, _eventInit, eventInitDict), webidl.util.markAsUncloneable(this);
      }
      get data() {
        return webidl.brandCheck(this, _MessageEvent), __privateGet(this, _eventInit).data;
      }
      get origin() {
        return webidl.brandCheck(this, _MessageEvent), __privateGet(this, _eventInit).origin;
      }
      get lastEventId() {
        return webidl.brandCheck(this, _MessageEvent), __privateGet(this, _eventInit).lastEventId;
      }
      get source() {
        return webidl.brandCheck(this, _MessageEvent), __privateGet(this, _eventInit).source;
      }
      get ports() {
        return webidl.brandCheck(this, _MessageEvent), Object.isFrozen(__privateGet(this, _eventInit).ports) || Object.freeze(__privateGet(this, _eventInit).ports), __privateGet(this, _eventInit).ports;
      }
      initMessageEvent(type, bubbles = !1, cancelable = !1, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        return webidl.brandCheck(this, _MessageEvent), webidl.argumentLengthCheck(arguments, 1, "MessageEvent.initMessageEvent"), new _MessageEvent(type, {
          bubbles: bubbles,
          cancelable: cancelable,
          data: data,
          origin: origin,
          lastEventId: lastEventId,
          source: source,
          ports: ports
        });
      }
      static createFastMessageEvent(type, init) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
        let messageEvent = new _MessageEvent(kConstruct, type, init);
        return __privateSet(messageEvent, _eventInit, init), (_b = (_a = __privateGet(messageEvent, _eventInit)).data) != null || (_a.data = null), (_d = (_c = __privateGet(messageEvent, _eventInit)).origin) != null || (_c.origin = ""), (_f = (_e = __privateGet(messageEvent, _eventInit)).lastEventId) != null || (_e.lastEventId = ""), (_h = (_g = __privateGet(messageEvent, _eventInit)).source) != null || (_g.source = null), (_j = (_i = __privateGet(messageEvent, _eventInit)).ports) != null || (_i.ports = []), messageEvent;
      }
    };
  _eventInit = new WeakMap(), __name(_MessageEvent, "MessageEvent");
  var MessageEvent = _MessageEvent,
    {
      createFastMessageEvent: createFastMessageEvent
    } = MessageEvent;
  delete MessageEvent.createFastMessageEvent;
  var _eventInit,
    _CloseEvent = class _CloseEvent extends Event {
      constructor(type, eventInitDict = {}) {
        let prefix = "CloseEvent constructor";
        webidl.argumentLengthCheck(arguments, 1, prefix), type = webidl.converters.DOMString(type, prefix, "type"), eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        __privateAdd(this, _eventInit);
        __privateSet(this, _eventInit, eventInitDict), webidl.util.markAsUncloneable(this);
      }
      get wasClean() {
        return webidl.brandCheck(this, _CloseEvent), __privateGet(this, _eventInit).wasClean;
      }
      get code() {
        return webidl.brandCheck(this, _CloseEvent), __privateGet(this, _eventInit).code;
      }
      get reason() {
        return webidl.brandCheck(this, _CloseEvent), __privateGet(this, _eventInit).reason;
      }
    };
  _eventInit = new WeakMap(), __name(_CloseEvent, "CloseEvent");
  var CloseEvent = _CloseEvent,
    _eventInit,
    _ErrorEvent = class _ErrorEvent extends Event {
      constructor(type, eventInitDict) {
        let prefix = "ErrorEvent constructor";
        webidl.argumentLengthCheck(arguments, 1, prefix);
        super(type, eventInitDict);
        __privateAdd(this, _eventInit);
        webidl.util.markAsUncloneable(this), type = webidl.converters.DOMString(type, prefix, "type"), eventInitDict = webidl.converters.ErrorEventInit(eventInitDict != null ? eventInitDict : {}), __privateSet(this, _eventInit, eventInitDict);
      }
      get message() {
        return webidl.brandCheck(this, _ErrorEvent), __privateGet(this, _eventInit).message;
      }
      get filename() {
        return webidl.brandCheck(this, _ErrorEvent), __privateGet(this, _eventInit).filename;
      }
      get lineno() {
        return webidl.brandCheck(this, _ErrorEvent), __privateGet(this, _eventInit).lineno;
      }
      get colno() {
        return webidl.brandCheck(this, _ErrorEvent), __privateGet(this, _eventInit).colno;
      }
      get error() {
        return webidl.brandCheck(this, _ErrorEvent), __privateGet(this, _eventInit).error;
      }
    };
  _eventInit = new WeakMap(), __name(_ErrorEvent, "ErrorEvent");
  var ErrorEvent = _ErrorEvent;
  Object.defineProperties(MessageEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "MessageEvent",
      configurable: !0
    },
    data: kEnumerableProperty,
    origin: kEnumerableProperty,
    lastEventId: kEnumerableProperty,
    source: kEnumerableProperty,
    ports: kEnumerableProperty,
    initMessageEvent: kEnumerableProperty
  });
  Object.defineProperties(CloseEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "CloseEvent",
      configurable: !0
    },
    reason: kEnumerableProperty,
    code: kEnumerableProperty,
    wasClean: kEnumerableProperty
  });
  Object.defineProperties(ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "ErrorEvent",
      configurable: !0
    },
    message: kEnumerableProperty,
    filename: kEnumerableProperty,
    lineno: kEnumerableProperty,
    colno: kEnumerableProperty,
    error: kEnumerableProperty
  });
  webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
  webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(webidl.converters.MessagePort);
  var eventInit = [{
    key: "bubbles",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "cancelable",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "composed",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }];
  webidl.converters.MessageEventInit = webidl.dictionaryConverter([...eventInit, {
    key: "data",
    converter: webidl.converters.any,
    defaultValue: __name(() => null, "defaultValue")
  }, {
    key: "origin",
    converter: webidl.converters.USVString,
    defaultValue: __name(() => "", "defaultValue")
  }, {
    key: "lastEventId",
    converter: webidl.converters.DOMString,
    defaultValue: __name(() => "", "defaultValue")
  }, {
    key: "source",
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: __name(() => null, "defaultValue")
  }, {
    key: "ports",
    converter: webidl.converters["sequence<MessagePort>"],
    defaultValue: __name(() => new Array(0), "defaultValue")
  }]);
  webidl.converters.CloseEventInit = webidl.dictionaryConverter([...eventInit, {
    key: "wasClean",
    converter: webidl.converters.boolean,
    defaultValue: __name(() => !1, "defaultValue")
  }, {
    key: "code",
    converter: webidl.converters["unsigned short"],
    defaultValue: __name(() => 0, "defaultValue")
  }, {
    key: "reason",
    converter: webidl.converters.USVString,
    defaultValue: __name(() => "", "defaultValue")
  }]);
  webidl.converters.ErrorEventInit = webidl.dictionaryConverter([...eventInit, {
    key: "message",
    converter: webidl.converters.DOMString,
    defaultValue: __name(() => "", "defaultValue")
  }, {
    key: "filename",
    converter: webidl.converters.USVString,
    defaultValue: __name(() => "", "defaultValue")
  }, {
    key: "lineno",
    converter: webidl.converters["unsigned long"],
    defaultValue: __name(() => 0, "defaultValue")
  }, {
    key: "colno",
    converter: webidl.converters["unsigned long"],
    defaultValue: __name(() => 0, "defaultValue")
  }, {
    key: "error",
    converter: webidl.converters.any
  }]);
  module.exports = {
    MessageEvent: MessageEvent,
    CloseEvent: CloseEvent,
    ErrorEvent: ErrorEvent,
    createFastMessageEvent: createFastMessageEvent
  };
});