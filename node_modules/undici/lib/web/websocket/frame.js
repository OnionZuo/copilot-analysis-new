var require_frame = __commonJSMin((exports, module) => {
  "use strict";

  var {
      maxUnsigned16Bit: maxUnsigned16Bit
    } = Px(),
    BUFFER_SIZE = 16386,
    crypto,
    buffer = null,
    bufIdx = BUFFER_SIZE;
  try {
    crypto = require("crypto");
  } catch {
    crypto = {
      randomFillSync: __name(function (buffer, _offset, _size) {
        for (let i = 0; i < buffer.length; ++i) buffer[i] = Math.random() * 255 | 0;
        return buffer;
      }, "randomFillSync")
    };
  }
  function generateMask() {
    return bufIdx === BUFFER_SIZE && (bufIdx = 0, crypto.randomFillSync(buffer != null ? buffer : Mx = Buffer.allocUnsafe(BUFFER_SIZE), 0, BUFFER_SIZE)), [buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++]];
  }
  __name(generateMask, "generateMask");
  var _WebsocketFrameSend = class _WebsocketFrameSend {
    constructor(data) {
      this.frameData = data;
    }
    createFrame(opcode) {
      var _a;
      let frameData = this.frameData,
        maskKey = generateMask(),
        bodyLength = (_a = frameData == null ? void 0 : frameData.byteLength) != null ? _a : 0,
        payloadLength = bodyLength,
        offset = 6;
      bodyLength > maxUnsigned16Bit ? (offset += 8, payloadLength = 127) : bodyLength > 125 && (offset += 2, payloadLength = 126);
      let buffer = Buffer.allocUnsafe(bodyLength + offset);
      buffer[0] = buffer[1] = 0, buffer[0] |= 128, buffer[0] = (buffer[0] & 240) + opcode;
      buffer[offset - 4] = maskKey[0], buffer[offset - 3] = maskKey[1], buffer[offset - 2] = maskKey[2], buffer[offset - 1] = maskKey[3], buffer[1] = payloadLength, payloadLength === 126 ? buffer.writeUInt16BE(bodyLength, 2) : payloadLength === 127 && (buffer[2] = buffer[3] = 0, buffer.writeUIntBE(bodyLength, 4, 6)), buffer[1] |= 128;
      for (let i = 0; i < bodyLength; ++i) buffer[offset + i] = frameData[i] ^ maskKey[i & 3];
      return buffer;
    }
  };
  __name(_WebsocketFrameSend, "WebsocketFrameSend");
  var WebsocketFrameSend = _WebsocketFrameSend;
  module.exports = {
    WebsocketFrameSend: WebsocketFrameSend
  };
});