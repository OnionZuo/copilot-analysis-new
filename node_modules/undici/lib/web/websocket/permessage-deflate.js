var require_permessage_deflate = __commonJSMin((exports, module) => {
  "use strict";

  var {
      createInflateRaw: createInflateRaw,
      Z_DEFAULT_WINDOWBITS: Z_DEFAULT_WINDOWBITS
    } = require("zlib"),
    {
      isValidClientWindowBits: isValidClientWindowBits
    } = R9(),
    tail = Buffer.from([0, 0, 255, 255]),
    kBuffer = Symbol("kBuffer"),
    kLength = Symbol("kLength"),
    _inflate,
    _options,
    _PerMessageDeflate = class _PerMessageDeflate {
      constructor(extensions) {
        __privateAdd(this, _inflate);
        __privateAdd(this, _options, {});
        __privateGet(this, _options).serverNoContextTakeover = extensions.has("server_no_context_takeover"), __privateGet(this, _options).serverMaxWindowBits = extensions.get("server_max_window_bits");
      }
      decompress(chunk, fin, callback) {
        if (!__privateGet(this, _inflate)) {
          let windowBits = Z_DEFAULT_WINDOWBITS;
          if (__privateGet(this, _options).serverMaxWindowBits) {
            if (!isValidClientWindowBits(__privateGet(this, _options).serverMaxWindowBits)) {
              callback(new Error("Invalid server_max_window_bits"));
              return;
            }
            windowBits = Number.parseInt(__privateGet(this, _options).serverMaxWindowBits);
          }
          __privateSet(this, _inflate, createInflateRaw({
            windowBits: windowBits
          })), __privateGet(this, _inflate)[kBuffer] = [], __privateGet(this, _inflate)[kLength] = 0, __privateGet(this, _inflate).on("data", data => {
            __privateGet(this, _inflate)[kBuffer].push(data), __privateGet(this, _inflate)[kLength] += data.length;
          }), __privateGet(this, _inflate).on("error", err => {
            __privateSet(this, _inflate, null), callback(err);
          });
        }
        __privateGet(this, _inflate).write(chunk), fin && __privateGet(this, _inflate).write(tail), __privateGet(this, _inflate).flush(() => {
          let full = Buffer.concat(__privateGet(this, _inflate)[kBuffer], __privateGet(this, _inflate)[kLength]);
          __privateGet(this, _inflate)[kBuffer].length = 0, __privateGet(this, _inflate)[kLength] = 0, callback(null, full);
        });
      }
    };
  _inflate = new WeakMap(), _options = new WeakMap(), __name(_PerMessageDeflate, "PerMessageDeflate");
  var PerMessageDeflate = _PerMessageDeflate;
  module.exports = {
    PerMessageDeflate: PerMessageDeflate
  };
});