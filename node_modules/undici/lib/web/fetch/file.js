var require_file = __commonJSMin((exports, module) => {
  "use strict";

  var {
      Blob: Blob,
      File: File
    } = require("buffer"),
    {
      kState: kState
    } = iw(),
    {
      webidl: webidl
    } = Gc(),
    _FileLike = class _FileLike {
      constructor(blobLike, fileName, options = {}) {
        var _a;
        let n = fileName,
          t = options.type,
          d = (_a = options.lastModified) != null ? _a : Date.now();
        this[kState] = {
          blobLike: blobLike,
          name: n,
          type: t,
          lastModified: d
        };
      }
      stream(...args) {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.slice(...args);
      }
      text(...args) {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.text(...args);
      }
      get size() {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.size;
      }
      get type() {
        return webidl.brandCheck(this, _FileLike), this[kState].blobLike.type;
      }
      get name() {
        return webidl.brandCheck(this, _FileLike), this[kState].name;
      }
      get lastModified() {
        return webidl.brandCheck(this, _FileLike), this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
  __name(_FileLike, "FileLike");
  var FileLike = _FileLike;
  webidl.converters.Blob = webidl.interfaceConverter(Blob);
  function isFileLike(object) {
    return object instanceof File || object && (typeof object.stream == "function" || typeof object.arrayBuffer == "function") && object[Symbol.toStringTag] === "File";
  }
  __name(isFileLike, "isFileLike");
  module.exports = {
    FileLike: FileLike,
    isFileLike: isFileLike
  };
});