var require_parse = __commonJSMin((exports, module) => {
  "use strict";

  var {
      maxNameValuePairSize: maxNameValuePairSize,
      maxAttributeValueSize: maxAttributeValueSize
    } = Q6e(),
    {
      isCTLExcludingHtab: isCTLExcludingHtab
    } = dse(),
    {
      collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast
    } = zA(),
    assert = require("assert");
  function parseSetCookie(header) {
    if (isCTLExcludingHtab(header)) return null;
    let nameValuePair = "",
      unparsedAttributes = "",
      name = "",
      value = "";
    if (header.includes(";")) {
      let position = {
        position: 0
      };
      nameValuePair = collectASequenceOfCodePointsFast(";", header, position), unparsedAttributes = header.slice(position.position);
    } else nameValuePair = header;
    if (!nameValuePair.includes("=")) value = nameValuePair;else {
      let position = {
        position: 0
      };
      name = collectASequenceOfCodePointsFast("=", nameValuePair, position), value = nameValuePair.slice(position.position + 1);
    }
    return name = name.trim(), value = value.trim(), name.length + value.length > maxNameValuePairSize ? null : {
      name: name,
      value: value,
      ...parseUnparsedAttributes(unparsedAttributes)
    };
  }
  __name(parseSetCookie, "parseSetCookie");
  function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    var _a;
    if (unparsedAttributes.length === 0) return cookieAttributeList;
    assert(unparsedAttributes[0] === ";"), unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    unparsedAttributes.includes(";") ? (cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, {
      position: 0
    }), unparsedAttributes = unparsedAttributes.slice(cookieAv.length)) : (cookieAv = unparsedAttributes, unparsedAttributes = "");
    let attributeName = "",
      attributeValue = "";
    if (cookieAv.includes("=")) {
      let position = {
        position: 0
      };
      attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position), attributeValue = cookieAv.slice(position.position + 1);
    } else attributeName = cookieAv;
    if (attributeName = attributeName.trim(), attributeValue = attributeValue.trim(), attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    let attributeNameLowercase = attributeName.toLowerCase();
    if (attributeNameLowercase === "expires") {
      let expiryTime = new Date(attributeValue);
      cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
      let charCode = attributeValue.charCodeAt(0);
      if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-" || !/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      let deltaSeconds = Number(attributeValue);
      cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
      let cookieDomain = attributeValue;
      cookieDomain[0] === "." && (cookieDomain = cookieDomain.slice(1)), cookieDomain = cookieDomain.toLowerCase(), cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
      let cookiePath = "";
      attributeValue.length === 0 || attributeValue[0] !== "/" ? cookiePath = "/" : cookiePath = attributeValue, cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") cookieAttributeList.secure = !0;else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = !0;else if (attributeNameLowercase === "samesite") {
      let enforcement = "Default",
        attributeValueLowercase = attributeValue.toLowerCase();
      attributeValueLowercase.includes("none") && (enforcement = "None"), attributeValueLowercase.includes("strict") && (enforcement = "Strict"), attributeValueLowercase.includes("lax") && (enforcement = "Lax"), cookieAttributeList.sameSite = enforcement;
    } else (_a = cookieAttributeList.unparsed) != null || (cookieAttributeList.unparsed = []), cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
  }
  __name(parseUnparsedAttributes, "parseUnparsedAttributes");
  module.exports = {
    parseSetCookie: parseSetCookie,
    parseUnparsedAttributes: parseUnparsedAttributes
  };
});