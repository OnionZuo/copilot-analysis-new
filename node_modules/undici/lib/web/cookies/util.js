var require_util = __commonJSMin((exports, module) => {
  "use strict";

  function isCTLExcludingHtab(value) {
    for (let i = 0; i < value.length; ++i) {
      let code = value.charCodeAt(i);
      if (code >= 0 && code <= 8 || code >= 10 && code <= 31 || code === 127) return !0;
    }
    return !1;
  }
  __name(isCTLExcludingHtab, "isCTLExcludingHtab");
  function validateCookieName(name) {
    for (let i = 0; i < name.length; ++i) {
      let code = name.charCodeAt(i);
      if (code < 33 || code > 126 || code === 34 || code === 40 || code === 41 || code === 60 || code === 62 || code === 64 || code === 44 || code === 59 || code === 58 || code === 92 || code === 47 || code === 91 || code === 93 || code === 63 || code === 61 || code === 123 || code === 125) throw new Error("Invalid cookie name");
    }
  }
  __name(validateCookieName, "validateCookieName");
  function validateCookieValue(value) {
    let len = value.length,
      i = 0;
    if (value[0] === '"') {
      if (len === 1 || value[len - 1] !== '"') throw new Error("Invalid cookie value");
      --len, ++i;
    }
    for (; i < len;) {
      let code = value.charCodeAt(i++);
      if (code < 33 || code > 126 || code === 34 || code === 44 || code === 59 || code === 92) throw new Error("Invalid cookie value");
    }
  }
  __name(validateCookieValue, "validateCookieValue");
  function validateCookiePath(path) {
    for (let i = 0; i < path.length; ++i) {
      let code = path.charCodeAt(i);
      if (code < 32 || code === 127 || code === 59) throw new Error("Invalid cookie path");
    }
  }
  __name(validateCookiePath, "validateCookiePath");
  function validateCookieDomain(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
  }
  __name(validateCookieDomain, "validateCookieDomain");
  var IMFDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    IMFMonths = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    IMFPaddedNumbers = Array(61).fill(0).map((_, i) => i.toString().padStart(2, "0"));
  function toIMFDate(date) {
    return typeof date == "number" && (date = new Date(date)), `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;
  }
  __name(toIMFDate, "toIMFDate");
  function validateCookieMaxAge(maxAge) {
    if (maxAge < 0) throw new Error("Invalid cookie max-age");
  }
  __name(validateCookieMaxAge, "validateCookieMaxAge");
  function stringify(cookie) {
    if (cookie.name.length === 0) return null;
    validateCookieName(cookie.name), validateCookieValue(cookie.value);
    let out = [`${cookie.name}=${cookie.value}`];
    cookie.name.startsWith("__Secure-") && (cookie.secure = !0), cookie.name.startsWith("__Host-") && (cookie.secure = !0, cookie.domain = null, cookie.path = "/"), cookie.secure && out.push("Secure"), cookie.httpOnly && out.push("HttpOnly"), typeof cookie.maxAge == "number" && (validateCookieMaxAge(cookie.maxAge), out.push(`Max-Age=${cookie.maxAge}`)), cookie.domain && (validateCookieDomain(cookie.domain), out.push(`Domain=${cookie.domain}`)), cookie.path && (validateCookiePath(cookie.path), out.push(`Path=${cookie.path}`)), cookie.expires && cookie.expires.toString() !== "Invalid Date" && out.push(`Expires=${toIMFDate(cookie.expires)}`), cookie.sameSite && out.push(`SameSite=${cookie.sameSite}`);
    for (let part of cookie.unparsed) {
      if (!part.includes("=")) throw new Error("Invalid unparsed");
      let [key, ...value] = part.split("=");
      out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
  }
  __name(stringify, "stringify");
  module.exports = {
    isCTLExcludingHtab: isCTLExcludingHtab,
    validateCookieName: validateCookieName,
    validateCookiePath: validateCookiePath,
    validateCookieValue: validateCookieValue,
    toIMFDate: toIMFDate,
    stringify: stringify
  };
});