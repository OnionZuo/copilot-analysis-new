var require_cookies = __commonJSMin((exports, module) => {
  "use strict";

  var {
      parseSetCookie: parseSetCookie
    } = L6e(),
    {
      stringify: stringify
    } = dse(),
    {
      webidl: webidl
    } = Gc(),
    {
      Headers: Headers
    } = Dx();
  function getCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, "getCookies"), webidl.brandCheck(headers, Headers, {
      strict: !1
    });
    let cookie = headers.get("cookie"),
      out = {};
    if (!cookie) return out;
    for (let piece of cookie.split(";")) {
      let [name, ...value] = piece.split("=");
      out[name.trim()] = value.join("=");
    }
    return out;
  }
  __name(getCookies, "getCookies");
  function deleteCookie(headers, name, attributes) {
    webidl.brandCheck(headers, Headers, {
      strict: !1
    });
    let prefix = "deleteCookie";
    webidl.argumentLengthCheck(arguments, 2, prefix), name = webidl.converters.DOMString(name, prefix, "name"), attributes = webidl.converters.DeleteCookieAttributes(attributes), setCookie(headers, {
      name: name,
      value: "",
      expires: new Date(0),
      ...attributes
    });
  }
  __name(deleteCookie, "deleteCookie");
  function getSetCookies(headers) {
    webidl.argumentLengthCheck(arguments, 1, "getSetCookies"), webidl.brandCheck(headers, Headers, {
      strict: !1
    });
    let cookies = headers.getSetCookie();
    return cookies ? cookies.map(pair => parseSetCookie(pair)) : [];
  }
  __name(getSetCookies, "getSetCookies");
  function setCookie(headers, cookie) {
    webidl.argumentLengthCheck(arguments, 2, "setCookie"), webidl.brandCheck(headers, Headers, {
      strict: !1
    }), cookie = webidl.converters.Cookie(cookie);
    let str = stringify(cookie);
    str && headers.append("Set-Cookie", str);
  }
  __name(setCookie, "setCookie");
  webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([{
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "path",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "domain",
    defaultValue: __name(() => null, "defaultValue")
  }]);
  webidl.converters.Cookie = webidl.dictionaryConverter([{
    converter: webidl.converters.DOMString,
    key: "name"
  }, {
    converter: webidl.converters.DOMString,
    key: "value"
  }, {
    converter: webidl.nullableConverter(value => typeof value == "number" ? webidl.converters["unsigned long long"](value) : new Date(value)),
    key: "expires",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters["long long"]),
    key: "maxAge",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "domain",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "path",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: "secure",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: "httpOnly",
    defaultValue: __name(() => null, "defaultValue")
  }, {
    converter: webidl.converters.USVString,
    key: "sameSite",
    allowedValues: ["Strict", "Lax", "None"]
  }, {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: "unparsed",
    defaultValue: __name(() => new Array(0), "defaultValue")
  }]);
  module.exports = {
    getCookies: getCookies,
    deleteCookie: deleteCookie,
    getSetCookies: getSetCookies,
    setCookie: setCookie
  };
});