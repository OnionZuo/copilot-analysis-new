var require_dispatcher = __commonJSMin((exports, module) => {
  "use strict";

  var EventEmitter = require("events"),
    _Dispatcher = class _Dispatcher extends EventEmitter {
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
      compose(...args) {
        let interceptors = Array.isArray(args[0]) ? args[0] : args,
          dispatch = this.dispatch.bind(this);
        for (let interceptor of interceptors) if (interceptor != null) {
          if (typeof interceptor != "function") throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);
          if (dispatch = interceptor(dispatch), dispatch == null || typeof dispatch != "function" || dispatch.length !== 2) throw new TypeError("invalid interceptor");
        }
        return new ComposedDispatcher(this, dispatch);
      }
    };
  __name(_Dispatcher, "Dispatcher");
  var Dispatcher = _Dispatcher,
    _dispatcher,
    _dispatch,
    _ComposedDispatcher = class _ComposedDispatcher extends Dispatcher {
      constructor(dispatcher, dispatch) {
        super();
        __privateAdd(this, _dispatcher, null);
        __privateAdd(this, _dispatch, null);
        __privateSet(this, _dispatcher, dispatcher), __privateSet(this, _dispatch, dispatch);
      }
      dispatch(...args) {
        __privateGet(this, _dispatch).call(this, ...args);
      }
      close(...args) {
        return __privateGet(this, _dispatcher).close(...args);
      }
      destroy(...args) {
        return __privateGet(this, _dispatcher).destroy(...args);
      }
    };
  _dispatcher = new WeakMap(), _dispatch = new WeakMap(), __name(_ComposedDispatcher, "ComposedDispatcher");
  var ComposedDispatcher = _ComposedDispatcher;
  module.exports = Dispatcher;
});