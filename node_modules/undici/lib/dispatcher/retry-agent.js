var require_retry_agent = __commonJSMin((exports, module) => {
  "use strict";

  var Dispatcher = q4(),
    RetryHandler = NM(),
    _agent,
    _options,
    _RetryAgent = class _RetryAgent extends Dispatcher {
      constructor(agent, options = {}) {
        super(options);
        __privateAdd(this, _agent, null);
        __privateAdd(this, _options, null);
        __privateSet(this, _agent, agent), __privateSet(this, _options, options);
      }
      dispatch(opts, handler) {
        let retry = new RetryHandler({
          ...opts,
          retryOptions: __privateGet(this, _options)
        }, {
          dispatch: __privateGet(this, _agent).dispatch.bind(__privateGet(this, _agent)),
          handler: handler
        });
        return __privateGet(this, _agent).dispatch(opts, retry);
      }
      close() {
        return __privateGet(this, _agent).close();
      }
      destroy() {
        return __privateGet(this, _agent).destroy();
      }
    };
  _agent = new WeakMap(), _options = new WeakMap(), __name(_RetryAgent, "RetryAgent");
  var RetryAgent = _RetryAgent;
  module.exports = RetryAgent;
});