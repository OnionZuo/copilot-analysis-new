var require_diagnostics = __commonJSMin((exports, module) => {
  "use strict";

  var diagnosticsChannel = require("diagnostics_channel"),
    util = require("util"),
    undiciDebugLog = util.debuglog("undici"),
    fetchDebuglog = util.debuglog("fetch"),
    websocketDebuglog = util.debuglog("websocket"),
    isClientSet = !1,
    channels = {
      beforeConnect: diagnosticsChannel.channel("undici:client:beforeConnect"),
      connected: diagnosticsChannel.channel("undici:client:connected"),
      connectError: diagnosticsChannel.channel("undici:client:connectError"),
      sendHeaders: diagnosticsChannel.channel("undici:client:sendHeaders"),
      create: diagnosticsChannel.channel("undici:request:create"),
      bodySent: diagnosticsChannel.channel("undici:request:bodySent"),
      headers: diagnosticsChannel.channel("undici:request:headers"),
      trailers: diagnosticsChannel.channel("undici:request:trailers"),
      error: diagnosticsChannel.channel("undici:request:error"),
      open: diagnosticsChannel.channel("undici:websocket:open"),
      close: diagnosticsChannel.channel("undici:websocket:close"),
      socketError: diagnosticsChannel.channel("undici:websocket:socket_error"),
      ping: diagnosticsChannel.channel("undici:websocket:ping"),
      pong: diagnosticsChannel.channel("undici:websocket:pong")
    };
  if (undiciDebugLog.enabled || fetchDebuglog.enabled) {
    let debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog;
    diagnosticsChannel.channel("undici:client:beforeConnect").subscribe(evt => {
      let {
        connectParams: {
          version: version,
          protocol: protocol,
          port: port,
          host: host
        }
      } = evt;
      debuglog("connecting to %s using %s%s", `${host}${port ? `:${port}` : ""}`, protocol, version);
    }), diagnosticsChannel.channel("undici:client:connected").subscribe(evt => {
      let {
        connectParams: {
          version: version,
          protocol: protocol,
          port: port,
          host: host
        }
      } = evt;
      debuglog("connected to %s using %s%s", `${host}${port ? `:${port}` : ""}`, protocol, version);
    }), diagnosticsChannel.channel("undici:client:connectError").subscribe(evt => {
      let {
        connectParams: {
          version: version,
          protocol: protocol,
          port: port,
          host: host
        },
        error: error
      } = evt;
      debuglog("connection to %s using %s%s errored - %s", `${host}${port ? `:${port}` : ""}`, protocol, version, error.message);
    }), diagnosticsChannel.channel("undici:client:sendHeaders").subscribe(evt => {
      let {
        request: {
          method: method,
          path: path,
          origin: origin
        }
      } = evt;
      debuglog("sending request to %s %s/%s", method, origin, path);
    }), diagnosticsChannel.channel("undici:request:headers").subscribe(evt => {
      let {
        request: {
          method: method,
          path: path,
          origin: origin
        },
        response: {
          statusCode: statusCode
        }
      } = evt;
      debuglog("received response to %s %s/%s - HTTP %d", method, origin, path, statusCode);
    }), diagnosticsChannel.channel("undici:request:trailers").subscribe(evt => {
      let {
        request: {
          method: method,
          path: path,
          origin: origin
        }
      } = evt;
      debuglog("trailers received from %s %s/%s", method, origin, path);
    }), diagnosticsChannel.channel("undici:request:error").subscribe(evt => {
      let {
        request: {
          method: method,
          path: path,
          origin: origin
        },
        error: error
      } = evt;
      debuglog("request to %s %s/%s errored - %s", method, origin, path, error.message);
    }), isClientSet = !0;
  }
  if (websocketDebuglog.enabled) {
    if (!isClientSet) {
      let debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog;
      diagnosticsChannel.channel("undici:client:beforeConnect").subscribe(evt => {
        let {
          connectParams: {
            version: version,
            protocol: protocol,
            port: port,
            host: host
          }
        } = evt;
        debuglog("connecting to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version);
      }), diagnosticsChannel.channel("undici:client:connected").subscribe(evt => {
        let {
          connectParams: {
            version: version,
            protocol: protocol,
            port: port,
            host: host
          }
        } = evt;
        debuglog("connected to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version);
      }), diagnosticsChannel.channel("undici:client:connectError").subscribe(evt => {
        let {
          connectParams: {
            version: version,
            protocol: protocol,
            port: port,
            host: host
          },
          error: error
        } = evt;
        debuglog("connection to %s%s using %s%s errored - %s", host, port ? `:${port}` : "", protocol, version, error.message);
      }), diagnosticsChannel.channel("undici:client:sendHeaders").subscribe(evt => {
        let {
          request: {
            method: method,
            path: path,
            origin: origin
          }
        } = evt;
        debuglog("sending request to %s %s/%s", method, origin, path);
      });
    }
    diagnosticsChannel.channel("undici:websocket:open").subscribe(evt => {
      let {
        address: {
          address: address,
          port: port
        }
      } = evt;
      websocketDebuglog("connection opened %s%s", address, port ? `:${port}` : "");
    }), diagnosticsChannel.channel("undici:websocket:close").subscribe(evt => {
      let {
        websocket: websocket,
        code: code,
        reason: reason
      } = evt;
      websocketDebuglog("closed connection to %s - %s %s", websocket.url, code, reason);
    }), diagnosticsChannel.channel("undici:websocket:socket_error").subscribe(err => {
      websocketDebuglog("connection errored - %s", err.message);
    }), diagnosticsChannel.channel("undici:websocket:ping").subscribe(evt => {
      websocketDebuglog("ping received");
    }), diagnosticsChannel.channel("undici:websocket:pong").subscribe(evt => {
      websocketDebuglog("pong received");
    });
  }
  module.exports = {
    channels: channels
  };
});