var require_errors = __commonJSMin((exports, module) => {
  "use strict";

  var _UndiciError = class _UndiciError extends Error {
    constructor(message) {
      super(message), this.name = "UndiciError", this.code = "UND_ERR";
    }
  };
  __name(_UndiciError, "UndiciError");
  var UndiciError = _UndiciError,
    _ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
      constructor(message) {
        super(message), this.name = "ConnectTimeoutError", this.message = message || "Connect Timeout Error", this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
  __name(_ConnectTimeoutError, "ConnectTimeoutError");
  var ConnectTimeoutError = _ConnectTimeoutError,
    _HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
      constructor(message) {
        super(message), this.name = "HeadersTimeoutError", this.message = message || "Headers Timeout Error", this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
  __name(_HeadersTimeoutError, "HeadersTimeoutError");
  var HeadersTimeoutError = _HeadersTimeoutError,
    _HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
      constructor(message) {
        super(message), this.name = "HeadersOverflowError", this.message = message || "Headers Overflow Error", this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
  __name(_HeadersOverflowError, "HeadersOverflowError");
  var HeadersOverflowError = _HeadersOverflowError,
    _BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
      constructor(message) {
        super(message), this.name = "BodyTimeoutError", this.message = message || "Body Timeout Error", this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
  __name(_BodyTimeoutError, "BodyTimeoutError");
  var BodyTimeoutError = _BodyTimeoutError,
    _ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
      constructor(message, statusCode, headers, body) {
        super(message), this.name = "ResponseStatusCodeError", this.message = message || "Response Status Code Error", this.code = "UND_ERR_RESPONSE_STATUS_CODE", this.body = body, this.status = statusCode, this.statusCode = statusCode, this.headers = headers;
      }
    };
  __name(_ResponseStatusCodeError, "ResponseStatusCodeError");
  var ResponseStatusCodeError = _ResponseStatusCodeError,
    _InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
      constructor(message) {
        super(message), this.name = "InvalidArgumentError", this.message = message || "Invalid Argument Error", this.code = "UND_ERR_INVALID_ARG";
      }
    };
  __name(_InvalidArgumentError, "InvalidArgumentError");
  var InvalidArgumentError = _InvalidArgumentError,
    _InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
      constructor(message) {
        super(message), this.name = "InvalidReturnValueError", this.message = message || "Invalid Return Value Error", this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
  __name(_InvalidReturnValueError, "InvalidReturnValueError");
  var InvalidReturnValueError = _InvalidReturnValueError,
    _AbortError = class _AbortError extends UndiciError {
      constructor(message) {
        super(message), this.name = "AbortError", this.message = message || "The operation was aborted";
      }
    };
  __name(_AbortError, "AbortError");
  var AbortError = _AbortError,
    _RequestAbortedError = class _RequestAbortedError extends AbortError {
      constructor(message) {
        super(message), this.name = "AbortError", this.message = message || "Request aborted", this.code = "UND_ERR_ABORTED";
      }
    };
  __name(_RequestAbortedError, "RequestAbortedError");
  var RequestAbortedError = _RequestAbortedError,
    _InformationalError = class _InformationalError extends UndiciError {
      constructor(message) {
        super(message), this.name = "InformationalError", this.message = message || "Request information", this.code = "UND_ERR_INFO";
      }
    };
  __name(_InformationalError, "InformationalError");
  var InformationalError = _InformationalError,
    _RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message), this.name = "RequestContentLengthMismatchError", this.message = message || "Request body length does not match content-length header", this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
  __name(_RequestContentLengthMismatchError, "RequestContentLengthMismatchError");
  var RequestContentLengthMismatchError = _RequestContentLengthMismatchError,
    _ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message), this.name = "ResponseContentLengthMismatchError", this.message = message || "Response body length does not match content-length header", this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
  __name(_ResponseContentLengthMismatchError, "ResponseContentLengthMismatchError");
  var ResponseContentLengthMismatchError = _ResponseContentLengthMismatchError,
    _ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
      constructor(message) {
        super(message), this.name = "ClientDestroyedError", this.message = message || "The client is destroyed", this.code = "UND_ERR_DESTROYED";
      }
    };
  __name(_ClientDestroyedError, "ClientDestroyedError");
  var ClientDestroyedError = _ClientDestroyedError,
    _ClientClosedError = class _ClientClosedError extends UndiciError {
      constructor(message) {
        super(message), this.name = "ClientClosedError", this.message = message || "The client is closed", this.code = "UND_ERR_CLOSED";
      }
    };
  __name(_ClientClosedError, "ClientClosedError");
  var ClientClosedError = _ClientClosedError,
    _SocketError = class _SocketError extends UndiciError {
      constructor(message, socket) {
        super(message), this.name = "SocketError", this.message = message || "Socket error", this.code = "UND_ERR_SOCKET", this.socket = socket;
      }
    };
  __name(_SocketError, "SocketError");
  var SocketError = _SocketError,
    _NotSupportedError = class _NotSupportedError extends UndiciError {
      constructor(message) {
        super(message), this.name = "NotSupportedError", this.message = message || "Not supported error", this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
  __name(_NotSupportedError, "NotSupportedError");
  var NotSupportedError = _NotSupportedError,
    _BalancedPoolMissingUpstreamError = class _BalancedPoolMissingUpstreamError extends UndiciError {
      constructor(message) {
        super(message), this.name = "MissingUpstreamError", this.message = message || "No upstream has been added to the BalancedPool", this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
  __name(_BalancedPoolMissingUpstreamError, "BalancedPoolMissingUpstreamError");
  var BalancedPoolMissingUpstreamError = _BalancedPoolMissingUpstreamError,
    _HTTPParserError = class _HTTPParserError extends Error {
      constructor(message, code, data) {
        super(message), this.name = "HTTPParserError", this.code = code ? `HPE_${code}` : void 0, this.data = data ? data.toString() : void 0;
      }
    };
  __name(_HTTPParserError, "HTTPParserError");
  var HTTPParserError = _HTTPParserError,
    _ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
      constructor(message) {
        super(message), this.name = "ResponseExceededMaxSizeError", this.message = message || "Response content exceeded max size", this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
  __name(_ResponseExceededMaxSizeError, "ResponseExceededMaxSizeError");
  var ResponseExceededMaxSizeError = _ResponseExceededMaxSizeError,
    _RequestRetryError = class _RequestRetryError extends UndiciError {
      constructor(message, code, {
        headers: headers,
        data: data
      }) {
        super(message), this.name = "RequestRetryError", this.message = message || "Request retry error", this.code = "UND_ERR_REQ_RETRY", this.statusCode = code, this.data = data, this.headers = headers;
      }
    };
  __name(_RequestRetryError, "RequestRetryError");
  var RequestRetryError = _RequestRetryError,
    _ResponseError = class _ResponseError extends UndiciError {
      constructor(message, code, {
        headers: headers,
        data: data
      }) {
        super(message), this.name = "ResponseError", this.message = message || "Response error", this.code = "UND_ERR_RESPONSE", this.statusCode = code, this.data = data, this.headers = headers;
      }
    };
  __name(_ResponseError, "ResponseError");
  var ResponseError = _ResponseError,
    _SecureProxyConnectionError = class _SecureProxyConnectionError extends UndiciError {
      constructor(cause, message, options) {
        super(message, {
          cause: cause,
          ...(options != null ? options : {})
        }), this.name = "SecureProxyConnectionError", this.message = message || "Secure Proxy Connection failed", this.code = "UND_ERR_PRX_TLS", this.cause = cause;
      }
    };
  __name(_SecureProxyConnectionError, "SecureProxyConnectionError");
  var SecureProxyConnectionError = _SecureProxyConnectionError;
  module.exports = {
    AbortError: AbortError,
    HTTPParserError: HTTPParserError,
    UndiciError: UndiciError,
    HeadersTimeoutError: HeadersTimeoutError,
    HeadersOverflowError: HeadersOverflowError,
    BodyTimeoutError: BodyTimeoutError,
    RequestContentLengthMismatchError: RequestContentLengthMismatchError,
    ConnectTimeoutError: ConnectTimeoutError,
    ResponseStatusCodeError: ResponseStatusCodeError,
    InvalidArgumentError: InvalidArgumentError,
    InvalidReturnValueError: InvalidReturnValueError,
    RequestAbortedError: RequestAbortedError,
    ClientDestroyedError: ClientDestroyedError,
    ClientClosedError: ClientClosedError,
    InformationalError: InformationalError,
    SocketError: SocketError,
    NotSupportedError: NotSupportedError,
    ResponseContentLengthMismatchError: ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError: ResponseExceededMaxSizeError,
    RequestRetryError: RequestRetryError,
    ResponseError: ResponseError,
    SecureProxyConnectionError: SecureProxyConnectionError
  };
});