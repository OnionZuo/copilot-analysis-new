var require_abort_signal = __commonJSMin((exports, module) => {
  var {
      addAbortListener: addAbortListener
    } = oi(),
    {
      RequestAbortedError: RequestAbortedError
    } = rr(),
    kListener = Symbol("kListener"),
    kSignal = Symbol("kSignal");
  function abort(self) {
    var _a, _b, _c;
    self.abort ? self.abort((_a = self[kSignal]) == null ? void 0 : _a.reason) : self.reason = (_c = (_b = self[kSignal]) == null ? void 0 : _b.reason) != null ? _c : new RequestAbortedError(), removeSignal(self);
  }
  __name(abort, "abort");
  function addSignal(self, signal) {
    if (self.reason = null, self[kSignal] = null, self[kListener] = null, !!signal) {
      if (signal.aborted) {
        abort(self);
        return;
      }
      self[kSignal] = signal, self[kListener] = () => {
        abort(self);
      }, addAbortListener(self[kSignal], self[kListener]);
    }
  }
  __name(addSignal, "addSignal");
  function removeSignal(self) {
    self[kSignal] && ("removeEventListener" in self[kSignal] ? self[kSignal].removeEventListener("abort", self[kListener]) : self[kSignal].removeListener("abort", self[kListener]), self[kSignal] = null, self[kListener] = null);
  }
  __name(removeSignal, "removeSignal");
  module.exports = {
    addSignal: addSignal,
    removeSignal: removeSignal
  };
});