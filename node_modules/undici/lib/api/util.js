var require_util = __commonJSMin((exports, module) => {
  var assert = require("assert"),
    {
      ResponseStatusCodeError: ResponseStatusCodeError
    } = rr(),
    {
      chunksDecode: chunksDecode
    } = Ure(),
    CHUNK_LIMIT = 128 * 1024;
  async function getResolveErrorBodyCallback({
    callback: callback,
    body: body,
    contentType: contentType,
    statusCode: statusCode,
    statusMessage: statusMessage,
    headers: headers
  }) {
    assert(body);
    let chunks = [],
      length = 0;
    try {
      for await (let chunk of body) if (chunks.push(chunk), length += chunk.length, length > CHUNK_LIMIT) {
        chunks = [], length = 0;
        break;
      }
    } catch {
      chunks = [], length = 0;
    }
    let message = `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`;
    if (statusCode === 204 || !contentType || !length) {
      queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers)));
      return;
    }
    let stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    let payload;
    try {
      isContentTypeApplicationJson(contentType) ? payload = JSON.parse(chunksDecode(chunks, length)) : isContentTypeText(contentType) && (payload = chunksDecode(chunks, length));
    } catch {} finally {
      Error.stackTraceLimit = stackTraceLimit;
    }
    queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers, payload)));
  }
  __name(getResolveErrorBodyCallback, "getResolveErrorBodyCallback");
  var isContentTypeApplicationJson = __name(contentType => contentType.length > 15 && contentType[11] === "/" && contentType[0] === "a" && contentType[1] === "p" && contentType[2] === "p" && contentType[3] === "l" && contentType[4] === "i" && contentType[5] === "c" && contentType[6] === "a" && contentType[7] === "t" && contentType[8] === "i" && contentType[9] === "o" && contentType[10] === "n" && contentType[12] === "j" && contentType[13] === "s" && contentType[14] === "o" && contentType[15] === "n", "isContentTypeApplicationJson"),
    isContentTypeText = __name(contentType => contentType.length > 4 && contentType[4] === "/" && contentType[0] === "t" && contentType[1] === "e" && contentType[2] === "x" && contentType[3] === "t", "isContentTypeText");
  module.exports = {
    getResolveErrorBodyCallback: getResolveErrorBodyCallback,
    isContentTypeApplicationJson: isContentTypeApplicationJson,
    isContentTypeText: isContentTypeText
  };
});