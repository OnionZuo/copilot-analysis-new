var require_mock_client = __commonJSMin((exports, module) => {
  "use strict";

  var {
      promisify: promisify
    } = require("util"),
    Client = l9(),
    {
      buildMockDispatch: buildMockDispatch
    } = _9(),
    {
      kDispatches: kDispatches,
      kMockAgent: kMockAgent,
      kClose: kClose,
      kOriginalClose: kOriginalClose,
      kOrigin: kOrigin,
      kOriginalDispatch: kOriginalDispatch,
      kConnected: kConnected
    } = mI(),
    {
      MockInterceptor: MockInterceptor
    } = Coe(),
    Symbols = fo(),
    {
      InvalidArgumentError: InvalidArgumentError
    } = rr(),
    _MockClient = class _MockClient extends Client {
      constructor(origin, opts) {
        if (super(origin, opts), !opts || !opts.agent || typeof opts.agent.dispatch != "function") throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        this[kMockAgent] = opts.agent, this[kOrigin] = origin, this[kDispatches] = [], this[kConnected] = 1, this[kOriginalDispatch] = this.dispatch, this[kOriginalClose] = this.close.bind(this), this.dispatch = buildMockDispatch.call(this), this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])(), this[kConnected] = 0, this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
  __name(_MockClient, "MockClient");
  var MockClient = _MockClient;
  module.exports = MockClient;
});