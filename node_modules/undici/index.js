var require_undici = __commonJSMin((exports, module) => {
  "use strict";

  var Client = l9(),
    Dispatcher = q4(),
    Pool = nI(),
    BalancedPool = ZTe(),
    Agent = aI(),
    ProxyAgent = Qre(),
    EnvHttpProxyAgent = pNe(),
    RetryAgent = yNe(),
    errors = rr(),
    util = oi(),
    {
      InvalidArgumentError: InvalidArgumentError
    } = errors,
    api = rRe(),
    buildConnector = U4(),
    MockClient = Eoe(),
    MockAgent = $Re(),
    MockPool = Qoe(),
    mockErrors = loe(),
    RetryHandler = NM(),
    {
      getGlobalDispatcher: getGlobalDispatcher,
      setGlobalDispatcher: setGlobalDispatcher
    } = GM(),
    DecoratorHandler = ZM(),
    RedirectHandler = CM(),
    createRedirectInterceptor = _M();
  Object.assign(Dispatcher.prototype, api);
  module.exports.Dispatcher = Dispatcher;
  module.exports.Client = Client;
  module.exports.Pool = Pool;
  module.exports.BalancedPool = BalancedPool;
  module.exports.Agent = Agent;
  module.exports.ProxyAgent = ProxyAgent;
  module.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;
  module.exports.RetryAgent = RetryAgent;
  module.exports.RetryHandler = RetryHandler;
  module.exports.DecoratorHandler = DecoratorHandler;
  module.exports.RedirectHandler = RedirectHandler;
  module.exports.createRedirectInterceptor = createRedirectInterceptor;
  module.exports.interceptors = {
    redirect: HRe(),
    retry: YRe(),
    dump: VRe(),
    dns: aLe()
  };
  module.exports.buildConnector = buildConnector;
  module.exports.errors = errors;
  module.exports.util = {
    parseHeaders: util.parseHeaders,
    headerNameToString: util.headerNameToString
  };
  function makeDispatcher(fn) {
    return (url, opts, handler) => {
      if (typeof opts == "function" && (handler = opts, opts = null), !url || typeof url != "string" && typeof url != "object" && !(url instanceof URL)) throw new InvalidArgumentError("invalid url");
      if (opts != null && typeof opts != "object") throw new InvalidArgumentError("invalid opts");
      if (opts && opts.path != null) {
        if (typeof opts.path != "string") throw new InvalidArgumentError("invalid opts.path");
        let path = opts.path;
        opts.path.startsWith("/") || (path = `/${path}`), url = new URL(util.parseOrigin(url).origin + path);
      } else opts || (opts = typeof url == "object" ? url : {}), url = util.parseURL(url);
      let {
        agent: agent,
        dispatcher = getGlobalDispatcher()
      } = opts;
      if (agent) throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
      return fn.call(dispatcher, {
        ...opts,
        origin: url.origin,
        path: url.search ? `${url.pathname}${url.search}` : url.pathname,
        method: opts.method || (opts.body ? "PUT" : "GET")
      }, handler);
    };
  }
  __name(makeDispatcher, "makeDispatcher");
  module.exports.setGlobalDispatcher = setGlobalDispatcher;
  module.exports.getGlobalDispatcher = getGlobalDispatcher;
  var fetchImpl = I9().fetch;
  module.exports.fetch = __name(async function (init, options = void 0) {
    try {
      return await fetchImpl(init, options);
    } catch (err) {
      throw err && typeof err == "object" && Error.captureStackTrace(err), err;
    }
  }, "fetch");
  module.exports.Headers = Dx().Headers;
  module.exports.Response = B9().Response;
  module.exports.Request = vI().Request;
  module.exports.FormData = K4().FormData;
  var _a;
  module.exports.File = (_a = globalThis.File) != null ? _a : require("buffer").File;
  module.exports.FileReader = h6e().FileReader;
  var {
    setGlobalOrigin: setGlobalOrigin,
    getGlobalOrigin: getGlobalOrigin
  } = gie();
  module.exports.setGlobalOrigin = setGlobalOrigin;
  module.exports.getGlobalOrigin = getGlobalOrigin;
  var {
      CacheStorage: CacheStorage
    } = v6e(),
    {
      kConstruct: kConstruct
    } = f7();
  module.exports.caches = new CacheStorage(kConstruct);
  var {
    deleteCookie: deleteCookie,
    getCookies: getCookies,
    getSetCookies: getSetCookies,
    setCookie: setCookie
  } = z6e();
  module.exports.deleteCookie = deleteCookie;
  module.exports.getCookies = getCookies;
  module.exports.getSetCookies = getSetCookies;
  module.exports.setCookie = setCookie;
  var {
    parseMIMEType: parseMIMEType,
    serializeAMimeType: serializeAMimeType
  } = zA();
  module.exports.parseMIMEType = parseMIMEType;
  module.exports.serializeAMimeType = serializeAMimeType;
  var {
    CloseEvent: CloseEvent,
    ErrorEvent: ErrorEvent,
    MessageEvent: MessageEvent
  } = LI();
  module.exports.WebSocket = RPe().WebSocket;
  module.exports.CloseEvent = CloseEvent;
  module.exports.ErrorEvent = ErrorEvent;
  module.exports.MessageEvent = MessageEvent;
  module.exports.request = makeDispatcher(api.request);
  module.exports.stream = makeDispatcher(api.stream);
  module.exports.pipeline = makeDispatcher(api.pipeline);
  module.exports.connect = makeDispatcher(api.connect);
  module.exports.upgrade = makeDispatcher(api.upgrade);
  module.exports.MockClient = MockClient;
  module.exports.MockPool = MockPool;
  module.exports.MockAgent = MockAgent;
  module.exports.mockErrors = mockErrors;
  var {
    EventSource: EventSource
  } = WPe();
  module.exports.EventSource = EventSource;
});