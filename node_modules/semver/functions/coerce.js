var require_coerce = __commonJSMin((exports, module) => {
  var SemVer = Fl(),
    parse = tC(),
    {
      safeRe: re,
      t: t
    } = UQ(),
    coerce = __name((version, options) => {
      if (version instanceof SemVer) return version;
      if (typeof version == "number" && (version = String(version)), typeof version != "string") return null;
      options = options || {};
      let match = null;
      if (!options.rtl) match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);else {
        let coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL],
          next;
        for (; (next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length);) (!match || next.index + next[0].length !== match.index + match[0].length) && (match = next), coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) return null;
      let major = match[2],
        minor = match[3] || "0",
        patch = match[4] || "0",
        prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "",
        build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    }, "coerce");
  module.exports = coerce;
});