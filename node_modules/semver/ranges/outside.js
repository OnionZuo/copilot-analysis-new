var require_outside = __commonJSMin((exports, module) => {
  var SemVer = Fl(),
    Comparator = u8(),
    {
      ANY: ANY
    } = Comparator,
    Range = Bp(),
    satisfies = ZQ(),
    gt = c8(),
    lt = oj(),
    lte = sj(),
    gte = rj(),
    outside = __name((version, range, hilo, options) => {
      version = new SemVer(version, options), range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
          break;
        case "<":
          gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) return !1;
      for (let i = 0; i < range.set.length; ++i) {
        let comparators = range.set[i],
          high = null,
          low = null;
        if (comparators.forEach(comparator => {
          comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
        }), high.operator === comp || high.operator === ecomp || (!low.operator || low.operator === comp) && ltefn(version, low.semver)) return !1;
        if (low.operator === ecomp && ltfn(version, low.semver)) return !1;
      }
      return !0;
    }, "outside");
  module.exports = outside;
});