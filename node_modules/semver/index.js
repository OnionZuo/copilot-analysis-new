var require_semver = __commonJSMin((exports, module) => {
  var internalRe = UQ(),
    constants = s8(),
    SemVer = Fl(),
    identifiers = dhe(),
    parse = tC(),
    valid = AXe(),
    clean = mXe(),
    inc = gXe(),
    diff = bXe(),
    major = wXe(),
    minor = _Xe(),
    patch = kXe(),
    prerelease = BXe(),
    compare = Ep(),
    rcompare = IXe(),
    compareLoose = DXe(),
    compareBuild = AU(),
    sort = NXe(),
    rsort = LXe(),
    gt = c8(),
    lt = oj(),
    eq = bhe(),
    neq = yhe(),
    gte = rj(),
    lte = sj(),
    cmp = whe(),
    coerce = MXe(),
    Comparator = u8(),
    Range = Bp(),
    satisfies = ZQ(),
    toComparators = $Xe(),
    maxSatisfying = jXe(),
    minSatisfying = OXe(),
    minVersion = HXe(),
    validRange = YXe(),
    outside = pU(),
    gtr = tet(),
    ltr = aet(),
    intersects = oet(),
    simplifyRange = cet(),
    subset = get();
  module.exports = {
    parse: parse,
    valid: valid,
    clean: clean,
    inc: inc,
    diff: diff,
    major: major,
    minor: minor,
    patch: patch,
    prerelease: prerelease,
    compare: compare,
    rcompare: rcompare,
    compareLoose: compareLoose,
    compareBuild: compareBuild,
    sort: sort,
    rsort: rsort,
    gt: gt,
    lt: lt,
    eq: eq,
    neq: neq,
    gte: gte,
    lte: lte,
    cmp: cmp,
    coerce: coerce,
    Comparator: Comparator,
    Range: Range,
    satisfies: satisfies,
    toComparators: toComparators,
    maxSatisfying: maxSatisfying,
    minSatisfying: minSatisfying,
    minVersion: minVersion,
    validRange: validRange,
    outside: outside,
    gtr: gtr,
    ltr: ltr,
    intersects: intersects,
    simplifyRange: simplifyRange,
    subset: subset,
    SemVer: SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  };
});