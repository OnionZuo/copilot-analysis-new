var require_bindings = __commonJSMin((exports, module) => {
  var fs = require("fs"),
    path = require("path"),
    join = path.join,
    dirname = path.dirname,
    exists = fs.accessSync && function (path) {
      try {
        fs.accessSync(path);
      } catch {
        return !1;
      }
      return !0;
    } || fs.existsSync || path.existsSync,
    defaults = {
      arrow: process.env.NODE_BINDINGS_ARROW || " \u2192 ",
      compiled: process.env.NODE_BINDINGS_COMPILED_DIR || "compiled",
      platform: process.platform,
      arch: process.arch,
      nodePreGyp: "node-v" + process.versions.modules + "-" + process.platform + "-" + process.arch,
      version: process.versions.node,
      bindings: "bindings.node",
      try: [["module_root", "build", "bindings"], ["module_root", "build", "Debug", "bindings"], ["module_root", "build", "Release", "bindings"], ["module_root", "out", "Debug", "bindings"], ["module_root", "Debug", "bindings"], ["module_root", "out", "Release", "bindings"], ["module_root", "Release", "bindings"], ["module_root", "build", "default", "bindings"], ["module_root", "compiled", "version", "platform", "arch", "bindings"], ["module_root", "compiled", "platform", "arch", "bindings"]]
    };
  function bindings(opts) {
    typeof opts == "string" ? opts = {
      bindings: opts
    } : opts || (opts = {}), Object.keys(defaults).map(function (i) {
      i in opts || (opts[i] = defaults[i]);
    }), opts.module_root || (opts.module_root = getRoot(__filename)), path.extname(opts.bindings) != ".node" && (opts.bindings += ".node");
    for (var requireFunc = typeof __webpack_require__ == "function" ? __non_webpack_require__ : require, tries = [], i = 0, l = opts.try.length, n, b, err; i < l; i++) {
      n = join.apply(null, opts.try[i].map(function (p) {
        return opts[p] || p;
      })), tries.push(n);
      try {
        return b = opts.path ? requireFunc.resolve(n) : requireFunc(n), opts.path || (b.path = n), b;
      } catch (e) {
        if (e.code !== "MODULE_NOT_FOUND" && e.code !== "QUALIFIED_PATH_RESOLUTION_FAILED" && !/not find/i.test(e.message)) throw e;
      }
    }
    throw err = new Error(`Could not locate the bindings file. Tried:
` + tries.map(function (a) {
      return opts.arrow + a;
    }).join(`
`)), err.tries = tries, err;
  }
  __name(bindings, "bindings");
  module.exports = bindings;
  function getRoot(file) {
    for (var dir = dirname(file), prev;;) {
      if (dir === "." && (dir = process.cwd()), exists(join(dir, "dist"))) return join(dir, "dist");
      if (exists(join(dir, "compiled"))) return dir;
      if (prev === dir) throw new Error('Could not find module root given file: "' + file + '". Do you have a `dist` or `compiled` directory? ');
      prev = dir, dir = join(dir, "..");
    }
  }
  __name(getRoot, "getRoot");
});