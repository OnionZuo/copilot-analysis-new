var require_lru = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.LRUCache = void 0;
  var _LRUCache = class _LRUCache {
    constructor(size) {
      this.size = size, this.nodes = new Map();
    }
    get(key) {
      let node = this.nodes.get(key);
      if (node) return this.moveToHead(node), node.value;
    }
    set(key, value) {
      let node = this.nodes.get(key);
      if (node) node.value = value, this.moveToHead(node);else {
        let newNode = new Node(key, value);
        this.nodes.set(key, newNode), this.addNode(newNode), this.nodes.size > this.size && (this.nodes.delete(this.tail.key), this.removeNode(this.tail));
      }
    }
    moveToHead(node) {
      this.removeNode(node), node.next = void 0, node.prev = void 0, this.addNode(node);
    }
    addNode(node) {
      this.head && (this.head.prev = node, node.next = this.head), this.tail || (this.tail = node), this.head = node;
    }
    removeNode(node) {
      node.prev ? node.prev.next = node.next : this.head = node.next, node.next ? node.next.prev = node.prev : this.tail = node.prev;
    }
  };
  __name(_LRUCache, "LRUCache");
  var LRUCache = _LRUCache;
  exports.LRUCache = LRUCache;
  var _Node = class _Node {
    constructor(key, value) {
      this.key = key, this.value = value;
    }
  };
  __name(_Node, "Node");
  var Node = _Node;
});