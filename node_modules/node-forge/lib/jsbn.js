var require_jsbn = __commonJSMin((exports, module) => {
  var forge = Ja();
  module.exports = forge.jsbn = forge.jsbn || {};
  var dbits,
    canary = 0xdeadbeefcafe,
    j_lm = (canary & 16777215) == 15715070;
  function BigInteger(a, b, c) {
    this.data = [], a != null && (typeof a == "number" ? this.fromNumber(a, b, c) : b == null && typeof a != "string" ? this.fromString(a, 256) : this.fromString(a, b));
  }
  __name(BigInteger, "BigInteger");
  forge.jsbn.BigInteger = BigInteger;
  function nbi() {
    return new BigInteger(null);
  }
  __name(nbi, "nbi");
  function am1(i, x, w, j, c, n) {
    for (; --n >= 0;) {
      var v = x * this.data[i++] + w.data[j] + c;
      c = Math.floor(v / 67108864), w.data[j++] = v & 67108863;
    }
    return c;
  }
  __name(am1, "am1");
  function am2(i, x, w, j, c, n) {
    for (var xl = x & 32767, xh = x >> 15; --n >= 0;) {
      var l = this.data[i] & 32767,
        h = this.data[i++] >> 15,
        m = xh * l + h * xl;
      l = xl * l + ((m & 32767) << 15) + w.data[j] + (c & 1073741823), c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30), w.data[j++] = l & 1073741823;
    }
    return c;
  }
  __name(am2, "am2");
  function am3(i, x, w, j, c, n) {
    for (var xl = x & 16383, xh = x >> 14; --n >= 0;) {
      var l = this.data[i] & 16383,
        h = this.data[i++] >> 14,
        m = xh * l + h * xl;
      l = xl * l + ((m & 16383) << 14) + w.data[j] + c, c = (l >> 28) + (m >> 14) + xh * h, w.data[j++] = l & 268435455;
    }
    return c;
  }
  __name(am3, "am3");
  typeof navigator > "u" ? (BigInteger.prototype.am = am3, dbits = 28) : j_lm && navigator.appName == "Microsoft Internet Explorer" ? (BigInteger.prototype.am = am2, dbits = 30) : j_lm && navigator.appName != "Netscape" ? (BigInteger.prototype.am = am1, dbits = 26) : (BigInteger.prototype.am = am3, dbits = 28);
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = (1 << dbits) - 1;
  BigInteger.prototype.DV = 1 << dbits;
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP);
  BigInteger.prototype.F1 = BI_FP - dbits;
  BigInteger.prototype.F2 = 2 * dbits - BI_FP;
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz",
    BI_RC = new Array(),
    rr,
    vv;
  rr = 48;
  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = 97;
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = 65;
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) {
    return BI_RM.charAt(n);
  }
  __name(int2char, "int2char");
  function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
  }
  __name(intAt, "intAt");
  function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i) r.data[i] = this.data[i];
    r.t = this.t, r.s = this.s;
  }
  __name(bnpCopyTo, "bnpCopyTo");
  function bnpFromInt(x) {
    this.t = 1, this.s = x < 0 ? -1 : 0, x > 0 ? this.data[0] = x : x < -1 ? this.data[0] = x + this.DV : this.t = 0;
  }
  __name(bnpFromInt, "bnpFromInt");
  function nbv(i) {
    var r = nbi();
    return r.fromInt(i), r;
  }
  __name(nbv, "nbv");
  function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
      this.fromRadix(s, b);
      return;
    }
    this.t = 0, this.s = 0;
    for (var i = s.length, mi = !1, sh = 0; --i >= 0;) {
      var x = k == 8 ? s[i] & 255 : intAt(s, i);
      if (x < 0) {
        s.charAt(i) == "-" && (mi = !0);
        continue;
      }
      mi = !1, sh == 0 ? this.data[this.t++] = x : sh + k > this.DB ? (this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh, this.data[this.t++] = x >> this.DB - sh) : this.data[this.t - 1] |= x << sh, sh += k, sh >= this.DB && (sh -= this.DB);
    }
    k == 8 && (s[0] & 128) != 0 && (this.s = -1, sh > 0 && (this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh)), this.clamp(), mi && BigInteger.ZERO.subTo(this, this);
  }
  __name(bnpFromString, "bnpFromString");
  function bnpClamp() {
    for (var c = this.s & this.DM; this.t > 0 && this.data[this.t - 1] == c;) --this.t;
  }
  __name(bnpClamp, "bnpClamp");
  function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
    var km = (1 << k) - 1,
      d,
      m = !1,
      r = "",
      i = this.t,
      p = this.DB - i * this.DB % k;
    if (i-- > 0) for (p < this.DB && (d = this.data[i] >> p) > 0 && (m = !0, r = int2char(d)); i >= 0;) p < k ? (d = (this.data[i] & (1 << p) - 1) << k - p, d |= this.data[--i] >> (p += this.DB - k)) : (d = this.data[i] >> (p -= k) & km, p <= 0 && (p += this.DB, --i)), d > 0 && (m = !0), m && (r += int2char(d));
    return m ? r : "0";
  }
  __name(bnToString, "bnToString");
  function bnNegate() {
    var r = nbi();
    return BigInteger.ZERO.subTo(this, r), r;
  }
  __name(bnNegate, "bnNegate");
  function bnAbs() {
    return this.s < 0 ? this.negate() : this;
  }
  __name(bnAbs, "bnAbs");
  function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    if (r = i - a.t, r != 0) return this.s < 0 ? -r : r;
    for (; --i >= 0;) if ((r = this.data[i] - a.data[i]) != 0) return r;
    return 0;
  }
  __name(bnCompareTo, "bnCompareTo");
  function nbits(x) {
    var r = 1,
      t;
    return (t = x >>> 16) != 0 && (x = t, r += 16), (t = x >> 8) != 0 && (x = t, r += 8), (t = x >> 4) != 0 && (x = t, r += 4), (t = x >> 2) != 0 && (x = t, r += 2), (t = x >> 1) != 0 && (x = t, r += 1), r;
  }
  __name(nbits, "nbits");
  function bnBitLength() {
    return this.t <= 0 ? 0 : this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);
  }
  __name(bnBitLength, "bnBitLength");
  function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i) r.data[i + n] = this.data[i];
    for (i = n - 1; i >= 0; --i) r.data[i] = 0;
    r.t = this.t + n, r.s = this.s;
  }
  __name(bnpDLShiftTo, "bnpDLShiftTo");
  function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i) r.data[i - n] = this.data[i];
    r.t = Math.max(this.t - n, 0), r.s = this.s;
  }
  __name(bnpDRShiftTo, "bnpDRShiftTo");
  function bnpLShiftTo(n, r) {
    var bs = n % this.DB,
      cbs = this.DB - bs,
      bm = (1 << cbs) - 1,
      ds = Math.floor(n / this.DB),
      c = this.s << bs & this.DM,
      i;
    for (i = this.t - 1; i >= 0; --i) r.data[i + ds + 1] = this.data[i] >> cbs | c, c = (this.data[i] & bm) << bs;
    for (i = ds - 1; i >= 0; --i) r.data[i] = 0;
    r.data[ds] = c, r.t = this.t + ds + 1, r.s = this.s, r.clamp();
  }
  __name(bnpLShiftTo, "bnpLShiftTo");
  function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
      r.t = 0;
      return;
    }
    var bs = n % this.DB,
      cbs = this.DB - bs,
      bm = (1 << bs) - 1;
    r.data[0] = this.data[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) r.data[i - ds - 1] |= (this.data[i] & bm) << cbs, r.data[i - ds] = this.data[i] >> bs;
    bs > 0 && (r.data[this.t - ds - 1] |= (this.s & bm) << cbs), r.t = this.t - ds, r.clamp();
  }
  __name(bnpRShiftTo, "bnpRShiftTo");
  function bnpSubTo(a, r) {
    for (var i = 0, c = 0, m = Math.min(a.t, this.t); i < m;) c += this.data[i] - a.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
    if (a.t < this.t) {
      for (c -= a.s; i < this.t;) c += this.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
      c += this.s;
    } else {
      for (c += this.s; i < a.t;) c -= a.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
      c -= a.s;
    }
    r.s = c < 0 ? -1 : 0, c < -1 ? r.data[i++] = this.DV + c : c > 0 && (r.data[i++] = c), r.t = i, r.clamp();
  }
  __name(bnpSubTo, "bnpSubTo");
  function bnpMultiplyTo(a, r) {
    var x = this.abs(),
      y = a.abs(),
      i = x.t;
    for (r.t = i + y.t; --i >= 0;) r.data[i] = 0;
    for (i = 0; i < y.t; ++i) r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);
    r.s = 0, r.clamp(), this.s != a.s && BigInteger.ZERO.subTo(r, r);
  }
  __name(bnpMultiplyTo, "bnpMultiplyTo");
  function bnpSquareTo(r) {
    for (var x = this.abs(), i = r.t = 2 * x.t; --i >= 0;) r.data[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
      var c = x.am(i, x.data[i], r, 2 * i, 0, 1);
      (r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV && (r.data[i + x.t] -= x.DV, r.data[i + x.t + 1] = 1);
    }
    r.t > 0 && (r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1)), r.s = 0, r.clamp();
  }
  __name(bnpSquareTo, "bnpSquareTo");
  function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (!(pm.t <= 0)) {
      var pt = this.abs();
      if (pt.t < pm.t) {
        q != null && q.fromInt(0), r != null && this.copyTo(r);
        return;
      }
      r == null && (r = nbi());
      var y = nbi(),
        ts = this.s,
        ms = m.s,
        nsh = this.DB - nbits(pm.data[pm.t - 1]);
      nsh > 0 ? (pm.lShiftTo(nsh, y), pt.lShiftTo(nsh, r)) : (pm.copyTo(y), pt.copyTo(r));
      var ys = y.t,
        y0 = y.data[ys - 1];
      if (y0 != 0) {
        var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0),
          d1 = this.FV / yt,
          d2 = (1 << this.F1) / yt,
          e = 1 << this.F2,
          i = r.t,
          j = i - ys,
          t = q == null ? nbi() : q;
        for (y.dlShiftTo(j, t), r.compareTo(t) >= 0 && (r.data[r.t++] = 1, r.subTo(t, r)), BigInteger.ONE.dlShiftTo(ys, t), t.subTo(y, y); y.t < ys;) y.data[y.t++] = 0;
        for (; --j >= 0;) {
          var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);
          if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) for (y.dlShiftTo(j, t), r.subTo(t, r); r.data[i] < --qd;) r.subTo(t, r);
        }
        q != null && (r.drShiftTo(ys, q), ts != ms && BigInteger.ZERO.subTo(q, q)), r.t = ys, r.clamp(), nsh > 0 && r.rShiftTo(nsh, r), ts < 0 && BigInteger.ZERO.subTo(r, r);
      }
    }
  }
  __name(bnpDivRemTo, "bnpDivRemTo");
  function bnMod(a) {
    var r = nbi();
    return this.abs().divRemTo(a, null, r), this.s < 0 && r.compareTo(BigInteger.ZERO) > 0 && a.subTo(r, r), r;
  }
  __name(bnMod, "bnMod");
  function Classic(m) {
    this.m = m;
  }
  __name(Classic, "Classic");
  function cConvert(x) {
    return x.s < 0 || x.compareTo(this.m) >= 0 ? x.mod(this.m) : x;
  }
  __name(cConvert, "cConvert");
  function cRevert(x) {
    return x;
  }
  __name(cRevert, "cRevert");
  function cReduce(x) {
    x.divRemTo(this.m, null, x);
  }
  __name(cReduce, "cReduce");
  function cMulTo(x, y, r) {
    x.multiplyTo(y, r), this.reduce(r);
  }
  __name(cMulTo, "cMulTo");
  function cSqrTo(x, r) {
    x.squareTo(r), this.reduce(r);
  }
  __name(cSqrTo, "cSqrTo");
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this.data[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3;
    return y = y * (2 - (x & 15) * y) & 15, y = y * (2 - (x & 255) * y) & 255, y = y * (2 - ((x & 65535) * y & 65535)) & 65535, y = y * (2 - x * y % this.DV) % this.DV, y > 0 ? this.DV - y : -y;
  }
  __name(bnpInvDigit, "bnpInvDigit");
  function Montgomery(m) {
    this.m = m, this.mp = m.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << m.DB - 15) - 1, this.mt2 = 2 * m.t;
  }
  __name(Montgomery, "Montgomery");
  function montConvert(x) {
    var r = nbi();
    return x.abs().dlShiftTo(this.m.t, r), r.divRemTo(this.m, null, r), x.s < 0 && r.compareTo(BigInteger.ZERO) > 0 && this.m.subTo(r, r), r;
  }
  __name(montConvert, "montConvert");
  function montRevert(x) {
    var r = nbi();
    return x.copyTo(r), this.reduce(r), r;
  }
  __name(montRevert, "montRevert");
  function montReduce(x) {
    for (; x.t <= this.mt2;) x.data[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
      var j = x.data[i] & 32767,
        u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
      for (j = i + this.m.t, x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t); x.data[j] >= x.DV;) x.data[j] -= x.DV, x.data[++j]++;
    }
    x.clamp(), x.drShiftTo(this.m.t, x), x.compareTo(this.m) >= 0 && x.subTo(this.m, x);
  }
  __name(montReduce, "montReduce");
  function montSqrTo(x, r) {
    x.squareTo(r), this.reduce(r);
  }
  __name(montSqrTo, "montSqrTo");
  function montMulTo(x, y, r) {
    x.multiplyTo(y, r), this.reduce(r);
  }
  __name(montMulTo, "montMulTo");
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  function bnpIsEven() {
    return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
  }
  __name(bnpIsEven, "bnpIsEven");
  function bnpExp(e, z) {
    if (e > 4294967295 || e < 1) return BigInteger.ONE;
    var r = nbi(),
      r2 = nbi(),
      g = z.convert(this),
      i = nbits(e) - 1;
    for (g.copyTo(r); --i >= 0;) if (z.sqrTo(r, r2), (e & 1 << i) > 0) z.mulTo(r2, g, r);else {
      var t = r;
      r = r2, r2 = t;
    }
    return z.revert(r);
  }
  __name(bnpExp, "bnpExp");
  function bnModPowInt(e, m) {
    var z;
    return e < 256 || m.isEven() ? z = new Classic(m) : z = new Montgomery(m), this.exp(e, z);
  }
  __name(bnModPowInt, "bnModPowInt");
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  function bnClone() {
    var r = nbi();
    return this.copyTo(r), r;
  }
  __name(bnClone, "bnClone");
  function bnIntValue() {
    if (this.s < 0) {
      if (this.t == 1) return this.data[0] - this.DV;
      if (this.t == 0) return -1;
    } else {
      if (this.t == 1) return this.data[0];
      if (this.t == 0) return 0;
    }
    return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];
  }
  __name(bnIntValue, "bnIntValue");
  function bnByteValue() {
    return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
  }
  __name(bnByteValue, "bnByteValue");
  function bnShortValue() {
    return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
  }
  __name(bnShortValue, "bnShortValue");
  function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
  }
  __name(bnpChunkSize, "bnpChunkSize");
  function bnSigNum() {
    return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this.data[0] <= 0 ? 0 : 1;
  }
  __name(bnSigNum, "bnSigNum");
  function bnpToRadix(b) {
    if (b == null && (b = 10), this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b),
      a = Math.pow(b, cs),
      d = nbv(a),
      y = nbi(),
      z = nbi(),
      r = "";
    for (this.divRemTo(d, y, z); y.signum() > 0;) r = (a + z.intValue()).toString(b).substr(1) + r, y.divRemTo(d, y, z);
    return z.intValue().toString(b) + r;
  }
  __name(bnpToRadix, "bnpToRadix");
  function bnpFromRadix(s, b) {
    this.fromInt(0), b == null && (b = 10);
    for (var cs = this.chunkSize(b), d = Math.pow(b, cs), mi = !1, j = 0, w = 0, i = 0; i < s.length; ++i) {
      var x = intAt(s, i);
      if (x < 0) {
        s.charAt(i) == "-" && this.signum() == 0 && (mi = !0);
        continue;
      }
      w = b * w + x, ++j >= cs && (this.dMultiply(d), this.dAddOffset(w, 0), j = 0, w = 0);
    }
    j > 0 && (this.dMultiply(Math.pow(b, j)), this.dAddOffset(w, 0)), mi && BigInteger.ZERO.subTo(this, this);
  }
  __name(bnpFromRadix, "bnpFromRadix");
  function bnpFromNumber(a, b, c) {
    if (typeof b == "number") {
      if (a < 2) this.fromInt(1);else for (this.fromNumber(a, c), this.testBit(a - 1) || this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(b);) this.dAddOffset(2, 0), this.bitLength() > a && this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
    } else {
      var x = new Array(),
        t = a & 7;
      x.length = (a >> 3) + 1, b.nextBytes(x), t > 0 ? x[0] &= (1 << t) - 1 : x[0] = 0, this.fromString(x, 256);
    }
  }
  __name(bnpFromNumber, "bnpFromNumber");
  function bnToByteArray() {
    var i = this.t,
      r = new Array();
    r[0] = this.s;
    var p = this.DB - i * this.DB % 8,
      d,
      k = 0;
    if (i-- > 0) for (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p && (r[k++] = d | this.s << this.DB - p); i >= 0;) p < 8 ? (d = (this.data[i] & (1 << p) - 1) << 8 - p, d |= this.data[--i] >> (p += this.DB - 8)) : (d = this.data[i] >> (p -= 8) & 255, p <= 0 && (p += this.DB, --i)), (d & 128) != 0 && (d |= -256), k == 0 && (this.s & 128) != (d & 128) && ++k, (k > 0 || d != this.s) && (r[k++] = d);
    return r;
  }
  __name(bnToByteArray, "bnToByteArray");
  function bnEquals(a) {
    return this.compareTo(a) == 0;
  }
  __name(bnEquals, "bnEquals");
  function bnMin(a) {
    return this.compareTo(a) < 0 ? this : a;
  }
  __name(bnMin, "bnMin");
  function bnMax(a) {
    return this.compareTo(a) > 0 ? this : a;
  }
  __name(bnMax, "bnMax");
  function bnpBitwiseTo(a, op, r) {
    var i,
      f,
      m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i) r.data[i] = op(this.data[i], a.data[i]);
    if (a.t < this.t) {
      for (f = a.s & this.DM, i = m; i < this.t; ++i) r.data[i] = op(this.data[i], f);
      r.t = this.t;
    } else {
      for (f = this.s & this.DM, i = m; i < a.t; ++i) r.data[i] = op(f, a.data[i]);
      r.t = a.t;
    }
    r.s = op(this.s, a.s), r.clamp();
  }
  __name(bnpBitwiseTo, "bnpBitwiseTo");
  function op_and(x, y) {
    return x & y;
  }
  __name(op_and, "op_and");
  function bnAnd(a) {
    var r = nbi();
    return this.bitwiseTo(a, op_and, r), r;
  }
  __name(bnAnd, "bnAnd");
  function op_or(x, y) {
    return x | y;
  }
  __name(op_or, "op_or");
  function bnOr(a) {
    var r = nbi();
    return this.bitwiseTo(a, op_or, r), r;
  }
  __name(bnOr, "bnOr");
  function op_xor(x, y) {
    return x ^ y;
  }
  __name(op_xor, "op_xor");
  function bnXor(a) {
    var r = nbi();
    return this.bitwiseTo(a, op_xor, r), r;
  }
  __name(bnXor, "bnXor");
  function op_andnot(x, y) {
    return x & ~y;
  }
  __name(op_andnot, "op_andnot");
  function bnAndNot(a) {
    var r = nbi();
    return this.bitwiseTo(a, op_andnot, r), r;
  }
  __name(bnAndNot, "bnAndNot");
  function bnNot() {
    for (var r = nbi(), i = 0; i < this.t; ++i) r.data[i] = this.DM & ~this.data[i];
    return r.t = this.t, r.s = ~this.s, r;
  }
  __name(bnNot, "bnNot");
  function bnShiftLeft(n) {
    var r = nbi();
    return n < 0 ? this.rShiftTo(-n, r) : this.lShiftTo(n, r), r;
  }
  __name(bnShiftLeft, "bnShiftLeft");
  function bnShiftRight(n) {
    var r = nbi();
    return n < 0 ? this.lShiftTo(-n, r) : this.rShiftTo(n, r), r;
  }
  __name(bnShiftRight, "bnShiftRight");
  function lbit(x) {
    if (x == 0) return -1;
    var r = 0;
    return (x & 65535) == 0 && (x >>= 16, r += 16), (x & 255) == 0 && (x >>= 8, r += 8), (x & 15) == 0 && (x >>= 4, r += 4), (x & 3) == 0 && (x >>= 2, r += 2), (x & 1) == 0 && ++r, r;
  }
  __name(lbit, "lbit");
  function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i) if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);
    return this.s < 0 ? this.t * this.DB : -1;
  }
  __name(bnGetLowestSetBit, "bnGetLowestSetBit");
  function cbit(x) {
    for (var r = 0; x != 0;) x &= x - 1, ++r;
    return r;
  }
  __name(cbit, "cbit");
  function bnBitCount() {
    for (var r = 0, x = this.s & this.DM, i = 0; i < this.t; ++i) r += cbit(this.data[i] ^ x);
    return r;
  }
  __name(bnBitCount, "bnBitCount");
  function bnTestBit(n) {
    var j = Math.floor(n / this.DB);
    return j >= this.t ? this.s != 0 : (this.data[j] & 1 << n % this.DB) != 0;
  }
  __name(bnTestBit, "bnTestBit");
  function bnpChangeBit(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    return this.bitwiseTo(r, op, r), r;
  }
  __name(bnpChangeBit, "bnpChangeBit");
  function bnSetBit(n) {
    return this.changeBit(n, op_or);
  }
  __name(bnSetBit, "bnSetBit");
  function bnClearBit(n) {
    return this.changeBit(n, op_andnot);
  }
  __name(bnClearBit, "bnClearBit");
  function bnFlipBit(n) {
    return this.changeBit(n, op_xor);
  }
  __name(bnFlipBit, "bnFlipBit");
  function bnpAddTo(a, r) {
    for (var i = 0, c = 0, m = Math.min(a.t, this.t); i < m;) c += this.data[i] + a.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
    if (a.t < this.t) {
      for (c += a.s; i < this.t;) c += this.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
      c += this.s;
    } else {
      for (c += this.s; i < a.t;) c += a.data[i], r.data[i++] = c & this.DM, c >>= this.DB;
      c += a.s;
    }
    r.s = c < 0 ? -1 : 0, c > 0 ? r.data[i++] = c : c < -1 && (r.data[i++] = this.DV + c), r.t = i, r.clamp();
  }
  __name(bnpAddTo, "bnpAddTo");
  function bnAdd(a) {
    var r = nbi();
    return this.addTo(a, r), r;
  }
  __name(bnAdd, "bnAdd");
  function bnSubtract(a) {
    var r = nbi();
    return this.subTo(a, r), r;
  }
  __name(bnSubtract, "bnSubtract");
  function bnMultiply(a) {
    var r = nbi();
    return this.multiplyTo(a, r), r;
  }
  __name(bnMultiply, "bnMultiply");
  function bnDivide(a) {
    var r = nbi();
    return this.divRemTo(a, r, null), r;
  }
  __name(bnDivide, "bnDivide");
  function bnRemainder(a) {
    var r = nbi();
    return this.divRemTo(a, null, r), r;
  }
  __name(bnRemainder, "bnRemainder");
  function bnDivideAndRemainder(a) {
    var q = nbi(),
      r = nbi();
    return this.divRemTo(a, q, r), new Array(q, r);
  }
  __name(bnDivideAndRemainder, "bnDivideAndRemainder");
  function bnpDMultiply(n) {
    this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t), ++this.t, this.clamp();
  }
  __name(bnpDMultiply, "bnpDMultiply");
  function bnpDAddOffset(n, w) {
    if (n != 0) {
      for (; this.t <= w;) this.data[this.t++] = 0;
      for (this.data[w] += n; this.data[w] >= this.DV;) this.data[w] -= this.DV, ++w >= this.t && (this.data[this.t++] = 0), ++this.data[w];
    }
  }
  __name(bnpDAddOffset, "bnpDAddOffset");
  function NullExp() {}
  __name(NullExp, "NullExp");
  function nNop(x) {
    return x;
  }
  __name(nNop, "nNop");
  function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
  }
  __name(nMulTo, "nMulTo");
  function nSqrTo(x, r) {
    x.squareTo(r);
  }
  __name(nSqrTo, "nSqrTo");
  NullExp.prototype.convert = nNop;
  NullExp.prototype.revert = nNop;
  NullExp.prototype.mulTo = nMulTo;
  NullExp.prototype.sqrTo = nSqrTo;
  function bnPow(e) {
    return this.exp(e, new NullExp());
  }
  __name(bnPow, "bnPow");
  function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    for (r.s = 0, r.t = i; i > 0;) r.data[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i) r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a.data[i], r, i, 0, n - i);
    r.clamp();
  }
  __name(bnpMultiplyLowerTo, "bnpMultiplyLowerTo");
  function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    for (r.s = 0; --i >= 0;) r.data[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i) r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);
    r.clamp(), r.drShiftTo(1, r);
  }
  __name(bnpMultiplyUpperTo, "bnpMultiplyUpperTo");
  function Barrett(m) {
    this.r2 = nbi(), this.q3 = nbi(), BigInteger.ONE.dlShiftTo(2 * m.t, this.r2), this.mu = this.r2.divide(m), this.m = m;
  }
  __name(Barrett, "Barrett");
  function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
    if (x.compareTo(this.m) < 0) return x;
    var r = nbi();
    return x.copyTo(r), this.reduce(r), r;
  }
  __name(barrettConvert, "barrettConvert");
  function barrettRevert(x) {
    return x;
  }
  __name(barrettRevert, "barrettRevert");
  function barrettReduce(x) {
    for (x.drShiftTo(this.m.t - 1, this.r2), x.t > this.m.t + 1 && (x.t = this.m.t + 1, x.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); x.compareTo(this.r2) < 0;) x.dAddOffset(1, this.m.t + 1);
    for (x.subTo(this.r2, x); x.compareTo(this.m) >= 0;) x.subTo(this.m, x);
  }
  __name(barrettReduce, "barrettReduce");
  function barrettSqrTo(x, r) {
    x.squareTo(r), this.reduce(r);
  }
  __name(barrettSqrTo, "barrettSqrTo");
  function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r), this.reduce(r);
  }
  __name(barrettMulTo, "barrettMulTo");
  Barrett.prototype.convert = barrettConvert;
  Barrett.prototype.revert = barrettRevert;
  Barrett.prototype.reduce = barrettReduce;
  Barrett.prototype.mulTo = barrettMulTo;
  Barrett.prototype.sqrTo = barrettSqrTo;
  function bnModPow(e, m) {
    var i = e.bitLength(),
      k,
      r = nbv(1),
      z;
    if (i <= 0) return r;
    i < 18 ? k = 1 : i < 48 ? k = 3 : i < 144 ? k = 4 : i < 768 ? k = 5 : k = 6, i < 8 ? z = new Classic(m) : m.isEven() ? z = new Barrett(m) : z = new Montgomery(m);
    var g = new Array(),
      n = 3,
      k1 = k - 1,
      km = (1 << k) - 1;
    if (g[1] = z.convert(this), k > 1) {
      var g2 = nbi();
      for (z.sqrTo(g[1], g2); n <= km;) g[n] = nbi(), z.mulTo(g2, g[n - 2], g[n]), n += 2;
    }
    var j = e.t - 1,
      w,
      is1 = !0,
      r2 = nbi(),
      t;
    for (i = nbits(e.data[j]) - 1; j >= 0;) {
      for (i >= k1 ? w = e.data[j] >> i - k1 & km : (w = (e.data[j] & (1 << i + 1) - 1) << k1 - i, j > 0 && (w |= e.data[j - 1] >> this.DB + i - k1)), n = k; (w & 1) == 0;) w >>= 1, --n;
      if ((i -= n) < 0 && (i += this.DB, --j), is1) g[w].copyTo(r), is1 = !1;else {
        for (; n > 1;) z.sqrTo(r, r2), z.sqrTo(r2, r), n -= 2;
        n > 0 ? z.sqrTo(r, r2) : (t = r, r = r2, r2 = t), z.mulTo(r2, g[w], r);
      }
      for (; j >= 0 && (e.data[j] & 1 << i) == 0;) z.sqrTo(r, r2), t = r, r = r2, r2 = t, --i < 0 && (i = this.DB - 1, --j);
    }
    return z.revert(r);
  }
  __name(bnModPow, "bnModPow");
  function bnGCD(a) {
    var x = this.s < 0 ? this.negate() : this.clone(),
      y = a.s < 0 ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
      var t = x;
      x = y, y = t;
    }
    var i = x.getLowestSetBit(),
      g = y.getLowestSetBit();
    if (g < 0) return x;
    for (i < g && (g = i), g > 0 && (x.rShiftTo(g, x), y.rShiftTo(g, y)); x.signum() > 0;) (i = x.getLowestSetBit()) > 0 && x.rShiftTo(i, x), (i = y.getLowestSetBit()) > 0 && y.rShiftTo(i, y), x.compareTo(y) >= 0 ? (x.subTo(y, x), x.rShiftTo(1, x)) : (y.subTo(x, y), y.rShiftTo(1, y));
    return g > 0 && y.lShiftTo(g, y), y;
  }
  __name(bnGCD, "bnGCD");
  function bnpModInt(n) {
    if (n <= 0) return 0;
    var d = this.DV % n,
      r = this.s < 0 ? n - 1 : 0;
    if (this.t > 0) if (d == 0) r = this.data[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this.data[i]) % n;
    return r;
  }
  __name(bnpModInt, "bnpModInt");
  function bnModInverse(m) {
    var ac = m.isEven();
    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
    for (var u = m.clone(), v = this.clone(), a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1); u.signum() != 0;) {
      for (; u.isEven();) u.rShiftTo(1, u), ac ? ((!a.isEven() || !b.isEven()) && (a.addTo(this, a), b.subTo(m, b)), a.rShiftTo(1, a)) : b.isEven() || b.subTo(m, b), b.rShiftTo(1, b);
      for (; v.isEven();) v.rShiftTo(1, v), ac ? ((!c.isEven() || !d.isEven()) && (c.addTo(this, c), d.subTo(m, d)), c.rShiftTo(1, c)) : d.isEven() || d.subTo(m, d), d.rShiftTo(1, d);
      u.compareTo(v) >= 0 ? (u.subTo(v, u), ac && a.subTo(c, a), b.subTo(d, b)) : (v.subTo(u, v), ac && c.subTo(a, c), d.subTo(b, d));
    }
    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if (d.compareTo(m) >= 0) return d.subtract(m);
    if (d.signum() < 0) d.addTo(m, d);else return d;
    return d.signum() < 0 ? d.add(m) : d;
  }
  __name(bnModInverse, "bnModInverse");
  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509],
    lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
  function bnIsProbablePrime(t) {
    var i,
      x = this.abs();
    if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
      for (i = 0; i < lowprimes.length; ++i) if (x.data[0] == lowprimes[i]) return !0;
      return !1;
    }
    if (x.isEven()) return !1;
    for (i = 1; i < lowprimes.length;) {
      for (var m = lowprimes[i], j = i + 1; j < lowprimes.length && m < lplim;) m *= lowprimes[j++];
      for (m = x.modInt(m); i < j;) if (m % lowprimes[i++] == 0) return !1;
    }
    return x.millerRabin(t);
  }
  __name(bnIsProbablePrime, "bnIsProbablePrime");
  function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE),
      k = n1.getLowestSetBit();
    if (k <= 0) return !1;
    for (var r = n1.shiftRight(k), prng = bnGetPrng(), a, i = 0; i < t; ++i) {
      do a = new BigInteger(this.bitLength(), prng); while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
      var y = a.modPow(r, this);
      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
        for (var j = 1; j++ < k && y.compareTo(n1) != 0;) if (y = y.modPowInt(2, this), y.compareTo(BigInteger.ONE) == 0) return !1;
        if (y.compareTo(n1) != 0) return !1;
      }
    }
    return !0;
  }
  __name(bnpMillerRabin, "bnpMillerRabin");
  function bnGetPrng() {
    return {
      nextBytes: __name(function (x) {
        for (var i = 0; i < x.length; ++i) x[i] = Math.floor(Math.random() * 256);
      }, "nextBytes")
    };
  }
  __name(bnGetPrng, "bnGetPrng");
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.fromNumber = bnpFromNumber;
  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
  BigInteger.prototype.changeBit = bnpChangeBit;
  BigInteger.prototype.addTo = bnpAddTo;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
  BigInteger.prototype.modInt = bnpModInt;
  BigInteger.prototype.millerRabin = bnpMillerRabin;
  BigInteger.prototype.clone = bnClone;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.byteValue = bnByteValue;
  BigInteger.prototype.shortValue = bnShortValue;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.toByteArray = bnToByteArray;
  BigInteger.prototype.equals = bnEquals;
  BigInteger.prototype.min = bnMin;
  BigInteger.prototype.max = bnMax;
  BigInteger.prototype.and = bnAnd;
  BigInteger.prototype.or = bnOr;
  BigInteger.prototype.xor = bnXor;
  BigInteger.prototype.andNot = bnAndNot;
  BigInteger.prototype.not = bnNot;
  BigInteger.prototype.shiftLeft = bnShiftLeft;
  BigInteger.prototype.shiftRight = bnShiftRight;
  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
  BigInteger.prototype.bitCount = bnBitCount;
  BigInteger.prototype.testBit = bnTestBit;
  BigInteger.prototype.setBit = bnSetBit;
  BigInteger.prototype.clearBit = bnClearBit;
  BigInteger.prototype.flipBit = bnFlipBit;
  BigInteger.prototype.add = bnAdd;
  BigInteger.prototype.subtract = bnSubtract;
  BigInteger.prototype.multiply = bnMultiply;
  BigInteger.prototype.divide = bnDivide;
  BigInteger.prototype.remainder = bnRemainder;
  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
  BigInteger.prototype.modPow = bnModPow;
  BigInteger.prototype.modInverse = bnModInverse;
  BigInteger.prototype.pow = bnPow;
  BigInteger.prototype.gcd = bnGCD;
  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
});