var require_random = __commonJSMin((exports, module) => {
  var forge = Ja();
  Fw();
  Yse();
  Kse();
  Ki();
  (function () {
    if (forge.random && forge.random.getBytes) {
      module.exports = forge.random;
      return;
    }
    (function (jQuery) {
      var prng_aes = {},
        _prng_aes_output = new Array(4),
        _prng_aes_buffer = forge.util.createBuffer();
      prng_aes.formatKey = function (key) {
        var tmp = forge.util.createBuffer(key);
        return key = new Array(4), key[0] = tmp.getInt32(), key[1] = tmp.getInt32(), key[2] = tmp.getInt32(), key[3] = tmp.getInt32(), forge.aes._expandKey(key, !1);
      }, prng_aes.formatSeed = function (seed) {
        var tmp = forge.util.createBuffer(seed);
        return seed = new Array(4), seed[0] = tmp.getInt32(), seed[1] = tmp.getInt32(), seed[2] = tmp.getInt32(), seed[3] = tmp.getInt32(), seed;
      }, prng_aes.cipher = function (key, seed) {
        return forge.aes._updateBlock(key, seed, _prng_aes_output, !1), _prng_aes_buffer.putInt32(_prng_aes_output[0]), _prng_aes_buffer.putInt32(_prng_aes_output[1]), _prng_aes_buffer.putInt32(_prng_aes_output[2]), _prng_aes_buffer.putInt32(_prng_aes_output[3]), _prng_aes_buffer.getBytes();
      }, prng_aes.increment = function (seed) {
        return ++seed[3], seed;
      }, prng_aes.md = forge.md.sha256;
      function spawnPrng() {
        var ctx = forge.prng.create(prng_aes);
        return ctx.getBytes = function (count, callback) {
          return ctx.generate(count, callback);
        }, ctx.getBytesSync = function (count) {
          return ctx.generate(count);
        }, ctx;
      }
      __name(spawnPrng, "spawnPrng");
      var _ctx = spawnPrng(),
        getRandomValues = null,
        globalScope = forge.util.globalScope,
        _crypto = globalScope.crypto || globalScope.msCrypto;
      if (_crypto && _crypto.getRandomValues && (getRandomValues = __name(function (arr) {
        return _crypto.getRandomValues(arr);
      }, "getRandomValues")), forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {
        if (typeof window > "u" || window.document, _ctx.collectInt(+new Date(), 32), typeof navigator < "u") {
          var _navBytes = "";
          for (var key in navigator) try {
            typeof navigator[key] == "string" && (_navBytes += navigator[key]);
          } catch {}
          _ctx.collect(_navBytes), _navBytes = null;
        }
        jQuery && (jQuery().mousemove(function (e) {
          _ctx.collectInt(e.clientX, 16), _ctx.collectInt(e.clientY, 16);
        }), jQuery().keypress(function (e) {
          _ctx.collectInt(e.charCode, 8);
        }));
      }
      if (!forge.random) forge.random = _ctx;else for (var key in _ctx) forge.random[key] = _ctx[key];
      forge.random.createInstance = spawnPrng, module.exports = forge.random;
    })(typeof jQuery < "u" ? jQuery : null);
  })();
});