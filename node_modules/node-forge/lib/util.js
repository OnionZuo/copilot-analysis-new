var require_util = __commonJSMin((exports, module) => {
  var forge = Ja(),
    baseN = aMe(),
    util = module.exports = forge.util = forge.util || {};
  (function () {
    if (typeof process < "u" && process.nextTick && !process.browser) {
      util.nextTick = process.nextTick, typeof setImmediate == "function" ? util.setImmediate = setImmediate : util.setImmediate = util.nextTick;
      return;
    }
    if (typeof setImmediate == "function") {
      util.setImmediate = function () {
        return setImmediate.apply(void 0, arguments);
      }, util.nextTick = function (callback) {
        return setImmediate(callback);
      };
      return;
    }
    if (util.setImmediate = function (callback) {
      setTimeout(callback, 0);
    }, typeof window < "u" && typeof window.postMessage == "function") {
      let handler = function (event) {
        if (event.source === window && event.data === msg) {
          event.stopPropagation();
          var copy = callbacks.slice();
          callbacks.length = 0, copy.forEach(function (callback) {
            callback();
          });
        }
      };
      var handler = c;
      __name(handler, "handler");
      var msg = "forge.setImmediate",
        callbacks = [];
      util.setImmediate = function (callback) {
        callbacks.push(callback), callbacks.length === 1 && window.postMessage(msg, "*");
      }, window.addEventListener("message", handler, !0);
    }
    if (typeof MutationObserver < "u") {
      var now = Date.now(),
        attr = !0,
        div = document.createElement("div"),
        callbacks = [];
      new MutationObserver(function () {
        var copy = callbacks.slice();
        callbacks.length = 0, copy.forEach(function (callback) {
          callback();
        });
      }).observe(div, {
        attributes: !0
      });
      var oldSetImmediate = util.setImmediate;
      util.setImmediate = function (callback) {
        Date.now() - now > 15 ? (now = Date.now(), oldSetImmediate(callback)) : (callbacks.push(callback), callbacks.length === 1 && div.setAttribute("a", attr = !attr));
      };
    }
    util.nextTick = util.setImmediate;
  })();
  util.isNodejs = typeof process < "u" && process.versions && process.versions.node;
  util.globalScope = function () {
    return util.isNodejs ? global : typeof self > "u" ? window : self;
  }();
  util.isArray = Array.isArray || function (x) {
    return Object.prototype.toString.call(x) === "[object Array]";
  };
  util.isArrayBuffer = function (x) {
    return typeof ArrayBuffer < "u" && x instanceof ArrayBuffer;
  };
  util.isArrayBufferView = function (x) {
    return x && util.isArrayBuffer(x.buffer) && x.byteLength !== void 0;
  };
  function _checkBitsParam(n) {
    if (!(n === 8 || n === 16 || n === 24 || n === 32)) throw new Error("Only 8, 16, 24, or 32 bits supported: " + n);
  }
  __name(_checkBitsParam, "_checkBitsParam");
  util.ByteBuffer = ByteStringBuffer;
  function ByteStringBuffer(b) {
    if (this.data = "", this.read = 0, typeof b == "string") this.data = b;else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
      if (typeof Buffer < "u" && b instanceof Buffer) this.data = b.toString("binary");else {
        var arr = new Uint8Array(b);
        try {
          this.data = String.fromCharCode.apply(null, arr);
        } catch {
          for (var i = 0; i < arr.length; ++i) this.putByte(arr[i]);
        }
      }
    } else (b instanceof ByteStringBuffer || typeof b == "object" && typeof b.data == "string" && typeof b.read == "number") && (this.data = b.data, this.read = b.read);
    this._constructedStringLength = 0;
  }
  __name(ByteStringBuffer, "ByteStringBuffer");
  util.ByteStringBuffer = ByteStringBuffer;
  var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
  util.ByteStringBuffer.prototype._optimizeConstructedString = function (x) {
    this._constructedStringLength += x, this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH && (this.data.substr(0, 1), this._constructedStringLength = 0);
  };
  util.ByteStringBuffer.prototype.length = function () {
    return this.data.length - this.read;
  };
  util.ByteStringBuffer.prototype.isEmpty = function () {
    return this.length() <= 0;
  };
  util.ByteStringBuffer.prototype.putByte = function (b) {
    return this.putBytes(String.fromCharCode(b));
  };
  util.ByteStringBuffer.prototype.fillWithByte = function (b, n) {
    b = String.fromCharCode(b);
    for (var d = this.data; n > 0;) n & 1 && (d += b), n >>>= 1, n > 0 && (b += b);
    return this.data = d, this._optimizeConstructedString(n), this;
  };
  util.ByteStringBuffer.prototype.putBytes = function (bytes) {
    return this.data += bytes, this._optimizeConstructedString(bytes.length), this;
  };
  util.ByteStringBuffer.prototype.putString = function (str) {
    return this.putBytes(util.encodeUtf8(str));
  };
  util.ByteStringBuffer.prototype.putInt16 = function (i) {
    return this.putBytes(String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255));
  };
  util.ByteStringBuffer.prototype.putInt24 = function (i) {
    return this.putBytes(String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255));
  };
  util.ByteStringBuffer.prototype.putInt32 = function (i) {
    return this.putBytes(String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255));
  };
  util.ByteStringBuffer.prototype.putInt16Le = function (i) {
    return this.putBytes(String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255));
  };
  util.ByteStringBuffer.prototype.putInt24Le = function (i) {
    return this.putBytes(String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255));
  };
  util.ByteStringBuffer.prototype.putInt32Le = function (i) {
    return this.putBytes(String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 24 & 255));
  };
  util.ByteStringBuffer.prototype.putInt = function (i, n) {
    _checkBitsParam(n);
    var bytes = "";
    do n -= 8, bytes += String.fromCharCode(i >> n & 255); while (n > 0);
    return this.putBytes(bytes);
  };
  util.ByteStringBuffer.prototype.putSignedInt = function (i, n) {
    return i < 0 && (i += 2 << n - 1), this.putInt(i, n);
  };
  util.ByteStringBuffer.prototype.putBuffer = function (buffer) {
    return this.putBytes(buffer.getBytes());
  };
  util.ByteStringBuffer.prototype.getByte = function () {
    return this.data.charCodeAt(this.read++);
  };
  util.ByteStringBuffer.prototype.getInt16 = function () {
    var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
    return this.read += 2, rval;
  };
  util.ByteStringBuffer.prototype.getInt24 = function () {
    var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
    return this.read += 3, rval;
  };
  util.ByteStringBuffer.prototype.getInt32 = function () {
    var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
    return this.read += 4, rval;
  };
  util.ByteStringBuffer.prototype.getInt16Le = function () {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
    return this.read += 2, rval;
  };
  util.ByteStringBuffer.prototype.getInt24Le = function () {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
    return this.read += 3, rval;
  };
  util.ByteStringBuffer.prototype.getInt32Le = function () {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
    return this.read += 4, rval;
  };
  util.ByteStringBuffer.prototype.getInt = function (n) {
    _checkBitsParam(n);
    var rval = 0;
    do rval = (rval << 8) + this.data.charCodeAt(this.read++), n -= 8; while (n > 0);
    return rval;
  };
  util.ByteStringBuffer.prototype.getSignedInt = function (n) {
    var x = this.getInt(n),
      max = 2 << n - 2;
    return x >= max && (x -= max << 1), x;
  };
  util.ByteStringBuffer.prototype.getBytes = function (count) {
    var rval;
    return count ? (count = Math.min(this.length(), count), rval = this.data.slice(this.read, this.read + count), this.read += count) : count === 0 ? rval = "" : (rval = this.read === 0 ? this.data : this.data.slice(this.read), this.clear()), rval;
  };
  util.ByteStringBuffer.prototype.bytes = function (count) {
    return typeof count > "u" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
  };
  util.ByteStringBuffer.prototype.at = function (i) {
    return this.data.charCodeAt(this.read + i);
  };
  util.ByteStringBuffer.prototype.setAt = function (i, b) {
    return this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1), this;
  };
  util.ByteStringBuffer.prototype.last = function () {
    return this.data.charCodeAt(this.data.length - 1);
  };
  util.ByteStringBuffer.prototype.copy = function () {
    var c = util.createBuffer(this.data);
    return c.read = this.read, c;
  };
  util.ByteStringBuffer.prototype.compact = function () {
    return this.read > 0 && (this.data = this.data.slice(this.read), this.read = 0), this;
  };
  util.ByteStringBuffer.prototype.clear = function () {
    return this.data = "", this.read = 0, this;
  };
  util.ByteStringBuffer.prototype.truncate = function (count) {
    var len = Math.max(0, this.length() - count);
    return this.data = this.data.substr(this.read, len), this.read = 0, this;
  };
  util.ByteStringBuffer.prototype.toHex = function () {
    for (var rval = "", i = this.read; i < this.data.length; ++i) {
      var b = this.data.charCodeAt(i);
      b < 16 && (rval += "0"), rval += b.toString(16);
    }
    return rval;
  };
  util.ByteStringBuffer.prototype.toString = function () {
    return util.decodeUtf8(this.bytes());
  };
  function DataBuffer(b, options) {
    options = options || {}, this.read = options.readOffset || 0, this.growSize = options.growSize || 1024;
    var isArrayBuffer = util.isArrayBuffer(b),
      isArrayBufferView = util.isArrayBufferView(b);
    if (isArrayBuffer || isArrayBufferView) {
      isArrayBuffer ? this.data = new DataView(b) : this.data = new DataView(b.buffer, b.byteOffset, b.byteLength), this.write = "writeOffset" in options ? options.writeOffset : this.data.byteLength;
      return;
    }
    this.data = new DataView(new ArrayBuffer(0)), this.write = 0, b != null && this.putBytes(b), "writeOffset" in options && (this.write = options.writeOffset);
  }
  __name(DataBuffer, "DataBuffer");
  util.DataBuffer = DataBuffer;
  util.DataBuffer.prototype.length = function () {
    return this.write - this.read;
  };
  util.DataBuffer.prototype.isEmpty = function () {
    return this.length() <= 0;
  };
  util.DataBuffer.prototype.accommodate = function (amount, growSize) {
    if (this.length() >= amount) return this;
    growSize = Math.max(growSize || this.growSize, amount);
    var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength),
      dst = new Uint8Array(this.length() + growSize);
    return dst.set(src), this.data = new DataView(dst.buffer), this;
  };
  util.DataBuffer.prototype.putByte = function (b) {
    return this.accommodate(1), this.data.setUint8(this.write++, b), this;
  };
  util.DataBuffer.prototype.fillWithByte = function (b, n) {
    this.accommodate(n);
    for (var i = 0; i < n; ++i) this.data.setUint8(b);
    return this;
  };
  util.DataBuffer.prototype.putBytes = function (bytes, encoding) {
    if (util.isArrayBufferView(bytes)) {
      var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength),
        len = src.byteLength - src.byteOffset;
      this.accommodate(len);
      var dst = new Uint8Array(this.data.buffer, this.write);
      return dst.set(src), this.write += len, this;
    }
    if (util.isArrayBuffer(bytes)) {
      var src = new Uint8Array(bytes);
      this.accommodate(src.byteLength);
      var dst = new Uint8Array(this.data.buffer);
      return dst.set(src, this.write), this.write += src.byteLength, this;
    }
    if (bytes instanceof util.DataBuffer || typeof bytes == "object" && typeof bytes.read == "number" && typeof bytes.write == "number" && util.isArrayBufferView(bytes.data)) {
      var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
      this.accommodate(src.byteLength);
      var dst = new Uint8Array(bytes.data.byteLength, this.write);
      return dst.set(src), this.write += src.byteLength, this;
    }
    if (bytes instanceof util.ByteStringBuffer && (bytes = bytes.data, encoding = "binary"), encoding = encoding || "binary", typeof bytes == "string") {
      var view;
      if (encoding === "hex") return this.accommodate(Math.ceil(bytes.length / 2)), view = new Uint8Array(this.data.buffer, this.write), this.write += util.binary.hex.decode(bytes, view, this.write), this;
      if (encoding === "base64") return this.accommodate(Math.ceil(bytes.length / 4) * 3), view = new Uint8Array(this.data.buffer, this.write), this.write += util.binary.base64.decode(bytes, view, this.write), this;
      if (encoding === "utf8" && (bytes = util.encodeUtf8(bytes), encoding = "binary"), encoding === "binary" || encoding === "raw") return this.accommodate(bytes.length), view = new Uint8Array(this.data.buffer, this.write), this.write += util.binary.raw.decode(view), this;
      if (encoding === "utf16") return this.accommodate(bytes.length * 2), view = new Uint16Array(this.data.buffer, this.write), this.write += util.text.utf16.encode(view), this;
      throw new Error("Invalid encoding: " + encoding);
    }
    throw Error("Invalid parameter: " + bytes);
  };
  util.DataBuffer.prototype.putBuffer = function (buffer) {
    return this.putBytes(buffer), buffer.clear(), this;
  };
  util.DataBuffer.prototype.putString = function (str) {
    return this.putBytes(str, "utf16");
  };
  util.DataBuffer.prototype.putInt16 = function (i) {
    return this.accommodate(2), this.data.setInt16(this.write, i), this.write += 2, this;
  };
  util.DataBuffer.prototype.putInt24 = function (i) {
    return this.accommodate(3), this.data.setInt16(this.write, i >> 8 & 65535), this.data.setInt8(this.write, i >> 16 & 255), this.write += 3, this;
  };
  util.DataBuffer.prototype.putInt32 = function (i) {
    return this.accommodate(4), this.data.setInt32(this.write, i), this.write += 4, this;
  };
  util.DataBuffer.prototype.putInt16Le = function (i) {
    return this.accommodate(2), this.data.setInt16(this.write, i, !0), this.write += 2, this;
  };
  util.DataBuffer.prototype.putInt24Le = function (i) {
    return this.accommodate(3), this.data.setInt8(this.write, i >> 16 & 255), this.data.setInt16(this.write, i >> 8 & 65535, !0), this.write += 3, this;
  };
  util.DataBuffer.prototype.putInt32Le = function (i) {
    return this.accommodate(4), this.data.setInt32(this.write, i, !0), this.write += 4, this;
  };
  util.DataBuffer.prototype.putInt = function (i, n) {
    _checkBitsParam(n), this.accommodate(n / 8);
    do n -= 8, this.data.setInt8(this.write++, i >> n & 255); while (n > 0);
    return this;
  };
  util.DataBuffer.prototype.putSignedInt = function (i, n) {
    return _checkBitsParam(n), this.accommodate(n / 8), i < 0 && (i += 2 << n - 1), this.putInt(i, n);
  };
  util.DataBuffer.prototype.getByte = function () {
    return this.data.getInt8(this.read++);
  };
  util.DataBuffer.prototype.getInt16 = function () {
    var rval = this.data.getInt16(this.read);
    return this.read += 2, rval;
  };
  util.DataBuffer.prototype.getInt24 = function () {
    var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
    return this.read += 3, rval;
  };
  util.DataBuffer.prototype.getInt32 = function () {
    var rval = this.data.getInt32(this.read);
    return this.read += 4, rval;
  };
  util.DataBuffer.prototype.getInt16Le = function () {
    var rval = this.data.getInt16(this.read, !0);
    return this.read += 2, rval;
  };
  util.DataBuffer.prototype.getInt24Le = function () {
    var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, !0) << 8;
    return this.read += 3, rval;
  };
  util.DataBuffer.prototype.getInt32Le = function () {
    var rval = this.data.getInt32(this.read, !0);
    return this.read += 4, rval;
  };
  util.DataBuffer.prototype.getInt = function (n) {
    _checkBitsParam(n);
    var rval = 0;
    do rval = (rval << 8) + this.data.getInt8(this.read++), n -= 8; while (n > 0);
    return rval;
  };
  util.DataBuffer.prototype.getSignedInt = function (n) {
    var x = this.getInt(n),
      max = 2 << n - 2;
    return x >= max && (x -= max << 1), x;
  };
  util.DataBuffer.prototype.getBytes = function (count) {
    var rval;
    return count ? (count = Math.min(this.length(), count), rval = this.data.slice(this.read, this.read + count), this.read += count) : count === 0 ? rval = "" : (rval = this.read === 0 ? this.data : this.data.slice(this.read), this.clear()), rval;
  };
  util.DataBuffer.prototype.bytes = function (count) {
    return typeof count > "u" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
  };
  util.DataBuffer.prototype.at = function (i) {
    return this.data.getUint8(this.read + i);
  };
  util.DataBuffer.prototype.setAt = function (i, b) {
    return this.data.setUint8(i, b), this;
  };
  util.DataBuffer.prototype.last = function () {
    return this.data.getUint8(this.write - 1);
  };
  util.DataBuffer.prototype.copy = function () {
    return new util.DataBuffer(this);
  };
  util.DataBuffer.prototype.compact = function () {
    if (this.read > 0) {
      var src = new Uint8Array(this.data.buffer, this.read),
        dst = new Uint8Array(src.byteLength);
      dst.set(src), this.data = new DataView(dst), this.write -= this.read, this.read = 0;
    }
    return this;
  };
  util.DataBuffer.prototype.clear = function () {
    return this.data = new DataView(new ArrayBuffer(0)), this.read = this.write = 0, this;
  };
  util.DataBuffer.prototype.truncate = function (count) {
    return this.write = Math.max(0, this.length() - count), this.read = Math.min(this.read, this.write), this;
  };
  util.DataBuffer.prototype.toHex = function () {
    for (var rval = "", i = this.read; i < this.data.byteLength; ++i) {
      var b = this.data.getUint8(i);
      b < 16 && (rval += "0"), rval += b.toString(16);
    }
    return rval;
  };
  util.DataBuffer.prototype.toString = function (encoding) {
    var view = new Uint8Array(this.data, this.read, this.length());
    if (encoding = encoding || "utf8", encoding === "binary" || encoding === "raw") return util.binary.raw.encode(view);
    if (encoding === "hex") return util.binary.hex.encode(view);
    if (encoding === "base64") return util.binary.base64.encode(view);
    if (encoding === "utf8") return util.text.utf8.decode(view);
    if (encoding === "utf16") return util.text.utf16.decode(view);
    throw new Error("Invalid encoding: " + encoding);
  };
  util.createBuffer = function (input, encoding) {
    return encoding = encoding || "raw", input !== void 0 && encoding === "utf8" && (input = util.encodeUtf8(input)), new util.ByteBuffer(input);
  };
  util.fillString = function (c, n) {
    for (var s = ""; n > 0;) n & 1 && (s += c), n >>>= 1, n > 0 && (c += c);
    return s;
  };
  util.xorBytes = function (s1, s2, n) {
    for (var s3 = "", b = "", t = "", i = 0, c = 0; n > 0; --n, ++i) b = s1.charCodeAt(i) ^ s2.charCodeAt(i), c >= 10 && (s3 += t, t = "", c = 0), t += String.fromCharCode(b), ++c;
    return s3 += t, s3;
  };
  util.hexToBytes = function (hex) {
    var rval = "",
      i = 0;
    for (hex.length & !0 && (i = 1, rval += String.fromCharCode(parseInt(hex[0], 16))); i < hex.length; i += 2) rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return rval;
  };
  util.bytesToHex = function (bytes) {
    return util.createBuffer(bytes).toHex();
  };
  util.int32ToBytes = function (i) {
    return String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255);
  };
  var _base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    _base64Idx = [62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 64, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],
    _base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  util.encode64 = function (input, maxline) {
    for (var line = "", output = "", chr1, chr2, chr3, i = 0; i < input.length;) chr1 = input.charCodeAt(i++), chr2 = input.charCodeAt(i++), chr3 = input.charCodeAt(i++), line += _base64.charAt(chr1 >> 2), line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4), isNaN(chr2) ? line += "==" : (line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6), line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63)), maxline && line.length > maxline && (output += line.substr(0, maxline) + `\r
`, line = line.substr(maxline));
    return output += line, output;
  };
  util.decode64 = function (input) {
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    for (var output = "", enc1, enc2, enc3, enc4, i = 0; i < input.length;) enc1 = _base64Idx[input.charCodeAt(i++) - 43], enc2 = _base64Idx[input.charCodeAt(i++) - 43], enc3 = _base64Idx[input.charCodeAt(i++) - 43], enc4 = _base64Idx[input.charCodeAt(i++) - 43], output += String.fromCharCode(enc1 << 2 | enc2 >> 4), enc3 !== 64 && (output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2), enc4 !== 64 && (output += String.fromCharCode((enc3 & 3) << 6 | enc4)));
    return output;
  };
  util.encodeUtf8 = function (str) {
    return unescape(encodeURIComponent(str));
  };
  util.decodeUtf8 = function (str) {
    return decodeURIComponent(escape(str));
  };
  util.binary = {
    raw: {},
    hex: {},
    base64: {},
    base58: {},
    baseN: {
      encode: baseN.encode,
      decode: baseN.decode
    }
  };
  util.binary.raw.encode = function (bytes) {
    return String.fromCharCode.apply(null, bytes);
  };
  util.binary.raw.decode = function (str, output, offset) {
    var out = output;
    out || (out = new Uint8Array(str.length)), offset = offset || 0;
    for (var j = offset, i = 0; i < str.length; ++i) out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
  };
  util.binary.hex.encode = util.bytesToHex;
  util.binary.hex.decode = function (hex, output, offset) {
    var out = output;
    out || (out = new Uint8Array(Math.ceil(hex.length / 2))), offset = offset || 0;
    var i = 0,
      j = offset;
    for (hex.length & 1 && (i = 1, out[j++] = parseInt(hex[0], 16)); i < hex.length; i += 2) out[j++] = parseInt(hex.substr(i, 2), 16);
    return output ? j - offset : out;
  };
  util.binary.base64.encode = function (input, maxline) {
    for (var line = "", output = "", chr1, chr2, chr3, i = 0; i < input.byteLength;) chr1 = input[i++], chr2 = input[i++], chr3 = input[i++], line += _base64.charAt(chr1 >> 2), line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4), isNaN(chr2) ? line += "==" : (line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6), line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63)), maxline && line.length > maxline && (output += line.substr(0, maxline) + `\r
`, line = line.substr(maxline));
    return output += line, output;
  };
  util.binary.base64.decode = function (input, output, offset) {
    var out = output;
    out || (out = new Uint8Array(Math.ceil(input.length / 4) * 3)), input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""), offset = offset || 0;
    for (var enc1, enc2, enc3, enc4, i = 0, j = offset; i < input.length;) enc1 = _base64Idx[input.charCodeAt(i++) - 43], enc2 = _base64Idx[input.charCodeAt(i++) - 43], enc3 = _base64Idx[input.charCodeAt(i++) - 43], enc4 = _base64Idx[input.charCodeAt(i++) - 43], out[j++] = enc1 << 2 | enc2 >> 4, enc3 !== 64 && (out[j++] = (enc2 & 15) << 4 | enc3 >> 2, enc4 !== 64 && (out[j++] = (enc3 & 3) << 6 | enc4));
    return output ? j - offset : out.subarray(0, j);
  };
  util.binary.base58.encode = function (input, maxline) {
    return util.binary.baseN.encode(input, _base58, maxline);
  };
  util.binary.base58.decode = function (input, maxline) {
    return util.binary.baseN.decode(input, _base58, maxline);
  };
  util.text = {
    utf8: {},
    utf16: {}
  };
  util.text.utf8.encode = function (str, output, offset) {
    str = util.encodeUtf8(str);
    var out = output;
    out || (out = new Uint8Array(str.length)), offset = offset || 0;
    for (var j = offset, i = 0; i < str.length; ++i) out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
  };
  util.text.utf8.decode = function (bytes) {
    return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
  };
  util.text.utf16.encode = function (str, output, offset) {
    var out = output;
    out || (out = new Uint8Array(str.length * 2));
    var view = new Uint16Array(out.buffer);
    offset = offset || 0;
    for (var j = offset, k = offset, i = 0; i < str.length; ++i) view[k++] = str.charCodeAt(i), j += 2;
    return output ? j - offset : out;
  };
  util.text.utf16.decode = function (bytes) {
    return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
  };
  util.deflate = function (api, bytes, raw) {
    if (bytes = util.decode64(api.deflate(util.encode64(bytes)).rval), raw) {
      var start = 2,
        flg = bytes.charCodeAt(1);
      flg & 32 && (start = 6), bytes = bytes.substring(start, bytes.length - 4);
    }
    return bytes;
  };
  util.inflate = function (api, bytes, raw) {
    var rval = api.inflate(util.encode64(bytes)).rval;
    return rval === null ? null : util.decode64(rval);
  };
  var _setStorageObject = __name(function (api, id, obj) {
      if (!api) throw new Error("WebStorage not available.");
      var rval;
      if (obj === null ? rval = api.removeItem(id) : (obj = util.encode64(JSON.stringify(obj)), rval = api.setItem(id, obj)), typeof rval < "u" && rval.rval !== !0) {
        var error = new Error(rval.error.message);
        throw error.id = rval.error.id, error.name = rval.error.name, error;
      }
    }, "_setStorageObject"),
    _getStorageObject = __name(function (api, id) {
      if (!api) throw new Error("WebStorage not available.");
      var rval = api.getItem(id);
      if (api.init) if (rval.rval === null) {
        if (rval.error) {
          var error = new Error(rval.error.message);
          throw error.id = rval.error.id, error.name = rval.error.name, error;
        }
        rval = null;
      } else rval = rval.rval;
      return rval !== null && (rval = JSON.parse(util.decode64(rval))), rval;
    }, "_getStorageObject"),
    _setItem = __name(function (api, id, key, data) {
      var obj = _getStorageObject(api, id);
      obj === null && (obj = {}), obj[key] = data, _setStorageObject(api, id, obj);
    }, "_setItem"),
    _getItem = __name(function (api, id, key) {
      var rval = _getStorageObject(api, id);
      return rval !== null && (rval = key in rval ? rval[key] : null), rval;
    }, "_getItem"),
    _removeItem = __name(function (api, id, key) {
      var obj = _getStorageObject(api, id);
      if (obj !== null && key in obj) {
        delete obj[key];
        var empty = !0;
        for (var prop in obj) {
          empty = !1;
          break;
        }
        empty && (obj = null), _setStorageObject(api, id, obj);
      }
    }, "_removeItem"),
    _clearItems = __name(function (api, id) {
      _setStorageObject(api, id, null);
    }, "_clearItems"),
    _callStorageFunction = __name(function (func, args, location) {
      var rval = null;
      typeof location > "u" && (location = ["web", "flash"]);
      var type,
        done = !1,
        exception = null;
      for (var idx in location) {
        type = location[idx];
        try {
          if (type === "flash" || type === "both") {
            if (args[0] === null) throw new Error("Flash local storage not available.");
            rval = func.apply(this, args), done = type === "flash";
          }
          (type === "web" || type === "both") && (args[0] = localStorage, rval = func.apply(this, args), done = !0);
        } catch (ex) {
          exception = ex;
        }
        if (done) break;
      }
      if (!done) throw exception;
      return rval;
    }, "_callStorageFunction");
  util.setItem = function (api, id, key, data, location) {
    _callStorageFunction(_setItem, arguments, location);
  };
  util.getItem = function (api, id, key, location) {
    return _callStorageFunction(_getItem, arguments, location);
  };
  util.removeItem = function (api, id, key, location) {
    _callStorageFunction(_removeItem, arguments, location);
  };
  util.clearItems = function (api, id, location) {
    _callStorageFunction(_clearItems, arguments, location);
  };
  util.isEmpty = function (obj) {
    for (var prop in obj) if (obj.hasOwnProperty(prop)) return !1;
    return !0;
  };
  util.format = function (format) {
    for (var re = /%./g, match, part, argi = 0, parts = [], last = 0; match = re.exec(format);) {
      part = format.substring(last, re.lastIndex - 2), part.length > 0 && parts.push(part), last = re.lastIndex;
      var code = match[0][1];
      switch (code) {
        case "s":
        case "o":
          argi < arguments.length ? parts.push(arguments[argi++ + 1]) : parts.push("<?>");
          break;
        case "%":
          parts.push("%");
          break;
        default:
          parts.push("<%" + code + "?>");
      }
    }
    return parts.push(format.substring(last)), parts.join("");
  };
  util.formatNumber = function (number, decimals, dec_point, thousands_sep) {
    var n = number,
      c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals,
      d = dec_point === void 0 ? "," : dec_point,
      t = thousands_sep === void 0 ? "." : thousands_sep,
      s = n < 0 ? "-" : "",
      i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + "",
      j = i.length > 3 ? i.length % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
  };
  util.formatSize = function (size) {
    return size >= 1073741824 ? size = util.formatNumber(size / 1073741824, 2, ".", "") + " GiB" : size >= 1048576 ? size = util.formatNumber(size / 1048576, 2, ".", "") + " MiB" : size >= 1024 ? size = util.formatNumber(size / 1024, 0) + " KiB" : size = util.formatNumber(size, 0) + " bytes", size;
  };
  util.bytesFromIP = function (ip) {
    return ip.indexOf(".") !== -1 ? util.bytesFromIPv4(ip) : ip.indexOf(":") !== -1 ? util.bytesFromIPv6(ip) : null;
  };
  util.bytesFromIPv4 = function (ip) {
    if (ip = ip.split("."), ip.length !== 4) return null;
    for (var b = util.createBuffer(), i = 0; i < ip.length; ++i) {
      var num = parseInt(ip[i], 10);
      if (isNaN(num)) return null;
      b.putByte(num);
    }
    return b.getBytes();
  };
  util.bytesFromIPv6 = function (ip) {
    var blanks = 0;
    ip = ip.split(":").filter(function (e) {
      return e.length === 0 && ++blanks, !0;
    });
    for (var zeros = (8 - ip.length + blanks) * 2, b = util.createBuffer(), i = 0; i < 8; ++i) {
      if (!ip[i] || ip[i].length === 0) {
        b.fillWithByte(0, zeros), zeros = 0;
        continue;
      }
      var bytes = util.hexToBytes(ip[i]);
      bytes.length < 2 && b.putByte(0), b.putBytes(bytes);
    }
    return b.getBytes();
  };
  util.bytesToIP = function (bytes) {
    return bytes.length === 4 ? util.bytesToIPv4(bytes) : bytes.length === 16 ? util.bytesToIPv6(bytes) : null;
  };
  util.bytesToIPv4 = function (bytes) {
    if (bytes.length !== 4) return null;
    for (var ip = [], i = 0; i < bytes.length; ++i) ip.push(bytes.charCodeAt(i));
    return ip.join(".");
  };
  util.bytesToIPv6 = function (bytes) {
    if (bytes.length !== 16) return null;
    for (var ip = [], zeroGroups = [], zeroMaxGroup = 0, i = 0; i < bytes.length; i += 2) {
      for (var hex = util.bytesToHex(bytes[i] + bytes[i + 1]); hex[0] === "0" && hex !== "0";) hex = hex.substr(1);
      if (hex === "0") {
        var last = zeroGroups[zeroGroups.length - 1],
          idx = ip.length;
        !last || idx !== last.end + 1 ? zeroGroups.push({
          start: idx,
          end: idx
        }) : (last.end = idx, last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start && (zeroMaxGroup = zeroGroups.length - 1));
      }
      ip.push(hex);
    }
    if (zeroGroups.length > 0) {
      var group = zeroGroups[zeroMaxGroup];
      group.end - group.start > 0 && (ip.splice(group.start, group.end - group.start + 1, ""), group.start === 0 && ip.unshift(""), group.end === 7 && ip.push(""));
    }
    return ip.join(":");
  };
  util.estimateCores = function (options, callback) {
    if (typeof options == "function" && (callback = options, options = {}), options = options || {}, "cores" in util && !options.update) return callback(null, util.cores);
    if (typeof navigator < "u" && "hardwareConcurrency" in navigator && navigator.hardwareConcurrency > 0) return util.cores = navigator.hardwareConcurrency, callback(null, util.cores);
    if (typeof Worker > "u") return util.cores = 1, callback(null, util.cores);
    if (typeof Blob > "u") return util.cores = 2, callback(null, util.cores);
    var blobUrl = URL.createObjectURL(new Blob(["(", function () {
      self.addEventListener("message", function (e) {
        for (var st = Date.now(), et = st + 4; Date.now() < et;);
        self.postMessage({
          st: st,
          et: et
        });
      });
    }.toString(), ")()"], {
      type: "application/javascript"
    }));
    sample([], 5, 16);
    function sample(max, samples, numWorkers) {
      if (samples === 0) {
        var avg = Math.floor(max.reduce(function (avg, x) {
          return avg + x;
        }, 0) / max.length);
        return util.cores = Math.max(1, avg), URL.revokeObjectURL(blobUrl), callback(null, util.cores);
      }
      map(numWorkers, function (err, results) {
        max.push(reduce(numWorkers, results)), sample(max, samples - 1, numWorkers);
      });
    }
    __name(sample, "sample");
    function map(numWorkers, callback) {
      for (var workers = [], results = [], i = 0; i < numWorkers; ++i) {
        var worker = new Worker(blobUrl);
        worker.addEventListener("message", function (e) {
          if (results.push(e.data), results.length === numWorkers) {
            for (var i = 0; i < numWorkers; ++i) workers[i].terminate();
            callback(null, results);
          }
        }), workers.push(worker);
      }
      for (var i = 0; i < numWorkers; ++i) workers[i].postMessage(i);
    }
    __name(map, "map");
    function reduce(numWorkers, results) {
      for (var overlaps = [], n = 0; n < numWorkers; ++n) for (var r1 = results[n], overlap = overlaps[n] = [], i = 0; i < numWorkers; ++i) if (n !== i) {
        var r2 = results[i];
        (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) && overlap.push(i);
      }
      return overlaps.reduce(function (max, overlap) {
        return Math.max(max, overlap.length);
      }, 0);
    }
    __name(reduce, "reduce");
  };
});