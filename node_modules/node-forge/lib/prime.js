var require_prime = __commonJSMin((exports, module) => {
  var forge = Ja();
  Ki();
  X9();
  lp();
  (function () {
    if (forge.prime) {
      module.exports = forge.prime;
      return;
    }
    var prime = module.exports = forge.prime = forge.prime || {},
      BigInteger = forge.jsbn.BigInteger,
      GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2],
      THIRTY = new BigInteger(null);
    THIRTY.fromInt(30);
    var op_or = __name(function (x, y) {
      return x | y;
    }, "op_or");
    prime.generateProbablePrime = function (bits, options, callback) {
      typeof options == "function" && (callback = options, options = {}), options = options || {};
      var algorithm = options.algorithm || "PRIMEINC";
      typeof algorithm == "string" && (algorithm = {
        name: algorithm
      }), algorithm.options = algorithm.options || {};
      var prng = options.prng || forge.random,
        rng = {
          nextBytes: __name(function (x) {
            for (var b = prng.getBytesSync(x.length), i = 0; i < x.length; ++i) x[i] = b.charCodeAt(i);
          }, "nextBytes")
        };
      if (algorithm.name === "PRIMEINC") return primeincFindPrime(bits, rng, algorithm.options, callback);
      throw new Error("Invalid prime generation algorithm: " + algorithm.name);
    };
    function primeincFindPrime(bits, rng, options, callback) {
      return "workers" in options ? primeincFindPrimeWithWorkers(bits, rng, options, callback) : primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
    }
    __name(primeincFindPrime, "primeincFindPrime");
    function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
      var num = generateRandom(bits, rng),
        deltaIdx = 0,
        mrTests = getMillerRabinTests(num.bitLength());
      "millerRabinTests" in options && (mrTests = options.millerRabinTests);
      var maxBlockTime = 10;
      "maxBlockTime" in options && (maxBlockTime = options.maxBlockTime), _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
    }
    __name(primeincFindPrimeWithoutWorkers, "primeincFindPrimeWithoutWorkers");
    function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
      var start = +new Date();
      do {
        if (num.bitLength() > bits && (num = generateRandom(bits, rng)), num.isProbablePrime(mrTests)) return callback(null, num);
        num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
      } while (maxBlockTime < 0 || +new Date() - start < maxBlockTime);
      forge.util.setImmediate(function () {
        _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
      });
    }
    __name(_primeinc, "_primeinc");
    function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
      if (typeof Worker > "u") return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
      var num = generateRandom(bits, rng),
        numWorkers = options.workers,
        workLoad = options.workLoad || 100,
        range = workLoad * 30 / 8,
        workerScript = options.workerScript || "forge/prime.worker.js";
      if (numWorkers === -1) return forge.util.estimateCores(function (err, cores) {
        err && (cores = 2), numWorkers = cores - 1, generate();
      });
      generate();
      function generate() {
        numWorkers = Math.max(1, numWorkers);
        for (var workers = [], i = 0; i < numWorkers; ++i) workers[i] = new Worker(workerScript);
        for (var running = numWorkers, i = 0; i < numWorkers; ++i) workers[i].addEventListener("message", workerMessage);
        var found = !1;
        function workerMessage(e) {
          if (!found) {
            --running;
            var data = e.data;
            if (data.found) {
              for (var i = 0; i < workers.length; ++i) workers[i].terminate();
              return found = !0, callback(null, new BigInteger(data.prime, 16));
            }
            num.bitLength() > bits && (num = generateRandom(bits, rng));
            var hex = num.toString(16);
            e.target.postMessage({
              hex: hex,
              workLoad: workLoad
            }), num.dAddOffset(range, 0);
          }
        }
        __name(workerMessage, "workerMessage");
      }
      __name(generate, "generate");
    }
    __name(primeincFindPrimeWithWorkers, "primeincFindPrimeWithWorkers");
    function generateRandom(bits, rng) {
      var num = new BigInteger(bits, rng),
        bits1 = bits - 1;
      return num.testBit(bits1) || num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num), num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0), num;
    }
    __name(generateRandom, "generateRandom");
    function getMillerRabinTests(bits) {
      return bits <= 100 ? 27 : bits <= 150 ? 18 : bits <= 200 ? 15 : bits <= 250 ? 12 : bits <= 300 ? 9 : bits <= 350 ? 8 : bits <= 400 ? 7 : bits <= 500 ? 6 : bits <= 600 ? 5 : bits <= 800 ? 4 : bits <= 1250 ? 3 : 2;
    }
    __name(getMillerRabinTests, "getMillerRabinTests");
  })();
});