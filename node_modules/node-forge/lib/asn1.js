var require_asn1 = __commonJSMin((exports, module) => {
  var forge = Ja();
  Ki();
  Tw();
  var asn1 = module.exports = forge.asn1 = forge.asn1 || {};
  asn1.Class = {
    UNIVERSAL: 0,
    APPLICATION: 64,
    CONTEXT_SPECIFIC: 128,
    PRIVATE: 192
  };
  asn1.Type = {
    NONE: 0,
    BOOLEAN: 1,
    INTEGER: 2,
    BITSTRING: 3,
    OCTETSTRING: 4,
    NULL: 5,
    OID: 6,
    ODESC: 7,
    EXTERNAL: 8,
    REAL: 9,
    ENUMERATED: 10,
    EMBEDDED: 11,
    UTF8: 12,
    ROID: 13,
    SEQUENCE: 16,
    SET: 17,
    PRINTABLESTRING: 19,
    IA5STRING: 22,
    UTCTIME: 23,
    GENERALIZEDTIME: 24,
    BMPSTRING: 30
  };
  asn1.create = function (tagClass, type, constructed, value, options) {
    if (forge.util.isArray(value)) {
      for (var tmp = [], i = 0; i < value.length; ++i) value[i] !== void 0 && tmp.push(value[i]);
      value = tmp;
    }
    var obj = {
      tagClass: tagClass,
      type: type,
      constructed: constructed,
      composed: constructed || forge.util.isArray(value),
      value: value
    };
    return options && "bitStringContents" in options && (obj.bitStringContents = options.bitStringContents, obj.original = asn1.copy(obj)), obj;
  };
  asn1.copy = function (obj, options) {
    var copy;
    if (forge.util.isArray(obj)) {
      copy = [];
      for (var i = 0; i < obj.length; ++i) copy.push(asn1.copy(obj[i], options));
      return copy;
    }
    return typeof obj == "string" ? obj : (copy = {
      tagClass: obj.tagClass,
      type: obj.type,
      constructed: obj.constructed,
      composed: obj.composed,
      value: asn1.copy(obj.value, options)
    }, options && !options.excludeBitStringContents && (copy.bitStringContents = obj.bitStringContents), copy);
  };
  asn1.equals = function (obj1, obj2, options) {
    if (forge.util.isArray(obj1)) {
      if (!forge.util.isArray(obj2) || obj1.length !== obj2.length) return !1;
      for (var i = 0; i < obj1.length; ++i) if (!asn1.equals(obj1[i], obj2[i])) return !1;
      return !0;
    }
    if (typeof obj1 != typeof obj2) return !1;
    if (typeof obj1 == "string") return obj1 === obj2;
    var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);
    return options && options.includeBitStringContents && (equal = equal && obj1.bitStringContents === obj2.bitStringContents), equal;
  };
  asn1.getBerValueLength = function (b) {
    var b2 = b.getByte();
    if (b2 !== 128) {
      var length,
        longForm = b2 & 128;
      return longForm ? length = b.getInt((b2 & 127) << 3) : length = b2, length;
    }
  };
  function _checkBufferLength(bytes, remaining, n) {
    if (n > remaining) {
      var error = new Error("Too few bytes to parse DER.");
      throw error.available = bytes.length(), error.remaining = remaining, error.requested = n, error;
    }
  }
  __name(_checkBufferLength, "_checkBufferLength");
  var _getValueLength = __name(function (bytes, remaining) {
    var b2 = bytes.getByte();
    if (remaining--, b2 !== 128) {
      var length,
        longForm = b2 & 128;
      if (!longForm) length = b2;else {
        var longFormBytes = b2 & 127;
        _checkBufferLength(bytes, remaining, longFormBytes), length = bytes.getInt(longFormBytes << 3);
      }
      if (length < 0) throw new Error("Negative length: " + length);
      return length;
    }
  }, "_getValueLength");
  asn1.fromDer = function (bytes, options) {
    options === void 0 && (options = {
      strict: !0,
      parseAllBytes: !0,
      decodeBitStrings: !0
    }), typeof options == "boolean" && (options = {
      strict: options,
      parseAllBytes: !0,
      decodeBitStrings: !0
    }), "strict" in options || (options.strict = !0), "parseAllBytes" in options || (options.parseAllBytes = !0), "decodeBitStrings" in options || (options.decodeBitStrings = !0), typeof bytes == "string" && (bytes = forge.util.createBuffer(bytes));
    var byteCount = bytes.length(),
      value = _fromDer(bytes, bytes.length(), 0, options);
    if (options.parseAllBytes && bytes.length() !== 0) {
      var error = new Error("Unparsed DER bytes remain after ASN.1 parsing.");
      throw error.byteCount = byteCount, error.remaining = bytes.length(), error;
    }
    return value;
  };
  function _fromDer(bytes, remaining, depth, options) {
    var start;
    _checkBufferLength(bytes, remaining, 2);
    var b1 = bytes.getByte();
    remaining--;
    var tagClass = b1 & 192,
      type = b1 & 31;
    start = bytes.length();
    var length = _getValueLength(bytes, remaining);
    if (remaining -= start - bytes.length(), length !== void 0 && length > remaining) {
      if (options.strict) {
        var error = new Error("Too few bytes to read ASN.1 value.");
        throw error.available = bytes.length(), error.remaining = remaining, error.requested = length, error;
      }
      length = remaining;
    }
    var value,
      bitStringContents,
      constructed = (b1 & 32) === 32;
    if (constructed) if (value = [], length === void 0) for (;;) {
      if (_checkBufferLength(bytes, remaining, 2), bytes.bytes(2) === "\0\0") {
        bytes.getBytes(2), remaining -= 2;
        break;
      }
      start = bytes.length(), value.push(_fromDer(bytes, remaining, depth + 1, options)), remaining -= start - bytes.length();
    } else for (; length > 0;) start = bytes.length(), value.push(_fromDer(bytes, length, depth + 1, options)), remaining -= start - bytes.length(), length -= start - bytes.length();
    if (value === void 0 && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING && (bitStringContents = bytes.bytes(length)), value === void 0 && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING && length > 1) {
      var savedRead = bytes.read,
        savedRemaining = remaining,
        unused = 0;
      if (type === asn1.Type.BITSTRING && (_checkBufferLength(bytes, remaining, 1), unused = bytes.getByte(), remaining--), unused === 0) try {
        start = bytes.length();
        var subOptions = {
            strict: !0,
            decodeBitStrings: !0
          },
          composed = _fromDer(bytes, remaining, depth + 1, subOptions),
          used = start - bytes.length();
        remaining -= used, type == asn1.Type.BITSTRING && used++;
        var tc = composed.tagClass;
        used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC) && (value = [composed]);
      } catch {}
      value === void 0 && (bytes.read = savedRead, remaining = savedRemaining);
    }
    if (value === void 0) {
      if (length === void 0) {
        if (options.strict) throw new Error("Non-constructed ASN.1 object of indefinite length.");
        length = remaining;
      }
      if (type === asn1.Type.BMPSTRING) for (value = ""; length > 0; length -= 2) _checkBufferLength(bytes, remaining, 2), value += String.fromCharCode(bytes.getInt16()), remaining -= 2;else value = bytes.getBytes(length), remaining -= length;
    }
    var asn1Options = bitStringContents === void 0 ? null : {
      bitStringContents: bitStringContents
    };
    return asn1.create(tagClass, type, constructed, value, asn1Options);
  }
  __name(_fromDer, "_fromDer");
  asn1.toDer = function (obj) {
    var bytes = forge.util.createBuffer(),
      b1 = obj.tagClass | obj.type,
      value = forge.util.createBuffer(),
      useBitStringContents = !1;
    if ("bitStringContents" in obj && (useBitStringContents = !0, obj.original && (useBitStringContents = asn1.equals(obj, obj.original))), useBitStringContents) value.putBytes(obj.bitStringContents);else if (obj.composed) {
      obj.constructed ? b1 |= 32 : value.putByte(0);
      for (var i = 0; i < obj.value.length; ++i) obj.value[i] !== void 0 && value.putBuffer(asn1.toDer(obj.value[i]));
    } else if (obj.type === asn1.Type.BMPSTRING) for (var i = 0; i < obj.value.length; ++i) value.putInt16(obj.value.charCodeAt(i));else obj.type === asn1.Type.INTEGER && obj.value.length > 1 && (obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 128) === 0 || obj.value.charCodeAt(0) === 255 && (obj.value.charCodeAt(1) & 128) === 128) ? value.putBytes(obj.value.substr(1)) : value.putBytes(obj.value);
    if (bytes.putByte(b1), value.length() <= 127) bytes.putByte(value.length() & 127);else {
      var len = value.length(),
        lenBytes = "";
      do lenBytes += String.fromCharCode(len & 255), len = len >>> 8; while (len > 0);
      bytes.putByte(lenBytes.length | 128);
      for (var i = lenBytes.length - 1; i >= 0; --i) bytes.putByte(lenBytes.charCodeAt(i));
    }
    return bytes.putBuffer(value), bytes;
  };
  asn1.oidToDer = function (oid) {
    var values = oid.split("."),
      bytes = forge.util.createBuffer();
    bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
    for (var last, valueBytes, value, b, i = 2; i < values.length; ++i) {
      last = !0, valueBytes = [], value = parseInt(values[i], 10);
      do b = value & 127, value = value >>> 7, last || (b |= 128), valueBytes.push(b), last = !1; while (value > 0);
      for (var n = valueBytes.length - 1; n >= 0; --n) bytes.putByte(valueBytes[n]);
    }
    return bytes;
  };
  asn1.derToOid = function (bytes) {
    var oid;
    typeof bytes == "string" && (bytes = forge.util.createBuffer(bytes));
    var b = bytes.getByte();
    oid = Math.floor(b / 40) + "." + b % 40;
    for (var value = 0; bytes.length() > 0;) b = bytes.getByte(), value = value << 7, b & 128 ? value += b & 127 : (oid += "." + (value + b), value = 0);
    return oid;
  };
  asn1.utcTimeToDate = function (utc) {
    var date = new Date(),
      year = parseInt(utc.substr(0, 2), 10);
    year = year >= 50 ? 1900 + year : 2e3 + year;
    var MM = parseInt(utc.substr(2, 2), 10) - 1,
      DD = parseInt(utc.substr(4, 2), 10),
      hh = parseInt(utc.substr(6, 2), 10),
      mm = parseInt(utc.substr(8, 2), 10),
      ss = 0;
    if (utc.length > 11) {
      var c = utc.charAt(10),
        end = 10;
      c !== "+" && c !== "-" && (ss = parseInt(utc.substr(10, 2), 10), end += 2);
    }
    if (date.setUTCFullYear(year, MM, DD), date.setUTCHours(hh, mm, ss, 0), end && (c = utc.charAt(end), c === "+" || c === "-")) {
      var hhoffset = parseInt(utc.substr(end + 1, 2), 10),
        mmoffset = parseInt(utc.substr(end + 4, 2), 10),
        offset = hhoffset * 60 + mmoffset;
      offset *= 6e4, c === "+" ? date.setTime(+date - offset) : date.setTime(+date + offset);
    }
    return date;
  };
  asn1.generalizedTimeToDate = function (gentime) {
    var date = new Date(),
      YYYY = parseInt(gentime.substr(0, 4), 10),
      MM = parseInt(gentime.substr(4, 2), 10) - 1,
      DD = parseInt(gentime.substr(6, 2), 10),
      hh = parseInt(gentime.substr(8, 2), 10),
      mm = parseInt(gentime.substr(10, 2), 10),
      ss = parseInt(gentime.substr(12, 2), 10),
      fff = 0,
      offset = 0,
      isUTC = !1;
    gentime.charAt(gentime.length - 1) === "Z" && (isUTC = !0);
    var end = gentime.length - 5,
      c = gentime.charAt(end);
    if (c === "+" || c === "-") {
      var hhoffset = parseInt(gentime.substr(end + 1, 2), 10),
        mmoffset = parseInt(gentime.substr(end + 4, 2), 10);
      offset = hhoffset * 60 + mmoffset, offset *= 6e4, c === "+" && (offset *= -1), isUTC = !0;
    }
    return gentime.charAt(14) === "." && (fff = parseFloat(gentime.substr(14), 10) * 1e3), isUTC ? (date.setUTCFullYear(YYYY, MM, DD), date.setUTCHours(hh, mm, ss, fff), date.setTime(+date + offset)) : (date.setFullYear(YYYY, MM, DD), date.setHours(hh, mm, ss, fff)), date;
  };
  asn1.dateToUtcTime = function (date) {
    if (typeof date == "string") return date;
    var rval = "",
      format = [];
    format.push(("" + date.getUTCFullYear()).substr(2)), format.push("" + (date.getUTCMonth() + 1)), format.push("" + date.getUTCDate()), format.push("" + date.getUTCHours()), format.push("" + date.getUTCMinutes()), format.push("" + date.getUTCSeconds());
    for (var i = 0; i < format.length; ++i) format[i].length < 2 && (rval += "0"), rval += format[i];
    return rval += "Z", rval;
  };
  asn1.dateToGeneralizedTime = function (date) {
    if (typeof date == "string") return date;
    var rval = "",
      format = [];
    format.push("" + date.getUTCFullYear()), format.push("" + (date.getUTCMonth() + 1)), format.push("" + date.getUTCDate()), format.push("" + date.getUTCHours()), format.push("" + date.getUTCMinutes()), format.push("" + date.getUTCSeconds());
    for (var i = 0; i < format.length; ++i) format[i].length < 2 && (rval += "0"), rval += format[i];
    return rval += "Z", rval;
  };
  asn1.integerToDer = function (x) {
    var rval = forge.util.createBuffer();
    if (x >= -128 && x < 128) return rval.putSignedInt(x, 8);
    if (x >= -32768 && x < 32768) return rval.putSignedInt(x, 16);
    if (x >= -8388608 && x < 8388608) return rval.putSignedInt(x, 24);
    if (x >= -2147483648 && x < 2147483648) return rval.putSignedInt(x, 32);
    var error = new Error("Integer too large; max is 32-bits.");
    throw error.integer = x, error;
  };
  asn1.derToInteger = function (bytes) {
    typeof bytes == "string" && (bytes = forge.util.createBuffer(bytes));
    var n = bytes.length() * 8;
    if (n > 32) throw new Error("Integer too large; max is 32-bits.");
    return bytes.getSignedInt(n);
  };
  asn1.validate = function (obj, v, capture, errors) {
    var rval = !1;
    if ((obj.tagClass === v.tagClass || typeof v.tagClass > "u") && (obj.type === v.type || typeof v.type > "u")) {
      if (obj.constructed === v.constructed || typeof v.constructed > "u") {
        if (rval = !0, v.value && forge.util.isArray(v.value)) for (var j = 0, i = 0; rval && i < v.value.length; ++i) rval = v.value[i].optional || !1, obj.value[j] && (rval = asn1.validate(obj.value[j], v.value[i], capture, errors), rval ? ++j : v.value[i].optional && (rval = !0)), !rval && errors && errors.push("[" + v.name + '] Tag class "' + v.tagClass + '", type "' + v.type + '" expected value length "' + v.value.length + '", got "' + obj.value.length + '"');
        if (rval && capture && (v.capture && (capture[v.capture] = obj.value), v.captureAsn1 && (capture[v.captureAsn1] = obj), v.captureBitStringContents && "bitStringContents" in obj && (capture[v.captureBitStringContents] = obj.bitStringContents), v.captureBitStringValue && "bitStringContents" in obj)) {
          var value;
          if (obj.bitStringContents.length < 2) capture[v.captureBitStringValue] = "";else {
            var unused = obj.bitStringContents.charCodeAt(0);
            if (unused !== 0) throw new Error("captureBitStringValue only supported for zero unused bits");
            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
          }
        }
      } else errors && errors.push("[" + v.name + '] Expected constructed "' + v.constructed + '", got "' + obj.constructed + '"');
    } else errors && (obj.tagClass !== v.tagClass && errors.push("[" + v.name + '] Expected tag class "' + v.tagClass + '", got "' + obj.tagClass + '"'), obj.type !== v.type && errors.push("[" + v.name + '] Expected type "' + v.type + '", got "' + obj.type + '"'));
    return rval;
  };
  var _nonLatinRegex = /[^\\u0000-\\u00ff]/;
  asn1.prettyPrint = function (obj, level, indentation) {
    var rval = "";
    level = level || 0, indentation = indentation || 2, level > 0 && (rval += `
`);
    for (var indent = "", i = 0; i < level * indentation; ++i) indent += " ";
    switch (rval += indent + "Tag: ", obj.tagClass) {
      case asn1.Class.UNIVERSAL:
        rval += "Universal:";
        break;
      case asn1.Class.APPLICATION:
        rval += "Application:";
        break;
      case asn1.Class.CONTEXT_SPECIFIC:
        rval += "Context-Specific:";
        break;
      case asn1.Class.PRIVATE:
        rval += "Private:";
        break;
    }
    if (obj.tagClass === asn1.Class.UNIVERSAL) switch (rval += obj.type, obj.type) {
      case asn1.Type.NONE:
        rval += " (None)";
        break;
      case asn1.Type.BOOLEAN:
        rval += " (Boolean)";
        break;
      case asn1.Type.INTEGER:
        rval += " (Integer)";
        break;
      case asn1.Type.BITSTRING:
        rval += " (Bit string)";
        break;
      case asn1.Type.OCTETSTRING:
        rval += " (Octet string)";
        break;
      case asn1.Type.NULL:
        rval += " (Null)";
        break;
      case asn1.Type.OID:
        rval += " (Object Identifier)";
        break;
      case asn1.Type.ODESC:
        rval += " (Object Descriptor)";
        break;
      case asn1.Type.EXTERNAL:
        rval += " (External or Instance of)";
        break;
      case asn1.Type.REAL:
        rval += " (Real)";
        break;
      case asn1.Type.ENUMERATED:
        rval += " (Enumerated)";
        break;
      case asn1.Type.EMBEDDED:
        rval += " (Embedded PDV)";
        break;
      case asn1.Type.UTF8:
        rval += " (UTF8)";
        break;
      case asn1.Type.ROID:
        rval += " (Relative Object Identifier)";
        break;
      case asn1.Type.SEQUENCE:
        rval += " (Sequence)";
        break;
      case asn1.Type.SET:
        rval += " (Set)";
        break;
      case asn1.Type.PRINTABLESTRING:
        rval += " (Printable String)";
        break;
      case asn1.Type.IA5String:
        rval += " (IA5String (ASCII))";
        break;
      case asn1.Type.UTCTIME:
        rval += " (UTC time)";
        break;
      case asn1.Type.GENERALIZEDTIME:
        rval += " (Generalized time)";
        break;
      case asn1.Type.BMPSTRING:
        rval += " (BMP String)";
        break;
    } else rval += obj.type;
    if (rval += `
`, rval += indent + "Constructed: " + obj.constructed + `
`, obj.composed) {
      for (var subvalues = 0, sub = "", i = 0; i < obj.value.length; ++i) obj.value[i] !== void 0 && (subvalues += 1, sub += asn1.prettyPrint(obj.value[i], level + 1, indentation), i + 1 < obj.value.length && (sub += ","));
      rval += indent + "Sub values: " + subvalues + sub;
    } else {
      if (rval += indent + "Value: ", obj.type === asn1.Type.OID) {
        var oid = asn1.derToOid(obj.value);
        rval += oid, forge.pki && forge.pki.oids && oid in forge.pki.oids && (rval += " (" + forge.pki.oids[oid] + ") ");
      }
      if (obj.type === asn1.Type.INTEGER) try {
        rval += asn1.derToInteger(obj.value);
      } catch {
        rval += "0x" + forge.util.bytesToHex(obj.value);
      } else if (obj.type === asn1.Type.BITSTRING) {
        if (obj.value.length > 1 ? rval += "0x" + forge.util.bytesToHex(obj.value.slice(1)) : rval += "(none)", obj.value.length > 0) {
          var unused = obj.value.charCodeAt(0);
          unused == 1 ? rval += " (1 unused bit shown)" : unused > 1 && (rval += " (" + unused + " unused bits shown)");
        }
      } else if (obj.type === asn1.Type.OCTETSTRING) _nonLatinRegex.test(obj.value) || (rval += "(" + obj.value + ") "), rval += "0x" + forge.util.bytesToHex(obj.value);else if (obj.type === asn1.Type.UTF8) try {
        rval += forge.util.decodeUtf8(obj.value);
      } catch (e) {
        if (e.message === "URI malformed") rval += "0x" + forge.util.bytesToHex(obj.value) + " (malformed UTF8)";else throw e;
      } else obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String ? rval += obj.value : _nonLatinRegex.test(obj.value) ? rval += "0x" + forge.util.bytesToHex(obj.value) : obj.value.length === 0 ? rval += "[null]" : rval += obj.value;
    }
    return rval;
  };
});