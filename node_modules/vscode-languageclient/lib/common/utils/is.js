var require_is = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.asPromise = exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
  function boolean(value) {
    return value === !0 || value === !1;
  }
  __name(boolean, "boolean");
  exports.boolean = boolean;
  function string(value) {
    return typeof value == "string" || value instanceof String;
  }
  __name(string, "string");
  exports.string = string;
  function number(value) {
    return typeof value == "number" || value instanceof Number;
  }
  __name(number, "number");
  exports.number = number;
  function error(value) {
    return value instanceof Error;
  }
  __name(error, "error");
  exports.error = error;
  function func(value) {
    return typeof value == "function";
  }
  __name(func, "func");
  exports.func = func;
  function array(value) {
    return Array.isArray(value);
  }
  __name(array, "array");
  exports.array = array;
  function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
  }
  __name(stringArray, "stringArray");
  exports.stringArray = stringArray;
  function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
  }
  __name(typedArray, "typedArray");
  exports.typedArray = typedArray;
  function thenable(value) {
    return value && func(value.then);
  }
  __name(thenable, "thenable");
  exports.thenable = thenable;
  function asPromise(value) {
    return value instanceof Promise ? value : thenable(value) ? new Promise((resolve, reject) => {
      value.then(resolved => resolve(resolved), error => reject(error));
    }) : Promise.resolve(value);
  }
  __name(asPromise, "asPromise");
  exports.asPromise = asPromise;
});