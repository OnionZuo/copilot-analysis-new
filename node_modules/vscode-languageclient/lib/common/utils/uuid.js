var require_uuid = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
  var _ValueUUID = class _ValueUUID {
    constructor(_value) {
      this._value = _value;
    }
    asHex() {
      return this._value;
    }
    equals(other) {
      return this.asHex() === other.asHex();
    }
  };
  __name(_ValueUUID, "ValueUUID");
  var ValueUUID = _ValueUUID,
    _V4UUID = class _V4UUID extends ValueUUID {
      static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
      }
      static _randomHex() {
        return _V4UUID._oneOf(_V4UUID._chars);
      }
      constructor() {
        super([_V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), "-", _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), "-", "4", _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), "-", _V4UUID._oneOf(_V4UUID._timeHighBits), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), "-", _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex(), _V4UUID._randomHex()].join(""));
      }
    };
  __name(_V4UUID, "V4UUID");
  var V4UUID = _V4UUID;
  V4UUID._chars = ["0", "1", "2", "3", "4", "5", "6", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
  V4UUID._timeHighBits = ["8", "9", "a", "b"];
  exports.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
  function v4() {
    return new V4UUID();
  }
  __name(v4, "v4");
  exports.v4 = v4;
  var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  function isUUID(value) {
    return _UUIDPattern.test(value);
  }
  __name(isUUID, "isUUID");
  exports.isUUID = isUUID;
  function parse(value) {
    if (!isUUID(value)) throw new Error("invalid uuid");
    return new ValueUUID(value);
  }
  __name(parse, "parse");
  exports.parse = parse;
  function generateUuid() {
    return v4().asHex();
  }
  __name(generateUuid, "generateUuid");
  exports.generateUuid = generateUuid;
});