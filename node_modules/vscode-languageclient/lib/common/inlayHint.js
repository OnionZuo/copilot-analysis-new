var require_inlayHint = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.InlayHintsFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _InlayHintsFeature = class _InlayHintsFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.InlayHintRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let inlayHint = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "inlayHint");
        inlayHint.dynamicRegistration = !0, inlayHint.resolveSupport = {
          properties: ["tooltip", "textEdits", "label.tooltip", "label.location", "label.command"]
        }, (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "inlayHint").refreshSupport = !0;
      }
      initialize(capabilities, documentSelector) {
        this._client.onRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type, async () => {
          for (let provider of this.getAllProviders()) provider.onDidChangeInlayHints.fire();
        });
        let [id, options] = this.getRegistration(documentSelector, capabilities.inlayHintProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          eventEmitter = new vscode_1.EventEmitter(),
          provider = {
            onDidChangeInlayHints: eventEmitter.event,
            provideInlayHints: __name((document, viewPort, token) => {
              let client = this._client,
                provideInlayHints = __name(async (document, viewPort, token) => {
                  let requestParams = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    range: client.code2ProtocolConverter.asRange(viewPort)
                  };
                  try {
                    let values = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, requestParams, token);
                    return token.isCancellationRequested ? null : client.protocol2CodeConverter.asInlayHints(values, token);
                  } catch (error) {
                    return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, token, error, null);
                  }
                }, "provideInlayHints"),
                middleware = client.middleware;
              return middleware.provideInlayHints ? middleware.provideInlayHints(document, viewPort, token, provideInlayHints) : provideInlayHints(document, viewPort, token);
            }, "provideInlayHints")
          };
        return provider.resolveInlayHint = options.resolveProvider === !0 ? (hint, token) => {
          let client = this._client,
            resolveInlayHint = __name(async (item, token) => {
              try {
                let value = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, client.code2ProtocolConverter.asInlayHint(item), token);
                if (token.isCancellationRequested) return null;
                let result = client.protocol2CodeConverter.asInlayHint(value, token);
                return token.isCancellationRequested ? null : result;
              } catch (error) {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, token, error, null);
              }
            }, "resolveInlayHint"),
            middleware = client.middleware;
          return middleware.resolveInlayHint ? middleware.resolveInlayHint(hint, token, resolveInlayHint) : resolveInlayHint(hint, token);
        } : void 0, [this.registerProvider(selector, provider), {
          provider: provider,
          onDidChangeInlayHints: eventEmitter
        }];
      }
      registerProvider(selector, provider) {
        return vscode_1.languages.registerInlayHintsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
    };
  __name(_InlayHintsFeature, "InlayHintsFeature");
  var InlayHintsFeature = _InlayHintsFeature;
  exports.InlayHintsFeature = InlayHintsFeature;
});