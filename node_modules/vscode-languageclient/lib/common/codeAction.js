var require_codeAction = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.CodeActionFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    UUID = yo(),
    features_1 = Oi(),
    _CodeActionFeature = class _CodeActionFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.CodeActionRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let cap = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "codeAction");
        cap.dynamicRegistration = !0, cap.isPreferredSupport = !0, cap.disabledSupport = !0, cap.dataSupport = !0, cap.resolveSupport = {
          properties: ["edit"]
        }, cap.codeActionLiteralSupport = {
          codeActionKind: {
            valueSet: [vscode_languageserver_protocol_1.CodeActionKind.Empty, vscode_languageserver_protocol_1.CodeActionKind.QuickFix, vscode_languageserver_protocol_1.CodeActionKind.Refactor, vscode_languageserver_protocol_1.CodeActionKind.RefactorExtract, vscode_languageserver_protocol_1.CodeActionKind.RefactorInline, vscode_languageserver_protocol_1.CodeActionKind.RefactorRewrite, vscode_languageserver_protocol_1.CodeActionKind.Source, vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports]
          }
        }, cap.honorsChangeAnnotations = !0;
      }
      initialize(capabilities, documentSelector) {
        let options = this.getRegistrationOptions(documentSelector, capabilities.codeActionProvider);
        options && this.register({
          id: UUID.generateUuid(),
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideCodeActions: __name((document, range, context, token) => {
              let client = this._client,
                _provideCodeActions = __name(async (document, range, context, token) => {
                  let params = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    range: client.code2ProtocolConverter.asRange(range),
                    context: client.code2ProtocolConverter.asCodeActionContextSync(context)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, params, token).then(values => token.isCancellationRequested || values === null || values === void 0 ? null : client.protocol2CodeConverter.asCodeActionResult(values, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, token, error, null));
                }, "_provideCodeActions"),
                middleware = client.middleware;
              return middleware.provideCodeActions ? middleware.provideCodeActions(document, range, context, token, _provideCodeActions) : _provideCodeActions(document, range, context, token);
            }, "provideCodeActions"),
            resolveCodeAction: options.resolveProvider ? (item, token) => {
              let client = this._client,
                middleware = this._client.middleware,
                resolveCodeAction = __name(async (item, token) => client.sendRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, client.code2ProtocolConverter.asCodeActionSync(item), token).then(result => token.isCancellationRequested ? item : client.protocol2CodeConverter.asCodeAction(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, token, error, item)), "resolveCodeAction");
              return middleware.resolveCodeAction ? middleware.resolveCodeAction(item, token, resolveCodeAction) : resolveCodeAction(item, token);
            } : void 0
          };
        return [vscode_1.languages.registerCodeActionsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, options.codeActionKinds ? {
          providedCodeActionKinds: this._client.protocol2CodeConverter.asCodeActionKinds(options.codeActionKinds)
        } : void 0), provider];
      }
    };
  __name(_CodeActionFeature, "CodeActionFeature");
  var CodeActionFeature = _CodeActionFeature;
  exports.CodeActionFeature = CodeActionFeature;
});