var require_colorProvider = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.ColorProviderFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _ColorProviderFeature = class _ColorProviderFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentColorRequest.type);
      }
      fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "colorProvider").dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.colorProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideColorPresentations: __name((color, context, token) => {
              let client = this._client,
                provideColorPresentations = __name((color, context, token) => {
                  let requestParams = {
                    color: color,
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),
                    range: client.code2ProtocolConverter.asRange(context.range)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then(result => token.isCancellationRequested ? null : this._client.protocol2CodeConverter.asColorPresentations(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, token, error, null));
                }, "provideColorPresentations"),
                middleware = client.middleware;
              return middleware.provideColorPresentations ? middleware.provideColorPresentations(color, context, token, provideColorPresentations) : provideColorPresentations(color, context, token);
            }, "provideColorPresentations"),
            provideDocumentColors: __name((document, token) => {
              let client = this._client,
                provideDocumentColors = __name((document, token) => {
                  let requestParams = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then(result => token.isCancellationRequested ? null : this._client.protocol2CodeConverter.asColorInformations(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, token, error, null));
                }, "provideDocumentColors"),
                middleware = client.middleware;
              return middleware.provideDocumentColors ? middleware.provideDocumentColors(document, token, provideDocumentColors) : provideDocumentColors(document, token);
            }, "provideDocumentColors")
          };
        return [vscode_1.languages.registerColorProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
      }
    };
  __name(_ColorProviderFeature, "ColorProviderFeature");
  var ColorProviderFeature = _ColorProviderFeature;
  exports.ColorProviderFeature = ColorProviderFeature;
});