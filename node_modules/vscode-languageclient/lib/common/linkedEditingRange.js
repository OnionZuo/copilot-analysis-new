var require_linkedEditingRange = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.LinkedEditingFeature = void 0;
  var code = require("vscode"),
    proto = Un(),
    features_1 = Oi(),
    _LinkedEditingFeature = class _LinkedEditingFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, proto.LinkedEditingRangeRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let linkedEditingSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "linkedEditingRange");
        linkedEditingSupport.dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.linkedEditingRangeProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideLinkedEditingRanges: __name((document, position, token) => {
              let client = this._client,
                provideLinkedEditing = __name((document, position, token) => client.sendRequest(proto.LinkedEditingRangeRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asLinkedEditingRanges(result, token), error => client.handleFailedRequest(proto.LinkedEditingRangeRequest.type, token, error, null)), "provideLinkedEditing"),
                middleware = client.middleware;
              return middleware.provideLinkedEditingRange ? middleware.provideLinkedEditingRange(document, position, token, provideLinkedEditing) : provideLinkedEditing(document, position, token);
            }, "provideLinkedEditingRanges")
          };
        return [this.registerProvider(selector, provider), provider];
      }
      registerProvider(selector, provider) {
        return code.languages.registerLinkedEditingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
    };
  __name(_LinkedEditingFeature, "LinkedEditingFeature");
  var LinkedEditingFeature = _LinkedEditingFeature;
  exports.LinkedEditingFeature = LinkedEditingFeature;
});