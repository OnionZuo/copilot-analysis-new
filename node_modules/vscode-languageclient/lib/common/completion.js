var require_completion = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.CompletionItemFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    UUID = yo(),
    SupportedCompletionItemKinds = [vscode_languageserver_protocol_1.CompletionItemKind.Text, vscode_languageserver_protocol_1.CompletionItemKind.Method, vscode_languageserver_protocol_1.CompletionItemKind.Function, vscode_languageserver_protocol_1.CompletionItemKind.Constructor, vscode_languageserver_protocol_1.CompletionItemKind.Field, vscode_languageserver_protocol_1.CompletionItemKind.Variable, vscode_languageserver_protocol_1.CompletionItemKind.Class, vscode_languageserver_protocol_1.CompletionItemKind.Interface, vscode_languageserver_protocol_1.CompletionItemKind.Module, vscode_languageserver_protocol_1.CompletionItemKind.Property, vscode_languageserver_protocol_1.CompletionItemKind.Unit, vscode_languageserver_protocol_1.CompletionItemKind.Value, vscode_languageserver_protocol_1.CompletionItemKind.Enum, vscode_languageserver_protocol_1.CompletionItemKind.Keyword, vscode_languageserver_protocol_1.CompletionItemKind.Snippet, vscode_languageserver_protocol_1.CompletionItemKind.Color, vscode_languageserver_protocol_1.CompletionItemKind.File, vscode_languageserver_protocol_1.CompletionItemKind.Reference, vscode_languageserver_protocol_1.CompletionItemKind.Folder, vscode_languageserver_protocol_1.CompletionItemKind.EnumMember, vscode_languageserver_protocol_1.CompletionItemKind.Constant, vscode_languageserver_protocol_1.CompletionItemKind.Struct, vscode_languageserver_protocol_1.CompletionItemKind.Event, vscode_languageserver_protocol_1.CompletionItemKind.Operator, vscode_languageserver_protocol_1.CompletionItemKind.TypeParameter],
    _CompletionItemFeature = class _CompletionItemFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.CompletionRequest.type), this.labelDetailsSupport = new Map();
      }
      fillClientCapabilities(capabilities) {
        let completion = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "completion");
        completion.dynamicRegistration = !0, completion.contextSupport = !0, completion.completionItem = {
          snippetSupport: !0,
          commitCharactersSupport: !0,
          documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText],
          deprecatedSupport: !0,
          preselectSupport: !0,
          tagSupport: {
            valueSet: [vscode_languageserver_protocol_1.CompletionItemTag.Deprecated]
          },
          insertReplaceSupport: !0,
          resolveSupport: {
            properties: ["documentation", "detail", "additionalTextEdits"]
          },
          insertTextModeSupport: {
            valueSet: [vscode_languageserver_protocol_1.InsertTextMode.asIs, vscode_languageserver_protocol_1.InsertTextMode.adjustIndentation]
          },
          labelDetailsSupport: !0
        }, completion.insertTextMode = vscode_languageserver_protocol_1.InsertTextMode.adjustIndentation, completion.completionItemKind = {
          valueSet: SupportedCompletionItemKinds
        }, completion.completionList = {
          itemDefaults: ["commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data"]
        };
      }
      initialize(capabilities, documentSelector) {
        let options = this.getRegistrationOptions(documentSelector, capabilities.completionProvider);
        options && this.register({
          id: UUID.generateUuid(),
          registerOptions: options
        });
      }
      registerLanguageProvider(options, id) {
        var _a, _b;
        this.labelDetailsSupport.set(id, !!((_a = options.completionItem) != null && _a.labelDetailsSupport));
        let triggerCharacters = (_b = options.triggerCharacters) != null ? _b : [],
          defaultCommitCharacters = options.allCommitCharacters,
          selector = options.documentSelector,
          provider = {
            provideCompletionItems: __name((document, position, token, context) => {
              let client = this._client,
                middleware = this._client.middleware,
                provideCompletionItems = __name((document, position, context, token) => client.sendRequest(vscode_languageserver_protocol_1.CompletionRequest.type, client.code2ProtocolConverter.asCompletionParams(document, position, context), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asCompletionResult(result, defaultCommitCharacters, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CompletionRequest.type, token, error, null)), "provideCompletionItems");
              return middleware.provideCompletionItem ? middleware.provideCompletionItem(document, position, context, token, provideCompletionItems) : provideCompletionItems(document, position, context, token);
            }, "provideCompletionItems"),
            resolveCompletionItem: options.resolveProvider ? (item, token) => {
              let client = this._client,
                middleware = this._client.middleware,
                resolveCompletionItem = __name((item, token) => client.sendRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, client.code2ProtocolConverter.asCompletionItem(item, !!this.labelDetailsSupport.get(id)), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asCompletionItem(result), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, token, error, item)), "resolveCompletionItem");
              return middleware.resolveCompletionItem ? middleware.resolveCompletionItem(item, token, resolveCompletionItem) : resolveCompletionItem(item, token);
            } : void 0
          };
        return [vscode_1.languages.registerCompletionItemProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, ...triggerCharacters), provider];
      }
    };
  __name(_CompletionItemFeature, "CompletionItemFeature");
  var CompletionItemFeature = _CompletionItemFeature;
  exports.CompletionItemFeature = CompletionItemFeature;
});