var require_typeHierarchy = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.TypeHierarchyFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _TypeHierarchyProvider = class _TypeHierarchyProvider {
      constructor(client) {
        this.client = client, this.middleware = client.middleware;
      }
      prepareTypeHierarchy(document, position, token) {
        let client = this.client,
          middleware = this.middleware,
          prepareTypeHierarchy = __name((document, position, token) => {
            let params = client.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asTypeHierarchyItems(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, token, error, null));
          }, "prepareTypeHierarchy");
        return middleware.prepareTypeHierarchy ? middleware.prepareTypeHierarchy(document, position, token, prepareTypeHierarchy) : prepareTypeHierarchy(document, position, token);
      }
      provideTypeHierarchySupertypes(item, token) {
        let client = this.client,
          middleware = this.middleware,
          provideTypeHierarchySupertypes = __name((item, token) => {
            let params = {
              item: client.code2ProtocolConverter.asTypeHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asTypeHierarchyItems(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type, token, error, null));
          }, "provideTypeHierarchySupertypes");
        return middleware.provideTypeHierarchySupertypes ? middleware.provideTypeHierarchySupertypes(item, token, provideTypeHierarchySupertypes) : provideTypeHierarchySupertypes(item, token);
      }
      provideTypeHierarchySubtypes(item, token) {
        let client = this.client,
          middleware = this.middleware,
          provideTypeHierarchySubtypes = __name((item, token) => {
            let params = {
              item: client.code2ProtocolConverter.asTypeHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asTypeHierarchyItems(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type, token, error, null));
          }, "provideTypeHierarchySubtypes");
        return middleware.provideTypeHierarchySubtypes ? middleware.provideTypeHierarchySubtypes(item, token, provideTypeHierarchySubtypes) : provideTypeHierarchySubtypes(item, token);
      }
    };
  __name(_TypeHierarchyProvider, "TypeHierarchyProvider");
  var TypeHierarchyProvider = _TypeHierarchyProvider,
    _TypeHierarchyFeature = class _TypeHierarchyFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "typeHierarchy");
        capability.dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.typeHierarchyProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let client = this._client,
          provider = new TypeHierarchyProvider(client);
        return [vscode_1.languages.registerTypeHierarchyProvider(client.protocol2CodeConverter.asDocumentSelector(options.documentSelector), provider), provider];
      }
    };
  __name(_TypeHierarchyFeature, "TypeHierarchyFeature");
  var TypeHierarchyFeature = _TypeHierarchyFeature;
  exports.TypeHierarchyFeature = TypeHierarchyFeature;
});