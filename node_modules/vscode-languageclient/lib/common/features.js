var require_features = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.WorkspaceFeature = exports.TextDocumentLanguageFeature = exports.TextDocumentEventFeature = exports.DynamicDocumentFeature = exports.DynamicFeature = exports.StaticFeature = exports.ensure = exports.LSPCancellationError = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    Is = yp(),
    UUID = yo(),
    _LSPCancellationError = class _LSPCancellationError extends vscode_1.CancellationError {
      constructor(data) {
        super(), this.data = data;
      }
    };
  __name(_LSPCancellationError, "LSPCancellationError");
  var LSPCancellationError = _LSPCancellationError;
  exports.LSPCancellationError = LSPCancellationError;
  function ensure(target, key) {
    return target[key] === void 0 && (target[key] = {}), target[key];
  }
  __name(ensure, "ensure");
  exports.ensure = ensure;
  var StaticFeature;
  (function (StaticFeature) {
    function is(value) {
      let candidate = value;
      return candidate != null && Is.func(candidate.fillClientCapabilities) && Is.func(candidate.initialize) && Is.func(candidate.getState) && Is.func(candidate.clear) && (candidate.fillInitializeParams === void 0 || Is.func(candidate.fillInitializeParams));
    }
    __name(is, "is"), StaticFeature.is = is;
  })(StaticFeature || (exports.StaticFeature = StaticFeature = {}));
  var DynamicFeature;
  (function (DynamicFeature) {
    function is(value) {
      let candidate = value;
      return candidate != null && Is.func(candidate.fillClientCapabilities) && Is.func(candidate.initialize) && Is.func(candidate.getState) && Is.func(candidate.clear) && (candidate.fillInitializeParams === void 0 || Is.func(candidate.fillInitializeParams)) && Is.func(candidate.register) && Is.func(candidate.unregister) && candidate.registrationType !== void 0;
    }
    __name(is, "is"), DynamicFeature.is = is;
  })(DynamicFeature || (exports.DynamicFeature = DynamicFeature = {}));
  var _DynamicDocumentFeature = class _DynamicDocumentFeature {
    constructor(client) {
      this._client = client;
    }
    getState() {
      let selectors = this.getDocumentSelectors(),
        count = 0;
      for (let selector of selectors) {
        count++;
        for (let document of vscode_1.workspace.textDocuments) if (vscode_1.languages.match(selector, document) > 0) return {
          kind: "document",
          id: this.registrationType.method,
          registrations: !0,
          matches: !0
        };
      }
      let registrations = count > 0;
      return {
        kind: "document",
        id: this.registrationType.method,
        registrations: registrations,
        matches: !1
      };
    }
  };
  __name(_DynamicDocumentFeature, "DynamicDocumentFeature");
  var DynamicDocumentFeature = _DynamicDocumentFeature;
  exports.DynamicDocumentFeature = DynamicDocumentFeature;
  var _TextDocumentEventFeature = class _TextDocumentEventFeature extends DynamicDocumentFeature {
    static textDocumentFilter(selectors, textDocument) {
      for (let selector of selectors) if (vscode_1.languages.match(selector, textDocument) > 0) return !0;
      return !1;
    }
    constructor(client, event, type, middleware, createParams, textDocument, selectorFilter) {
      super(client), this._event = event, this._type = type, this._middleware = middleware, this._createParams = createParams, this._textDocument = textDocument, this._selectorFilter = selectorFilter, this._selectors = new Map(), this._onNotificationSent = new vscode_1.EventEmitter();
    }
    getStateInfo() {
      return [this._selectors.values(), !1];
    }
    getDocumentSelectors() {
      return this._selectors.values();
    }
    register(data) {
      data.registerOptions.documentSelector && (this._listener || (this._listener = this._event(data => {
        this.callback(data).catch(error => {
          this._client.error(`Sending document notification ${this._type.method} failed.`, error);
        });
      })), this._selectors.set(data.id, this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector)));
    }
    async callback(data) {
      let doSend = __name(async data => {
        let params = this._createParams(data);
        await this._client.sendNotification(this._type, params), this.notificationSent(this.getTextDocument(data), this._type, params);
      }, "doSend");
      if (this.matches(data)) {
        let middleware = this._middleware();
        return middleware ? middleware(data, data => doSend(data)) : doSend(data);
      }
    }
    matches(data) {
      return this._client.hasDedicatedTextSynchronizationFeature(this._textDocument(data)) ? !1 : !this._selectorFilter || this._selectorFilter(this._selectors.values(), data);
    }
    get onNotificationSent() {
      return this._onNotificationSent.event;
    }
    notificationSent(textDocument, type, params) {
      this._onNotificationSent.fire({
        textDocument: textDocument,
        type: type,
        params: params
      });
    }
    unregister(id) {
      this._selectors.delete(id), this._selectors.size === 0 && this._listener && (this._listener.dispose(), this._listener = void 0);
    }
    clear() {
      this._selectors.clear(), this._onNotificationSent.dispose(), this._listener && (this._listener.dispose(), this._listener = void 0);
    }
    getProvider(document) {
      for (let selector of this._selectors.values()) if (vscode_1.languages.match(selector, document) > 0) return {
        send: __name(data => this.callback(data), "send")
      };
    }
  };
  __name(_TextDocumentEventFeature, "TextDocumentEventFeature");
  var TextDocumentEventFeature = _TextDocumentEventFeature;
  exports.TextDocumentEventFeature = TextDocumentEventFeature;
  var _TextDocumentLanguageFeature = class _TextDocumentLanguageFeature extends DynamicDocumentFeature {
    constructor(client, registrationType) {
      super(client), this._registrationType = registrationType, this._registrations = new Map();
    }
    *getDocumentSelectors() {
      for (let registration of this._registrations.values()) {
        let selector = registration.data.registerOptions.documentSelector;
        selector !== null && (yield this._client.protocol2CodeConverter.asDocumentSelector(selector));
      }
    }
    get registrationType() {
      return this._registrationType;
    }
    register(data) {
      if (!data.registerOptions.documentSelector) return;
      let registration = this.registerLanguageProvider(data.registerOptions, data.id);
      this._registrations.set(data.id, {
        disposable: registration[0],
        data: data,
        provider: registration[1]
      });
    }
    unregister(id) {
      let registration = this._registrations.get(id);
      registration !== void 0 && registration.disposable.dispose();
    }
    clear() {
      this._registrations.forEach(value => {
        value.disposable.dispose();
      }), this._registrations.clear();
    }
    getRegistration(documentSelector, capability) {
      var _a;
      if (capability) {
        if (vscode_languageserver_protocol_1.TextDocumentRegistrationOptions.is(capability)) {
          let id = vscode_languageserver_protocol_1.StaticRegistrationOptions.hasId(capability) ? capability.id : UUID.generateUuid(),
            selector = (_a = capability.documentSelector) != null ? _a : documentSelector;
          if (selector) return [id, Object.assign({}, capability, {
            documentSelector: selector
          })];
        } else if (Is.boolean(capability) && capability === !0 || vscode_languageserver_protocol_1.WorkDoneProgressOptions.is(capability)) {
          if (!documentSelector) return [void 0, void 0];
          let options = Is.boolean(capability) && capability === !0 ? {
            documentSelector: documentSelector
          } : Object.assign({}, capability, {
            documentSelector: documentSelector
          });
          return [UUID.generateUuid(), options];
        }
      } else return [void 0, void 0];
      return [void 0, void 0];
    }
    getRegistrationOptions(documentSelector, capability) {
      if (!(!documentSelector || !capability)) return Is.boolean(capability) && capability === !0 ? {
        documentSelector: documentSelector
      } : Object.assign({}, capability, {
        documentSelector: documentSelector
      });
    }
    getProvider(textDocument) {
      for (let registration of this._registrations.values()) {
        let selector = registration.data.registerOptions.documentSelector;
        if (selector !== null && vscode_1.languages.match(this._client.protocol2CodeConverter.asDocumentSelector(selector), textDocument) > 0) return registration.provider;
      }
    }
    getAllProviders() {
      let result = [];
      for (let item of this._registrations.values()) result.push(item.provider);
      return result;
    }
  };
  __name(_TextDocumentLanguageFeature, "TextDocumentLanguageFeature");
  var TextDocumentLanguageFeature = _TextDocumentLanguageFeature;
  exports.TextDocumentLanguageFeature = TextDocumentLanguageFeature;
  var _WorkspaceFeature = class _WorkspaceFeature {
    constructor(client, registrationType) {
      this._client = client, this._registrationType = registrationType, this._registrations = new Map();
    }
    getState() {
      let registrations = this._registrations.size > 0;
      return {
        kind: "workspace",
        id: this._registrationType.method,
        registrations: registrations
      };
    }
    get registrationType() {
      return this._registrationType;
    }
    register(data) {
      let registration = this.registerLanguageProvider(data.registerOptions);
      this._registrations.set(data.id, {
        disposable: registration[0],
        provider: registration[1]
      });
    }
    unregister(id) {
      let registration = this._registrations.get(id);
      registration !== void 0 && registration.disposable.dispose();
    }
    clear() {
      this._registrations.forEach(registration => {
        registration.disposable.dispose();
      }), this._registrations.clear();
    }
    getProviders() {
      let result = [];
      for (let registration of this._registrations.values()) result.push(registration.provider);
      return result;
    }
  };
  __name(_WorkspaceFeature, "WorkspaceFeature");
  var WorkspaceFeature = _WorkspaceFeature;
  exports.WorkspaceFeature = WorkspaceFeature;
});