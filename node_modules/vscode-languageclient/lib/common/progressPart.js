var require_progressPart = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.ProgressPart = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    Is = yp(),
    _ProgressPart = class _ProgressPart {
      constructor(_client, _token, done) {
        this._client = _client, this._token = _token, this._reported = 0, this._infinite = !1, this._lspProgressDisposable = this._client.onProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, value => {
          switch (value.kind) {
            case "begin":
              this.begin(value);
              break;
            case "report":
              this.report(value);
              break;
            case "end":
              this.done(), done && done(this);
              break;
          }
        });
      }
      begin(params) {
        this._infinite = params.percentage === void 0, this._lspProgressDisposable !== void 0 && vscode_1.window.withProgress({
          location: vscode_1.ProgressLocation.Window,
          cancellable: params.cancellable,
          title: params.title
        }, async (progress, cancellationToken) => {
          if (this._lspProgressDisposable !== void 0) return this._progress = progress, this._cancellationToken = cancellationToken, this._tokenDisposable = this._cancellationToken.onCancellationRequested(() => {
            this._client.sendNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, {
              token: this._token
            });
          }), this.report(params), new Promise((resolve, reject) => {
            this._resolve = resolve, this._reject = reject;
          });
        });
      }
      report(params) {
        if (this._infinite && Is.string(params.message)) this._progress !== void 0 && this._progress.report({
          message: params.message
        });else if (Is.number(params.percentage)) {
          let percentage = Math.max(0, Math.min(params.percentage, 100)),
            delta = Math.max(0, percentage - this._reported);
          this._reported += delta, this._progress !== void 0 && this._progress.report({
            message: params.message,
            increment: delta
          });
        }
      }
      cancel() {
        this.cleanup(), this._reject !== void 0 && (this._reject(), this._resolve = void 0, this._reject = void 0);
      }
      done() {
        this.cleanup(), this._resolve !== void 0 && (this._resolve(), this._resolve = void 0, this._reject = void 0);
      }
      cleanup() {
        this._lspProgressDisposable !== void 0 && (this._lspProgressDisposable.dispose(), this._lspProgressDisposable = void 0), this._tokenDisposable !== void 0 && (this._tokenDisposable.dispose(), this._tokenDisposable = void 0), this._progress = void 0, this._cancellationToken = void 0;
      }
    };
  __name(_ProgressPart, "ProgressPart");
  var ProgressPart = _ProgressPart;
  exports.ProgressPart = ProgressPart;
});