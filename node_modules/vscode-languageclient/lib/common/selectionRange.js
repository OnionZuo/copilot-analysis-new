var require_selectionRange = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.SelectionRangeFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _SelectionRangeFeature = class _SelectionRangeFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.SelectionRangeRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "selectionRange");
        capability.dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.selectionRangeProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideSelectionRanges: __name((document, positions, token) => {
              let client = this._client,
                provideSelectionRanges = __name(async (document, positions, token) => {
                  let requestParams = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    positions: client.code2ProtocolConverter.asPositionsSync(positions, token)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, requestParams, token).then(ranges => token.isCancellationRequested ? null : client.protocol2CodeConverter.asSelectionRanges(ranges, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, token, error, null));
                }, "provideSelectionRanges"),
                middleware = client.middleware;
              return middleware.provideSelectionRanges ? middleware.provideSelectionRanges(document, positions, token, provideSelectionRanges) : provideSelectionRanges(document, positions, token);
            }, "provideSelectionRanges")
          };
        return [this.registerProvider(selector, provider), provider];
      }
      registerProvider(selector, provider) {
        return vscode_1.languages.registerSelectionRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
    };
  __name(_SelectionRangeFeature, "SelectionRangeFeature");
  var SelectionRangeFeature = _SelectionRangeFeature;
  exports.SelectionRangeFeature = SelectionRangeFeature;
});