var require_foldingRange = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.FoldingRangeFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _FoldingRangeFeature = class _FoldingRangeFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.FoldingRangeRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "foldingRange");
        capability.dynamicRegistration = !0, capability.rangeLimit = 5e3, capability.lineFoldingOnly = !0, capability.foldingRangeKind = {
          valueSet: [vscode_languageserver_protocol_1.FoldingRangeKind.Comment, vscode_languageserver_protocol_1.FoldingRangeKind.Imports, vscode_languageserver_protocol_1.FoldingRangeKind.Region]
        }, capability.foldingRange = {
          collapsedText: !1
        }, (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "foldingRange").refreshSupport = !0;
      }
      initialize(capabilities, documentSelector) {
        this._client.onRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type, async () => {
          for (let provider of this.getAllProviders()) provider.onDidChangeFoldingRange.fire();
        });
        let [id, options] = this.getRegistration(documentSelector, capabilities.foldingRangeProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          eventEmitter = new vscode_1.EventEmitter(),
          provider = {
            onDidChangeFoldingRanges: eventEmitter.event,
            provideFoldingRanges: __name((document, context, token) => {
              let client = this._client,
                provideFoldingRanges = __name((document, _, token) => {
                  let requestParams = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, requestParams, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asFoldingRanges(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, token, error, null));
                }, "provideFoldingRanges"),
                middleware = client.middleware;
              return middleware.provideFoldingRanges ? middleware.provideFoldingRanges(document, context, token, provideFoldingRanges) : provideFoldingRanges(document, context, token);
            }, "provideFoldingRanges")
          };
        return [vscode_1.languages.registerFoldingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), {
          provider: provider,
          onDidChangeFoldingRange: eventEmitter
        }];
      }
    };
  __name(_FoldingRangeFeature, "FoldingRangeFeature");
  var FoldingRangeFeature = _FoldingRangeFeature;
  exports.FoldingRangeFeature = FoldingRangeFeature;
});