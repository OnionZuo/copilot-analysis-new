var require_fileSystemWatcher = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.FileSystemWatcherFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _FileSystemWatcherFeature = class _FileSystemWatcherFeature {
      constructor(client, notifyFileEvent) {
        this._client = client, this._notifyFileEvent = notifyFileEvent, this._watchers = new Map();
      }
      getState() {
        return {
          kind: "workspace",
          id: this.registrationType.method,
          registrations: this._watchers.size > 0
        };
      }
      get registrationType() {
        return vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type;
      }
      fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "didChangeWatchedFiles").dynamicRegistration = !0, (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "didChangeWatchedFiles").relativePatternSupport = !0;
      }
      initialize(_capabilities, _documentSelector) {}
      register(data) {
        if (!Array.isArray(data.registerOptions.watchers)) return;
        let disposables = [];
        for (let watcher of data.registerOptions.watchers) {
          let globPattern = this._client.protocol2CodeConverter.asGlobPattern(watcher.globPattern);
          if (globPattern === void 0) continue;
          let watchCreate = !0,
            watchChange = !0,
            watchDelete = !0;
          watcher.kind !== void 0 && watcher.kind !== null && (watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0, watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) !== 0, watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) !== 0);
          let fileSystemWatcher = vscode_1.workspace.createFileSystemWatcher(globPattern, !watchCreate, !watchChange, !watchDelete);
          this.hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, disposables), disposables.push(fileSystemWatcher);
        }
        this._watchers.set(data.id, disposables);
      }
      registerRaw(id, fileSystemWatchers) {
        let disposables = [];
        for (let fileSystemWatcher of fileSystemWatchers) this.hookListeners(fileSystemWatcher, !0, !0, !0, disposables);
        this._watchers.set(id, disposables);
      }
      hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {
        watchCreate && fileSystemWatcher.onDidCreate(resource => this._notifyFileEvent({
          uri: this._client.code2ProtocolConverter.asUri(resource),
          type: vscode_languageserver_protocol_1.FileChangeType.Created
        }), null, listeners), watchChange && fileSystemWatcher.onDidChange(resource => this._notifyFileEvent({
          uri: this._client.code2ProtocolConverter.asUri(resource),
          type: vscode_languageserver_protocol_1.FileChangeType.Changed
        }), null, listeners), watchDelete && fileSystemWatcher.onDidDelete(resource => this._notifyFileEvent({
          uri: this._client.code2ProtocolConverter.asUri(resource),
          type: vscode_languageserver_protocol_1.FileChangeType.Deleted
        }), null, listeners);
      }
      unregister(id) {
        let disposables = this._watchers.get(id);
        if (disposables) for (let disposable of disposables) disposable.dispose();
      }
      clear() {
        this._watchers.forEach(disposables => {
          for (let disposable of disposables) disposable.dispose();
        }), this._watchers.clear();
      }
    };
  __name(_FileSystemWatcherFeature, "FileSystemWatcherFeature");
  var FileSystemWatcherFeature = _FileSystemWatcherFeature;
  exports.FileSystemWatcherFeature = FileSystemWatcherFeature;
});