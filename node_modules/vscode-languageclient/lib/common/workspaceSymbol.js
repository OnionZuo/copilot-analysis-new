var require_workspaceSymbol = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.WorkspaceSymbolFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    documentSymbol_1 = gge(),
    UUID = yo(),
    _WorkspaceSymbolFeature = class _WorkspaceSymbolFeature extends features_1.WorkspaceFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let symbolCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "symbol");
        symbolCapabilities.dynamicRegistration = !0, symbolCapabilities.symbolKind = {
          valueSet: documentSymbol_1.SupportedSymbolKinds
        }, symbolCapabilities.tagSupport = {
          valueSet: documentSymbol_1.SupportedSymbolTags
        }, symbolCapabilities.resolveSupport = {
          properties: ["location.range"]
        };
      }
      initialize(capabilities) {
        capabilities.workspaceSymbolProvider && this.register({
          id: UUID.generateUuid(),
          registerOptions: capabilities.workspaceSymbolProvider === !0 ? {
            workDoneProgress: !1
          } : capabilities.workspaceSymbolProvider
        });
      }
      registerLanguageProvider(options) {
        let provider = {
          provideWorkspaceSymbols: __name((query, token) => {
            let client = this._client,
              provideWorkspaceSymbols = __name((query, token) => client.sendRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, {
                query: query
              }, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asSymbolInformations(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, token, error, null)), "provideWorkspaceSymbols"),
              middleware = client.middleware;
            return middleware.provideWorkspaceSymbols ? middleware.provideWorkspaceSymbols(query, token, provideWorkspaceSymbols) : provideWorkspaceSymbols(query, token);
          }, "provideWorkspaceSymbols"),
          resolveWorkspaceSymbol: options.resolveProvider === !0 ? (item, token) => {
            let client = this._client,
              resolveWorkspaceSymbol = __name((item, token) => client.sendRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, client.code2ProtocolConverter.asWorkspaceSymbol(item), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asSymbolInformation(result), error => client.handleFailedRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, token, error, null)), "resolveWorkspaceSymbol"),
              middleware = client.middleware;
            return middleware.resolveWorkspaceSymbol ? middleware.resolveWorkspaceSymbol(item, token, resolveWorkspaceSymbol) : resolveWorkspaceSymbol(item, token);
          } : void 0
        };
        return [vscode_1.languages.registerWorkspaceSymbolProvider(provider), provider];
      }
    };
  __name(_WorkspaceSymbolFeature, "WorkspaceSymbolFeature");
  var WorkspaceSymbolFeature = _WorkspaceSymbolFeature;
  exports.WorkspaceSymbolFeature = WorkspaceSymbolFeature;
});