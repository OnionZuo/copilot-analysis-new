var require_inlineValue = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.InlineValueFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _InlineValueFeature = class _InlineValueFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.InlineValueRequest.type);
      }
      fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "inlineValue").dynamicRegistration = !0, (0, features_1.ensure)((0, features_1.ensure)(capabilities, "workspace"), "inlineValue").refreshSupport = !0;
      }
      initialize(capabilities, documentSelector) {
        this._client.onRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type, async () => {
          for (let provider of this.getAllProviders()) provider.onDidChangeInlineValues.fire();
        });
        let [id, options] = this.getRegistration(documentSelector, capabilities.inlineValueProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          eventEmitter = new vscode_1.EventEmitter(),
          provider = {
            onDidChangeInlineValues: eventEmitter.event,
            provideInlineValues: __name((document, viewPort, context, token) => {
              let client = this._client,
                provideInlineValues = __name((document, viewPort, context, token) => {
                  let requestParams = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    range: client.code2ProtocolConverter.asRange(viewPort),
                    context: client.code2ProtocolConverter.asInlineValueContext(context)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, requestParams, token).then(values => token.isCancellationRequested ? null : client.protocol2CodeConverter.asInlineValues(values, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, token, error, null));
                }, "provideInlineValues"),
                middleware = client.middleware;
              return middleware.provideInlineValues ? middleware.provideInlineValues(document, viewPort, context, token, provideInlineValues) : provideInlineValues(document, viewPort, context, token);
            }, "provideInlineValues")
          };
        return [this.registerProvider(selector, provider), {
          provider: provider,
          onDidChangeInlineValues: eventEmitter
        }];
      }
      registerProvider(selector, provider) {
        return vscode_1.languages.registerInlineValuesProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
    };
  __name(_InlineValueFeature, "InlineValueFeature");
  var InlineValueFeature = _InlineValueFeature;
  exports.InlineValueFeature = InlineValueFeature;
});