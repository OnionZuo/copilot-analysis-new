var require_declaration = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.DeclarationFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _DeclarationFeature = class _DeclarationFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.DeclarationRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let declarationSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "declaration");
        declarationSupport.dynamicRegistration = !0, declarationSupport.linkSupport = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.declarationProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideDeclaration: __name((document, position, token) => {
              let client = this._client,
                provideDeclaration = __name((document, position, token) => client.sendRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asDeclarationResult(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, token, error, null)), "provideDeclaration"),
                middleware = client.middleware;
              return middleware.provideDeclaration ? middleware.provideDeclaration(document, position, token, provideDeclaration) : provideDeclaration(document, position, token);
            }, "provideDeclaration")
          };
        return [this.registerProvider(selector, provider), provider];
      }
      registerProvider(selector, provider) {
        return vscode_1.languages.registerDeclarationProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
    };
  __name(_DeclarationFeature, "DeclarationFeature");
  var DeclarationFeature = _DeclarationFeature;
  exports.DeclarationFeature = DeclarationFeature;
});