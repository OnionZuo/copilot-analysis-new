var require_callHierarchy = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.CallHierarchyFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    _CallHierarchyProvider = class _CallHierarchyProvider {
      constructor(client) {
        this.client = client, this.middleware = client.middleware;
      }
      prepareCallHierarchy(document, position, token) {
        let client = this.client,
          middleware = this.middleware,
          prepareCallHierarchy = __name((document, position, token) => {
            let params = client.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asCallHierarchyItems(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, token, error, null));
          }, "prepareCallHierarchy");
        return middleware.prepareCallHierarchy ? middleware.prepareCallHierarchy(document, position, token, prepareCallHierarchy) : prepareCallHierarchy(document, position, token);
      }
      provideCallHierarchyIncomingCalls(item, token) {
        let client = this.client,
          middleware = this.middleware,
          provideCallHierarchyIncomingCalls = __name((item, token) => {
            let params = {
              item: client.code2ProtocolConverter.asCallHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asCallHierarchyIncomingCalls(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type, token, error, null));
          }, "provideCallHierarchyIncomingCalls");
        return middleware.provideCallHierarchyIncomingCalls ? middleware.provideCallHierarchyIncomingCalls(item, token, provideCallHierarchyIncomingCalls) : provideCallHierarchyIncomingCalls(item, token);
      }
      provideCallHierarchyOutgoingCalls(item, token) {
        let client = this.client,
          middleware = this.middleware,
          provideCallHierarchyOutgoingCalls = __name((item, token) => {
            let params = {
              item: client.code2ProtocolConverter.asCallHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asCallHierarchyOutgoingCalls(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type, token, error, null));
          }, "provideCallHierarchyOutgoingCalls");
        return middleware.provideCallHierarchyOutgoingCalls ? middleware.provideCallHierarchyOutgoingCalls(item, token, provideCallHierarchyOutgoingCalls) : provideCallHierarchyOutgoingCalls(item, token);
      }
    };
  __name(_CallHierarchyProvider, "CallHierarchyProvider");
  var CallHierarchyProvider = _CallHierarchyProvider,
    _CallHierarchyFeature = class _CallHierarchyFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type);
      }
      fillClientCapabilities(cap) {
        let capabilities = cap,
          capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "callHierarchy");
        capability.dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.callHierarchyProvider);
        !id || !options || this.register({
          id: id,
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let client = this._client,
          provider = new CallHierarchyProvider(client);
        return [vscode_1.languages.registerCallHierarchyProvider(this._client.protocol2CodeConverter.asDocumentSelector(options.documentSelector), provider), provider];
      }
    };
  __name(_CallHierarchyFeature, "CallHierarchyFeature");
  var CallHierarchyFeature = _CallHierarchyFeature;
  exports.CallHierarchyFeature = CallHierarchyFeature;
});