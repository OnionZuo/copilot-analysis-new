var require_rename = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.RenameFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    UUID = yo(),
    Is = yp(),
    features_1 = Oi(),
    _RenameFeature = class _RenameFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.RenameRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let rename = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "rename");
        rename.dynamicRegistration = !0, rename.prepareSupport = !0, rename.prepareSupportDefaultBehavior = vscode_languageserver_protocol_1.PrepareSupportDefaultBehavior.Identifier, rename.honorsChangeAnnotations = !0;
      }
      initialize(capabilities, documentSelector) {
        let options = this.getRegistrationOptions(documentSelector, capabilities.renameProvider);
        options && (Is.boolean(capabilities.renameProvider) && (options.prepareProvider = !1), this.register({
          id: UUID.generateUuid(),
          registerOptions: options
        }));
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideRenameEdits: __name((document, position, newName, token) => {
              let client = this._client,
                provideRenameEdits = __name((document, position, newName, token) => {
                  let params = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    position: client.code2ProtocolConverter.asPosition(position),
                    newName: newName
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.RenameRequest.type, params, token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asWorkspaceEdit(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.RenameRequest.type, token, error, null, !1));
                }, "provideRenameEdits"),
                middleware = client.middleware;
              return middleware.provideRenameEdits ? middleware.provideRenameEdits(document, position, newName, token, provideRenameEdits) : provideRenameEdits(document, position, newName, token);
            }, "provideRenameEdits"),
            prepareRename: options.prepareProvider ? (document, position, token) => {
              let client = this._client,
                prepareRename = __name((document, position, token) => {
                  let params = {
                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                    position: client.code2ProtocolConverter.asPosition(position)
                  };
                  return client.sendRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, params, token).then(result => token.isCancellationRequested ? null : vscode_languageserver_protocol_1.Range.is(result) ? client.protocol2CodeConverter.asRange(result) : this.isDefaultBehavior(result) ? result.defaultBehavior === !0 ? null : Promise.reject(new Error("The element can't be renamed.")) : result && vscode_languageserver_protocol_1.Range.is(result.range) ? {
                    range: client.protocol2CodeConverter.asRange(result.range),
                    placeholder: result.placeholder
                  } : Promise.reject(new Error("The element can't be renamed.")), error => {
                    throw typeof error.message == "string" ? new Error(error.message) : new Error("The element can't be renamed.");
                  });
                }, "prepareRename"),
                middleware = client.middleware;
              return middleware.prepareRename ? middleware.prepareRename(document, position, token, prepareRename) : prepareRename(document, position, token);
            } : void 0
          };
        return [this.registerProvider(selector, provider), provider];
      }
      registerProvider(selector, provider) {
        return vscode_1.languages.registerRenameProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
      }
      isDefaultBehavior(value) {
        let candidate = value;
        return candidate && Is.boolean(candidate.defaultBehavior);
      }
    };
  __name(_RenameFeature, "RenameFeature");
  var RenameFeature = _RenameFeature;
  exports.RenameFeature = RenameFeature;
});