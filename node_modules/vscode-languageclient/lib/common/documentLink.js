var require_documentLink = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.DocumentLinkFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    UUID = yo(),
    _DocumentLinkFeature = class _DocumentLinkFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentLinkRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let documentLinkCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "documentLink");
        documentLinkCapabilities.dynamicRegistration = !0, documentLinkCapabilities.tooltipSupport = !0;
      }
      initialize(capabilities, documentSelector) {
        let options = this.getRegistrationOptions(documentSelector, capabilities.documentLinkProvider);
        options && this.register({
          id: UUID.generateUuid(),
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideDocumentLinks: __name((document, token) => {
              let client = this._client,
                provideDocumentLinks = __name((document, token) => client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, client.code2ProtocolConverter.asDocumentLinkParams(document), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asDocumentLinks(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, token, error, null)), "provideDocumentLinks"),
                middleware = client.middleware;
              return middleware.provideDocumentLinks ? middleware.provideDocumentLinks(document, token, provideDocumentLinks) : provideDocumentLinks(document, token);
            }, "provideDocumentLinks"),
            resolveDocumentLink: options.resolveProvider ? (link, token) => {
              let client = this._client,
                resolveDocumentLink = __name((link, token) => client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, client.code2ProtocolConverter.asDocumentLink(link), token).then(result => token.isCancellationRequested ? link : client.protocol2CodeConverter.asDocumentLink(result), error => client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, token, error, link)), "resolveDocumentLink"),
                middleware = client.middleware;
              return middleware.resolveDocumentLink ? middleware.resolveDocumentLink(link, token, resolveDocumentLink) : resolveDocumentLink(link, token);
            } : void 0
          };
        return [vscode_1.languages.registerDocumentLinkProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
      }
    };
  __name(_DocumentLinkFeature, "DocumentLinkFeature");
  var DocumentLinkFeature = _DocumentLinkFeature;
  exports.DocumentLinkFeature = DocumentLinkFeature;
});