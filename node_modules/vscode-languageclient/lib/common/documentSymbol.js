var require_documentSymbol = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.DocumentSymbolFeature = exports.SupportedSymbolTags = exports.SupportedSymbolKinds = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    UUID = yo();
  exports.SupportedSymbolKinds = [vscode_languageserver_protocol_1.SymbolKind.File, vscode_languageserver_protocol_1.SymbolKind.Module, vscode_languageserver_protocol_1.SymbolKind.Namespace, vscode_languageserver_protocol_1.SymbolKind.Package, vscode_languageserver_protocol_1.SymbolKind.Class, vscode_languageserver_protocol_1.SymbolKind.Method, vscode_languageserver_protocol_1.SymbolKind.Property, vscode_languageserver_protocol_1.SymbolKind.Field, vscode_languageserver_protocol_1.SymbolKind.Constructor, vscode_languageserver_protocol_1.SymbolKind.Enum, vscode_languageserver_protocol_1.SymbolKind.Interface, vscode_languageserver_protocol_1.SymbolKind.Function, vscode_languageserver_protocol_1.SymbolKind.Variable, vscode_languageserver_protocol_1.SymbolKind.Constant, vscode_languageserver_protocol_1.SymbolKind.String, vscode_languageserver_protocol_1.SymbolKind.Number, vscode_languageserver_protocol_1.SymbolKind.Boolean, vscode_languageserver_protocol_1.SymbolKind.Array, vscode_languageserver_protocol_1.SymbolKind.Object, vscode_languageserver_protocol_1.SymbolKind.Key, vscode_languageserver_protocol_1.SymbolKind.Null, vscode_languageserver_protocol_1.SymbolKind.EnumMember, vscode_languageserver_protocol_1.SymbolKind.Struct, vscode_languageserver_protocol_1.SymbolKind.Event, vscode_languageserver_protocol_1.SymbolKind.Operator, vscode_languageserver_protocol_1.SymbolKind.TypeParameter];
  exports.SupportedSymbolTags = [vscode_languageserver_protocol_1.SymbolTag.Deprecated];
  var _DocumentSymbolFeature = class _DocumentSymbolFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
      super(client, vscode_languageserver_protocol_1.DocumentSymbolRequest.type);
    }
    fillClientCapabilities(capabilities) {
      let symbolCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "documentSymbol");
      symbolCapabilities.dynamicRegistration = !0, symbolCapabilities.symbolKind = {
        valueSet: exports.SupportedSymbolKinds
      }, symbolCapabilities.hierarchicalDocumentSymbolSupport = !0, symbolCapabilities.tagSupport = {
        valueSet: exports.SupportedSymbolTags
      }, symbolCapabilities.labelSupport = !0;
    }
    initialize(capabilities, documentSelector) {
      let options = this.getRegistrationOptions(documentSelector, capabilities.documentSymbolProvider);
      options && this.register({
        id: UUID.generateUuid(),
        registerOptions: options
      });
    }
    registerLanguageProvider(options) {
      let selector = options.documentSelector,
        provider = {
          provideDocumentSymbols: __name((document, token) => {
            let client = this._client,
              _provideDocumentSymbols = __name(async (document, token) => {
                try {
                  let data = await client.sendRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, client.code2ProtocolConverter.asDocumentSymbolParams(document), token);
                  if (token.isCancellationRequested || data === void 0 || data === null) return null;
                  if (data.length === 0) return [];
                  {
                    let first = data[0];
                    return vscode_languageserver_protocol_1.DocumentSymbol.is(first) ? await client.protocol2CodeConverter.asDocumentSymbols(data, token) : await client.protocol2CodeConverter.asSymbolInformations(data, token);
                  }
                } catch (error) {
                  return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, token, error, null);
                }
              }, "_provideDocumentSymbols"),
              middleware = client.middleware;
            return middleware.provideDocumentSymbols ? middleware.provideDocumentSymbols(document, token, _provideDocumentSymbols) : _provideDocumentSymbols(document, token);
          }, "provideDocumentSymbols")
        },
        metaData = options.label !== void 0 ? {
          label: options.label
        } : void 0;
      return [vscode_1.languages.registerDocumentSymbolProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, metaData), provider];
    }
  };
  __name(_DocumentSymbolFeature, "DocumentSymbolFeature");
  var DocumentSymbolFeature = _DocumentSymbolFeature;
  exports.DocumentSymbolFeature = DocumentSymbolFeature;
});