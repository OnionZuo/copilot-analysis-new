var require_inlineCompletion = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.InlineCompletionItemFeature = void 0;
  var vscode_1 = require("vscode"),
    vscode_languageserver_protocol_1 = Un(),
    features_1 = Oi(),
    UUID = yo(),
    _InlineCompletionItemFeature = class _InlineCompletionItemFeature extends features_1.TextDocumentLanguageFeature {
      constructor(client) {
        super(client, vscode_languageserver_protocol_1.InlineCompletionRequest.type);
      }
      fillClientCapabilities(capabilities) {
        let inlineCompletion = (0, features_1.ensure)((0, features_1.ensure)(capabilities, "textDocument"), "inlineCompletion");
        inlineCompletion.dynamicRegistration = !0;
      }
      initialize(capabilities, documentSelector) {
        let options = this.getRegistrationOptions(documentSelector, capabilities.inlineCompletionProvider);
        options && this.register({
          id: UUID.generateUuid(),
          registerOptions: options
        });
      }
      registerLanguageProvider(options) {
        let selector = options.documentSelector,
          provider = {
            provideInlineCompletionItems: __name((document, position, context, token) => {
              let client = this._client,
                middleware = this._client.middleware,
                provideInlineCompletionItems = __name((document, position, context, token) => client.sendRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, client.code2ProtocolConverter.asInlineCompletionParams(document, position, context), token).then(result => token.isCancellationRequested ? null : client.protocol2CodeConverter.asInlineCompletionResult(result, token), error => client.handleFailedRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, token, error, null)), "provideInlineCompletionItems");
              return middleware.provideInlineCompletionItems ? middleware.provideInlineCompletionItems(document, position, context, token, provideInlineCompletionItems) : provideInlineCompletionItems(document, position, context, token);
            }, "provideInlineCompletionItems")
          };
        return [vscode_1.languages.registerInlineCompletionItemProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
      }
    };
  __name(_InlineCompletionItemFeature, "InlineCompletionItemFeature");
  var InlineCompletionItemFeature = _InlineCompletionItemFeature;
  exports.InlineCompletionItemFeature = InlineCompletionItemFeature;
});