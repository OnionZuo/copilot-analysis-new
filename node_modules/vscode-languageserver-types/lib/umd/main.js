var require_main = __commonJSMin((exports, module) => {
  (function (factory) {
    if (typeof module == "object" && typeof module.exports == "object") {
      var v = factory(require, exports);
      v !== void 0 && (module.exports = v);
    } else typeof define == "function" && define.amd && define(["require", "exports"], factory);
  })(function (require, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.TextDocument = exports.EOL = exports.WorkspaceFolder = exports.InlineCompletionContext = exports.SelectedCompletionInfo = exports.InlineCompletionTriggerKind = exports.InlineCompletionList = exports.InlineCompletionItem = exports.StringValue = exports.InlayHint = exports.InlayHintLabelPart = exports.InlayHintKind = exports.InlineValueContext = exports.InlineValueEvaluatableExpression = exports.InlineValueVariableLookup = exports.InlineValueText = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = exports.SelectionRange = exports.DocumentLink = exports.FormattingOptions = exports.CodeLens = exports.CodeAction = exports.CodeActionContext = exports.CodeActionTriggerKind = exports.CodeActionKind = exports.DocumentSymbol = exports.WorkspaceSymbol = exports.SymbolInformation = exports.SymbolTag = exports.SymbolKind = exports.DocumentHighlight = exports.DocumentHighlightKind = exports.SignatureInformation = exports.ParameterInformation = exports.Hover = exports.MarkedString = exports.CompletionList = exports.CompletionItem = exports.CompletionItemLabelDetails = exports.InsertTextMode = exports.InsertReplaceEdit = exports.CompletionItemTag = exports.InsertTextFormat = exports.CompletionItemKind = exports.MarkupContent = exports.MarkupKind = exports.TextDocumentItem = exports.OptionalVersionedTextDocumentIdentifier = exports.VersionedTextDocumentIdentifier = exports.TextDocumentIdentifier = exports.WorkspaceChange = exports.WorkspaceEdit = exports.DeleteFile = exports.RenameFile = exports.CreateFile = exports.TextDocumentEdit = exports.AnnotatedTextEdit = exports.ChangeAnnotationIdentifier = exports.ChangeAnnotation = exports.TextEdit = exports.Command = exports.Diagnostic = exports.CodeDescription = exports.DiagnosticTag = exports.DiagnosticSeverity = exports.DiagnosticRelatedInformation = exports.FoldingRange = exports.FoldingRangeKind = exports.ColorPresentation = exports.ColorInformation = exports.Color = exports.LocationLink = exports.Location = exports.Range = exports.Position = exports.uinteger = exports.integer = exports.URI = exports.DocumentUri = void 0;
    var DocumentUri;
    (function (DocumentUri) {
      function is(value) {
        return typeof value == "string";
      }
      __name(is, "is"), DocumentUri.is = is;
    })(DocumentUri || (exports.DocumentUri = DocumentUri = {}));
    var URI;
    (function (URI) {
      function is(value) {
        return typeof value == "string";
      }
      __name(is, "is"), URI.is = is;
    })(URI || (exports.URI = URI = {}));
    var integer;
    (function (integer) {
      integer.MIN_VALUE = -2147483648, integer.MAX_VALUE = 2147483647;
      function is(value) {
        return typeof value == "number" && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
      }
      __name(is, "is"), integer.is = is;
    })(integer || (exports.integer = integer = {}));
    var uinteger;
    (function (uinteger) {
      uinteger.MIN_VALUE = 0, uinteger.MAX_VALUE = 2147483647;
      function is(value) {
        return typeof value == "number" && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
      }
      __name(is, "is"), uinteger.is = is;
    })(uinteger || (exports.uinteger = uinteger = {}));
    var Position;
    (function (Position) {
      function create(line, character) {
        return line === Number.MAX_VALUE && (line = uinteger.MAX_VALUE), character === Number.MAX_VALUE && (character = uinteger.MAX_VALUE), {
          line: line,
          character: character
        };
      }
      __name(create, "create"), Position.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
      }
      __name(is, "is"), Position.is = is;
    })(Position || (exports.Position = Position = {}));
    var Range;
    (function (Range) {
      function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) return {
          start: Position.create(one, two),
          end: Position.create(three, four)
        };
        if (Position.is(one) && Position.is(two)) return {
          start: one,
          end: two
        };
        throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
      }
      __name(create, "create"), Range.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
      }
      __name(is, "is"), Range.is = is;
    })(Range || (exports.Range = Range = {}));
    var Location;
    (function (Location) {
      function create(uri, range) {
        return {
          uri: uri,
          range: range
        };
      }
      __name(create, "create"), Location.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
      }
      __name(is, "is"), Location.is = is;
    })(Location || (exports.Location = Location = {}));
    var LocationLink;
    (function (LocationLink) {
      function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return {
          targetUri: targetUri,
          targetRange: targetRange,
          targetSelectionRange: targetSelectionRange,
          originSelectionRange: originSelectionRange
        };
      }
      __name(create, "create"), LocationLink.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
      }
      __name(is, "is"), LocationLink.is = is;
    })(LocationLink || (exports.LocationLink = LocationLink = {}));
    var Color;
    (function (Color) {
      function create(red, green, blue, alpha) {
        return {
          red: red,
          green: green,
          blue: blue,
          alpha: alpha
        };
      }
      __name(create, "create"), Color.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
      }
      __name(is, "is"), Color.is = is;
    })(Color || (exports.Color = Color = {}));
    var ColorInformation;
    (function (ColorInformation) {
      function create(range, color) {
        return {
          range: range,
          color: color
        };
      }
      __name(create, "create"), ColorInformation.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
      }
      __name(is, "is"), ColorInformation.is = is;
    })(ColorInformation || (exports.ColorInformation = ColorInformation = {}));
    var ColorPresentation;
    (function (ColorPresentation) {
      function create(label, textEdit, additionalTextEdits) {
        return {
          label: label,
          textEdit: textEdit,
          additionalTextEdits: additionalTextEdits
        };
      }
      __name(create, "create"), ColorPresentation.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
      }
      __name(is, "is"), ColorPresentation.is = is;
    })(ColorPresentation || (exports.ColorPresentation = ColorPresentation = {}));
    var FoldingRangeKind;
    (function (FoldingRangeKind) {
      FoldingRangeKind.Comment = "comment", FoldingRangeKind.Imports = "imports", FoldingRangeKind.Region = "region";
    })(FoldingRangeKind || (exports.FoldingRangeKind = FoldingRangeKind = {}));
    var FoldingRange;
    (function (FoldingRange) {
      function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
          startLine: startLine,
          endLine: endLine
        };
        return Is.defined(startCharacter) && (result.startCharacter = startCharacter), Is.defined(endCharacter) && (result.endCharacter = endCharacter), Is.defined(kind) && (result.kind = kind), Is.defined(collapsedText) && (result.collapsedText = collapsedText), result;
      }
      __name(create, "create"), FoldingRange.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
      }
      __name(is, "is"), FoldingRange.is = is;
    })(FoldingRange || (exports.FoldingRange = FoldingRange = {}));
    var DiagnosticRelatedInformation;
    (function (DiagnosticRelatedInformation) {
      function create(location, message) {
        return {
          location: location,
          message: message
        };
      }
      __name(create, "create"), DiagnosticRelatedInformation.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
      }
      __name(is, "is"), DiagnosticRelatedInformation.is = is;
    })(DiagnosticRelatedInformation || (exports.DiagnosticRelatedInformation = DiagnosticRelatedInformation = {}));
    var DiagnosticSeverity;
    (function (DiagnosticSeverity) {
      DiagnosticSeverity.Error = 1, DiagnosticSeverity.Warning = 2, DiagnosticSeverity.Information = 3, DiagnosticSeverity.Hint = 4;
    })(DiagnosticSeverity || (exports.DiagnosticSeverity = DiagnosticSeverity = {}));
    var DiagnosticTag;
    (function (DiagnosticTag) {
      DiagnosticTag.Unnecessary = 1, DiagnosticTag.Deprecated = 2;
    })(DiagnosticTag || (exports.DiagnosticTag = DiagnosticTag = {}));
    var CodeDescription;
    (function (CodeDescription) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
      }
      __name(is, "is"), CodeDescription.is = is;
    })(CodeDescription || (exports.CodeDescription = CodeDescription = {}));
    var Diagnostic;
    (function (Diagnostic) {
      function create(range, message, severity, code, source, relatedInformation) {
        var result = {
          range: range,
          message: message
        };
        return Is.defined(severity) && (result.severity = severity), Is.defined(code) && (result.code = code), Is.defined(source) && (result.source = source), Is.defined(relatedInformation) && (result.relatedInformation = relatedInformation), result;
      }
      __name(create, "create"), Diagnostic.create = create;
      function is(value) {
        var _a,
          candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
      }
      __name(is, "is"), Diagnostic.is = is;
    })(Diagnostic || (exports.Diagnostic = Diagnostic = {}));
    var Command;
    (function (Command) {
      function create(title, command) {
        for (var args = [], _i = 2; _i < arguments.length; _i++) args[_i - 2] = arguments[_i];
        var result = {
          title: title,
          command: command
        };
        return Is.defined(args) && args.length > 0 && (result.arguments = args), result;
      }
      __name(create, "create"), Command.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
      }
      __name(is, "is"), Command.is = is;
    })(Command || (exports.Command = Command = {}));
    var TextEdit;
    (function (TextEdit) {
      function replace(range, newText) {
        return {
          range: range,
          newText: newText
        };
      }
      __name(replace, "replace"), TextEdit.replace = replace;
      function insert(position, newText) {
        return {
          range: {
            start: position,
            end: position
          },
          newText: newText
        };
      }
      __name(insert, "insert"), TextEdit.insert = insert;
      function del(range) {
        return {
          range: range,
          newText: ""
        };
      }
      __name(del, "del"), TextEdit.del = del;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
      }
      __name(is, "is"), TextEdit.is = is;
    })(TextEdit || (exports.TextEdit = TextEdit = {}));
    var ChangeAnnotation;
    (function (ChangeAnnotation) {
      function create(label, needsConfirmation, description) {
        var result = {
          label: label
        };
        return needsConfirmation !== void 0 && (result.needsConfirmation = needsConfirmation), description !== void 0 && (result.description = description), result;
      }
      __name(create, "create"), ChangeAnnotation.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
      }
      __name(is, "is"), ChangeAnnotation.is = is;
    })(ChangeAnnotation || (exports.ChangeAnnotation = ChangeAnnotation = {}));
    var ChangeAnnotationIdentifier;
    (function (ChangeAnnotationIdentifier) {
      function is(value) {
        var candidate = value;
        return Is.string(candidate);
      }
      __name(is, "is"), ChangeAnnotationIdentifier.is = is;
    })(ChangeAnnotationIdentifier || (exports.ChangeAnnotationIdentifier = ChangeAnnotationIdentifier = {}));
    var AnnotatedTextEdit;
    (function (AnnotatedTextEdit) {
      function replace(range, newText, annotation) {
        return {
          range: range,
          newText: newText,
          annotationId: annotation
        };
      }
      __name(replace, "replace"), AnnotatedTextEdit.replace = replace;
      function insert(position, newText, annotation) {
        return {
          range: {
            start: position,
            end: position
          },
          newText: newText,
          annotationId: annotation
        };
      }
      __name(insert, "insert"), AnnotatedTextEdit.insert = insert;
      function del(range, annotation) {
        return {
          range: range,
          newText: "",
          annotationId: annotation
        };
      }
      __name(del, "del"), AnnotatedTextEdit.del = del;
      function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      __name(is, "is"), AnnotatedTextEdit.is = is;
    })(AnnotatedTextEdit || (exports.AnnotatedTextEdit = AnnotatedTextEdit = {}));
    var TextDocumentEdit;
    (function (TextDocumentEdit) {
      function create(textDocument, edits) {
        return {
          textDocument: textDocument,
          edits: edits
        };
      }
      __name(create, "create"), TextDocumentEdit.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
      }
      __name(is, "is"), TextDocumentEdit.is = is;
    })(TextDocumentEdit || (exports.TextDocumentEdit = TextDocumentEdit = {}));
    var CreateFile;
    (function (CreateFile) {
      function create(uri, options, annotation) {
        var result = {
          kind: "create",
          uri: uri
        };
        return options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0) && (result.options = options), annotation !== void 0 && (result.annotationId = annotation), result;
      }
      __name(create, "create"), CreateFile.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      __name(is, "is"), CreateFile.is = is;
    })(CreateFile || (exports.CreateFile = CreateFile = {}));
    var RenameFile;
    (function (RenameFile) {
      function create(oldUri, newUri, options, annotation) {
        var result = {
          kind: "rename",
          oldUri: oldUri,
          newUri: newUri
        };
        return options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0) && (result.options = options), annotation !== void 0 && (result.annotationId = annotation), result;
      }
      __name(create, "create"), RenameFile.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      __name(is, "is"), RenameFile.is = is;
    })(RenameFile || (exports.RenameFile = RenameFile = {}));
    var DeleteFile;
    (function (DeleteFile) {
      function create(uri, options, annotation) {
        var result = {
          kind: "delete",
          uri: uri
        };
        return options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0) && (result.options = options), annotation !== void 0 && (result.annotationId = annotation), result;
      }
      __name(create, "create"), DeleteFile.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      __name(is, "is"), DeleteFile.is = is;
    })(DeleteFile || (exports.DeleteFile = DeleteFile = {}));
    var WorkspaceEdit;
    (function (WorkspaceEdit) {
      function is(value) {
        var candidate = value;
        return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {
          return Is.string(change.kind) ? CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change) : TextDocumentEdit.is(change);
        }));
      }
      __name(is, "is"), WorkspaceEdit.is = is;
    })(WorkspaceEdit || (exports.WorkspaceEdit = WorkspaceEdit = {}));
    var TextEditChangeImpl = function () {
        function TextEditChangeImpl(edits, changeAnnotations) {
          this.edits = edits, this.changeAnnotations = changeAnnotations;
        }
        return __name(TextEditChangeImpl, "TextEditChangeImpl"), TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
          var edit, id;
          if (annotation === void 0 ? edit = TextEdit.insert(position, newText) : ChangeAnnotationIdentifier.is(annotation) ? (id = annotation, edit = AnnotatedTextEdit.insert(position, newText, annotation)) : (this.assertChangeAnnotations(this.changeAnnotations), id = this.changeAnnotations.manage(annotation), edit = AnnotatedTextEdit.insert(position, newText, id)), this.edits.push(edit), id !== void 0) return id;
        }, TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
          var edit, id;
          if (annotation === void 0 ? edit = TextEdit.replace(range, newText) : ChangeAnnotationIdentifier.is(annotation) ? (id = annotation, edit = AnnotatedTextEdit.replace(range, newText, annotation)) : (this.assertChangeAnnotations(this.changeAnnotations), id = this.changeAnnotations.manage(annotation), edit = AnnotatedTextEdit.replace(range, newText, id)), this.edits.push(edit), id !== void 0) return id;
        }, TextEditChangeImpl.prototype.delete = function (range, annotation) {
          var edit, id;
          if (annotation === void 0 ? edit = TextEdit.del(range) : ChangeAnnotationIdentifier.is(annotation) ? (id = annotation, edit = AnnotatedTextEdit.del(range, annotation)) : (this.assertChangeAnnotations(this.changeAnnotations), id = this.changeAnnotations.manage(annotation), edit = AnnotatedTextEdit.del(range, id)), this.edits.push(edit), id !== void 0) return id;
        }, TextEditChangeImpl.prototype.add = function (edit) {
          this.edits.push(edit);
        }, TextEditChangeImpl.prototype.all = function () {
          return this.edits;
        }, TextEditChangeImpl.prototype.clear = function () {
          this.edits.splice(0, this.edits.length);
        }, TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
          if (value === void 0) throw new Error("Text edit change is not configured to manage change annotations.");
        }, TextEditChangeImpl;
      }(),
      ChangeAnnotations = function () {
        function ChangeAnnotations(annotations) {
          this._annotations = annotations === void 0 ? Object.create(null) : annotations, this._counter = 0, this._size = 0;
        }
        return __name(ChangeAnnotations, "ChangeAnnotations"), ChangeAnnotations.prototype.all = function () {
          return this._annotations;
        }, Object.defineProperty(ChangeAnnotations.prototype, "size", {
          get: __name(function () {
            return this._size;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
          var id;
          if (ChangeAnnotationIdentifier.is(idOrAnnotation) ? id = idOrAnnotation : (id = this.nextId(), annotation = idOrAnnotation), this._annotations[id] !== void 0) throw new Error("Id ".concat(id, " is already in use."));
          if (annotation === void 0) throw new Error("No annotation provided for id ".concat(id));
          return this._annotations[id] = annotation, this._size++, id;
        }, ChangeAnnotations.prototype.nextId = function () {
          return this._counter++, this._counter.toString();
        }, ChangeAnnotations;
      }(),
      WorkspaceChange = function () {
        function WorkspaceChange(workspaceEdit) {
          var _this = this;
          this._textEditChanges = Object.create(null), workspaceEdit !== void 0 ? (this._workspaceEdit = workspaceEdit, workspaceEdit.documentChanges ? (this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations), workspaceEdit.changeAnnotations = this._changeAnnotations.all(), workspaceEdit.documentChanges.forEach(function (change) {
            if (TextDocumentEdit.is(change)) {
              var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
              _this._textEditChanges[change.textDocument.uri] = textEditChange;
            }
          })) : workspaceEdit.changes && Object.keys(workspaceEdit.changes).forEach(function (key) {
            var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
            _this._textEditChanges[key] = textEditChange;
          })) : this._workspaceEdit = {};
        }
        return __name(WorkspaceChange, "WorkspaceChange"), Object.defineProperty(WorkspaceChange.prototype, "edit", {
          get: __name(function () {
            return this.initDocumentChanges(), this._changeAnnotations !== void 0 && (this._changeAnnotations.size === 0 ? this._workspaceEdit.changeAnnotations = void 0 : this._workspaceEdit.changeAnnotations = this._changeAnnotations.all()), this._workspaceEdit;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), WorkspaceChange.prototype.getTextEditChange = function (key) {
          if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            if (this.initDocumentChanges(), this._workspaceEdit.documentChanges === void 0) throw new Error("Workspace edit is not configured for document changes.");
            var textDocument = {
                uri: key.uri,
                version: key.version
              },
              result = this._textEditChanges[textDocument.uri];
            if (!result) {
              var edits = [],
                textDocumentEdit = {
                  textDocument: textDocument,
                  edits: edits
                };
              this._workspaceEdit.documentChanges.push(textDocumentEdit), result = new TextEditChangeImpl(edits, this._changeAnnotations), this._textEditChanges[textDocument.uri] = result;
            }
            return result;
          } else {
            if (this.initChanges(), this._workspaceEdit.changes === void 0) throw new Error("Workspace edit is not configured for normal text edit changes.");
            var result = this._textEditChanges[key];
            if (!result) {
              var edits = [];
              this._workspaceEdit.changes[key] = edits, result = new TextEditChangeImpl(edits), this._textEditChanges[key] = result;
            }
            return result;
          }
        }, WorkspaceChange.prototype.initDocumentChanges = function () {
          this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0 && (this._changeAnnotations = new ChangeAnnotations(), this._workspaceEdit.documentChanges = [], this._workspaceEdit.changeAnnotations = this._changeAnnotations.all());
        }, WorkspaceChange.prototype.initChanges = function () {
          this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0 && (this._workspaceEdit.changes = Object.create(null));
        }, WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
          if (this.initDocumentChanges(), this._workspaceEdit.documentChanges === void 0) throw new Error("Workspace edit is not configured for document changes.");
          var annotation;
          ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation) ? annotation = optionsOrAnnotation : options = optionsOrAnnotation;
          var operation, id;
          if (annotation === void 0 ? operation = CreateFile.create(uri, options) : (id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation), operation = CreateFile.create(uri, options, id)), this._workspaceEdit.documentChanges.push(operation), id !== void 0) return id;
        }, WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
          if (this.initDocumentChanges(), this._workspaceEdit.documentChanges === void 0) throw new Error("Workspace edit is not configured for document changes.");
          var annotation;
          ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation) ? annotation = optionsOrAnnotation : options = optionsOrAnnotation;
          var operation, id;
          if (annotation === void 0 ? operation = RenameFile.create(oldUri, newUri, options) : (id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation), operation = RenameFile.create(oldUri, newUri, options, id)), this._workspaceEdit.documentChanges.push(operation), id !== void 0) return id;
        }, WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
          if (this.initDocumentChanges(), this._workspaceEdit.documentChanges === void 0) throw new Error("Workspace edit is not configured for document changes.");
          var annotation;
          ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation) ? annotation = optionsOrAnnotation : options = optionsOrAnnotation;
          var operation, id;
          if (annotation === void 0 ? operation = DeleteFile.create(uri, options) : (id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation), operation = DeleteFile.create(uri, options, id)), this._workspaceEdit.documentChanges.push(operation), id !== void 0) return id;
        }, WorkspaceChange;
      }();
    exports.WorkspaceChange = WorkspaceChange;
    var TextDocumentIdentifier;
    (function (TextDocumentIdentifier) {
      function create(uri) {
        return {
          uri: uri
        };
      }
      __name(create, "create"), TextDocumentIdentifier.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
      }
      __name(is, "is"), TextDocumentIdentifier.is = is;
    })(TextDocumentIdentifier || (exports.TextDocumentIdentifier = TextDocumentIdentifier = {}));
    var VersionedTextDocumentIdentifier;
    (function (VersionedTextDocumentIdentifier) {
      function create(uri, version) {
        return {
          uri: uri,
          version: version
        };
      }
      __name(create, "create"), VersionedTextDocumentIdentifier.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
      }
      __name(is, "is"), VersionedTextDocumentIdentifier.is = is;
    })(VersionedTextDocumentIdentifier || (exports.VersionedTextDocumentIdentifier = VersionedTextDocumentIdentifier = {}));
    var OptionalVersionedTextDocumentIdentifier;
    (function (OptionalVersionedTextDocumentIdentifier) {
      function create(uri, version) {
        return {
          uri: uri,
          version: version
        };
      }
      __name(create, "create"), OptionalVersionedTextDocumentIdentifier.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
      }
      __name(is, "is"), OptionalVersionedTextDocumentIdentifier.is = is;
    })(OptionalVersionedTextDocumentIdentifier || (exports.OptionalVersionedTextDocumentIdentifier = OptionalVersionedTextDocumentIdentifier = {}));
    var TextDocumentItem;
    (function (TextDocumentItem) {
      function create(uri, languageId, version, text) {
        return {
          uri: uri,
          languageId: languageId,
          version: version,
          text: text
        };
      }
      __name(create, "create"), TextDocumentItem.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
      }
      __name(is, "is"), TextDocumentItem.is = is;
    })(TextDocumentItem || (exports.TextDocumentItem = TextDocumentItem = {}));
    var MarkupKind;
    (function (MarkupKind) {
      MarkupKind.PlainText = "plaintext", MarkupKind.Markdown = "markdown";
      function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
      }
      __name(is, "is"), MarkupKind.is = is;
    })(MarkupKind || (exports.MarkupKind = MarkupKind = {}));
    var MarkupContent;
    (function (MarkupContent) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
      }
      __name(is, "is"), MarkupContent.is = is;
    })(MarkupContent || (exports.MarkupContent = MarkupContent = {}));
    var CompletionItemKind;
    (function (CompletionItemKind) {
      CompletionItemKind.Text = 1, CompletionItemKind.Method = 2, CompletionItemKind.Function = 3, CompletionItemKind.Constructor = 4, CompletionItemKind.Field = 5, CompletionItemKind.Variable = 6, CompletionItemKind.Class = 7, CompletionItemKind.Interface = 8, CompletionItemKind.Module = 9, CompletionItemKind.Property = 10, CompletionItemKind.Unit = 11, CompletionItemKind.Value = 12, CompletionItemKind.Enum = 13, CompletionItemKind.Keyword = 14, CompletionItemKind.Snippet = 15, CompletionItemKind.Color = 16, CompletionItemKind.File = 17, CompletionItemKind.Reference = 18, CompletionItemKind.Folder = 19, CompletionItemKind.EnumMember = 20, CompletionItemKind.Constant = 21, CompletionItemKind.Struct = 22, CompletionItemKind.Event = 23, CompletionItemKind.Operator = 24, CompletionItemKind.TypeParameter = 25;
    })(CompletionItemKind || (exports.CompletionItemKind = CompletionItemKind = {}));
    var InsertTextFormat;
    (function (InsertTextFormat) {
      InsertTextFormat.PlainText = 1, InsertTextFormat.Snippet = 2;
    })(InsertTextFormat || (exports.InsertTextFormat = InsertTextFormat = {}));
    var CompletionItemTag;
    (function (CompletionItemTag) {
      CompletionItemTag.Deprecated = 1;
    })(CompletionItemTag || (exports.CompletionItemTag = CompletionItemTag = {}));
    var InsertReplaceEdit;
    (function (InsertReplaceEdit) {
      function create(newText, insert, replace) {
        return {
          newText: newText,
          insert: insert,
          replace: replace
        };
      }
      __name(create, "create"), InsertReplaceEdit.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
      }
      __name(is, "is"), InsertReplaceEdit.is = is;
    })(InsertReplaceEdit || (exports.InsertReplaceEdit = InsertReplaceEdit = {}));
    var InsertTextMode;
    (function (InsertTextMode) {
      InsertTextMode.asIs = 1, InsertTextMode.adjustIndentation = 2;
    })(InsertTextMode || (exports.InsertTextMode = InsertTextMode = {}));
    var CompletionItemLabelDetails;
    (function (CompletionItemLabelDetails) {
      function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
      }
      __name(is, "is"), CompletionItemLabelDetails.is = is;
    })(CompletionItemLabelDetails || (exports.CompletionItemLabelDetails = CompletionItemLabelDetails = {}));
    var CompletionItem;
    (function (CompletionItem) {
      function create(label) {
        return {
          label: label
        };
      }
      __name(create, "create"), CompletionItem.create = create;
    })(CompletionItem || (exports.CompletionItem = CompletionItem = {}));
    var CompletionList;
    (function (CompletionList) {
      function create(items, isIncomplete) {
        return {
          items: items || [],
          isIncomplete: !!isIncomplete
        };
      }
      __name(create, "create"), CompletionList.create = create;
    })(CompletionList || (exports.CompletionList = CompletionList = {}));
    var MarkedString;
    (function (MarkedString) {
      function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
      }
      __name(fromPlainText, "fromPlainText"), MarkedString.fromPlainText = fromPlainText;
      function is(value) {
        var candidate = value;
        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
      }
      __name(is, "is"), MarkedString.is = is;
    })(MarkedString || (exports.MarkedString = MarkedString = {}));
    var Hover;
    (function (Hover) {
      function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));
      }
      __name(is, "is"), Hover.is = is;
    })(Hover || (exports.Hover = Hover = {}));
    var ParameterInformation;
    (function (ParameterInformation) {
      function create(label, documentation) {
        return documentation ? {
          label: label,
          documentation: documentation
        } : {
          label: label
        };
      }
      __name(create, "create"), ParameterInformation.create = create;
    })(ParameterInformation || (exports.ParameterInformation = ParameterInformation = {}));
    var SignatureInformation;
    (function (SignatureInformation) {
      function create(label, documentation) {
        for (var parameters = [], _i = 2; _i < arguments.length; _i++) parameters[_i - 2] = arguments[_i];
        var result = {
          label: label
        };
        return Is.defined(documentation) && (result.documentation = documentation), Is.defined(parameters) ? result.parameters = parameters : result.parameters = [], result;
      }
      __name(create, "create"), SignatureInformation.create = create;
    })(SignatureInformation || (exports.SignatureInformation = SignatureInformation = {}));
    var DocumentHighlightKind;
    (function (DocumentHighlightKind) {
      DocumentHighlightKind.Text = 1, DocumentHighlightKind.Read = 2, DocumentHighlightKind.Write = 3;
    })(DocumentHighlightKind || (exports.DocumentHighlightKind = DocumentHighlightKind = {}));
    var DocumentHighlight;
    (function (DocumentHighlight) {
      function create(range, kind) {
        var result = {
          range: range
        };
        return Is.number(kind) && (result.kind = kind), result;
      }
      __name(create, "create"), DocumentHighlight.create = create;
    })(DocumentHighlight || (exports.DocumentHighlight = DocumentHighlight = {}));
    var SymbolKind;
    (function (SymbolKind) {
      SymbolKind.File = 1, SymbolKind.Module = 2, SymbolKind.Namespace = 3, SymbolKind.Package = 4, SymbolKind.Class = 5, SymbolKind.Method = 6, SymbolKind.Property = 7, SymbolKind.Field = 8, SymbolKind.Constructor = 9, SymbolKind.Enum = 10, SymbolKind.Interface = 11, SymbolKind.Function = 12, SymbolKind.Variable = 13, SymbolKind.Constant = 14, SymbolKind.String = 15, SymbolKind.Number = 16, SymbolKind.Boolean = 17, SymbolKind.Array = 18, SymbolKind.Object = 19, SymbolKind.Key = 20, SymbolKind.Null = 21, SymbolKind.EnumMember = 22, SymbolKind.Struct = 23, SymbolKind.Event = 24, SymbolKind.Operator = 25, SymbolKind.TypeParameter = 26;
    })(SymbolKind || (exports.SymbolKind = SymbolKind = {}));
    var SymbolTag;
    (function (SymbolTag) {
      SymbolTag.Deprecated = 1;
    })(SymbolTag || (exports.SymbolTag = SymbolTag = {}));
    var SymbolInformation;
    (function (SymbolInformation) {
      function create(name, kind, range, uri, containerName) {
        var result = {
          name: name,
          kind: kind,
          location: {
            uri: uri,
            range: range
          }
        };
        return containerName && (result.containerName = containerName), result;
      }
      __name(create, "create"), SymbolInformation.create = create;
    })(SymbolInformation || (exports.SymbolInformation = SymbolInformation = {}));
    var WorkspaceSymbol;
    (function (WorkspaceSymbol) {
      function create(name, kind, uri, range) {
        return range !== void 0 ? {
          name: name,
          kind: kind,
          location: {
            uri: uri,
            range: range
          }
        } : {
          name: name,
          kind: kind,
          location: {
            uri: uri
          }
        };
      }
      __name(create, "create"), WorkspaceSymbol.create = create;
    })(WorkspaceSymbol || (exports.WorkspaceSymbol = WorkspaceSymbol = {}));
    var DocumentSymbol;
    (function (DocumentSymbol) {
      function create(name, detail, kind, range, selectionRange, children) {
        var result = {
          name: name,
          detail: detail,
          kind: kind,
          range: range,
          selectionRange: selectionRange
        };
        return children !== void 0 && (result.children = children), result;
      }
      __name(create, "create"), DocumentSymbol.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
      }
      __name(is, "is"), DocumentSymbol.is = is;
    })(DocumentSymbol || (exports.DocumentSymbol = DocumentSymbol = {}));
    var CodeActionKind;
    (function (CodeActionKind) {
      CodeActionKind.Empty = "", CodeActionKind.QuickFix = "quickfix", CodeActionKind.Refactor = "refactor", CodeActionKind.RefactorExtract = "refactor.extract", CodeActionKind.RefactorInline = "refactor.inline", CodeActionKind.RefactorRewrite = "refactor.rewrite", CodeActionKind.Source = "source", CodeActionKind.SourceOrganizeImports = "source.organizeImports", CodeActionKind.SourceFixAll = "source.fixAll";
    })(CodeActionKind || (exports.CodeActionKind = CodeActionKind = {}));
    var CodeActionTriggerKind;
    (function (CodeActionTriggerKind) {
      CodeActionTriggerKind.Invoked = 1, CodeActionTriggerKind.Automatic = 2;
    })(CodeActionTriggerKind || (exports.CodeActionTriggerKind = CodeActionTriggerKind = {}));
    var CodeActionContext;
    (function (CodeActionContext) {
      function create(diagnostics, only, triggerKind) {
        var result = {
          diagnostics: diagnostics
        };
        return only != null && (result.only = only), triggerKind != null && (result.triggerKind = triggerKind), result;
      }
      __name(create, "create"), CodeActionContext.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
      }
      __name(is, "is"), CodeActionContext.is = is;
    })(CodeActionContext || (exports.CodeActionContext = CodeActionContext = {}));
    var CodeAction;
    (function (CodeAction) {
      function create(title, kindOrCommandOrEdit, kind) {
        var result = {
            title: title
          },
          checkKind = !0;
        return typeof kindOrCommandOrEdit == "string" ? (checkKind = !1, result.kind = kindOrCommandOrEdit) : Command.is(kindOrCommandOrEdit) ? result.command = kindOrCommandOrEdit : result.edit = kindOrCommandOrEdit, checkKind && kind !== void 0 && (result.kind = kind), result;
      }
      __name(create, "create"), CodeAction.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
      }
      __name(is, "is"), CodeAction.is = is;
    })(CodeAction || (exports.CodeAction = CodeAction = {}));
    var CodeLens;
    (function (CodeLens) {
      function create(range, data) {
        var result = {
          range: range
        };
        return Is.defined(data) && (result.data = data), result;
      }
      __name(create, "create"), CodeLens.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
      }
      __name(is, "is"), CodeLens.is = is;
    })(CodeLens || (exports.CodeLens = CodeLens = {}));
    var FormattingOptions;
    (function (FormattingOptions) {
      function create(tabSize, insertSpaces) {
        return {
          tabSize: tabSize,
          insertSpaces: insertSpaces
        };
      }
      __name(create, "create"), FormattingOptions.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
      }
      __name(is, "is"), FormattingOptions.is = is;
    })(FormattingOptions || (exports.FormattingOptions = FormattingOptions = {}));
    var DocumentLink;
    (function (DocumentLink) {
      function create(range, target, data) {
        return {
          range: range,
          target: target,
          data: data
        };
      }
      __name(create, "create"), DocumentLink.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
      }
      __name(is, "is"), DocumentLink.is = is;
    })(DocumentLink || (exports.DocumentLink = DocumentLink = {}));
    var SelectionRange;
    (function (SelectionRange) {
      function create(range, parent) {
        return {
          range: range,
          parent: parent
        };
      }
      __name(create, "create"), SelectionRange.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange.is(candidate.parent));
      }
      __name(is, "is"), SelectionRange.is = is;
    })(SelectionRange || (exports.SelectionRange = SelectionRange = {}));
    var SemanticTokenTypes;
    (function (SemanticTokenTypes) {
      SemanticTokenTypes.namespace = "namespace", SemanticTokenTypes.type = "type", SemanticTokenTypes.class = "class", SemanticTokenTypes.enum = "enum", SemanticTokenTypes.interface = "interface", SemanticTokenTypes.struct = "struct", SemanticTokenTypes.typeParameter = "typeParameter", SemanticTokenTypes.parameter = "parameter", SemanticTokenTypes.variable = "variable", SemanticTokenTypes.property = "property", SemanticTokenTypes.enumMember = "enumMember", SemanticTokenTypes.event = "event", SemanticTokenTypes.function = "function", SemanticTokenTypes.method = "method", SemanticTokenTypes.macro = "macro", SemanticTokenTypes.keyword = "keyword", SemanticTokenTypes.modifier = "modifier", SemanticTokenTypes.comment = "comment", SemanticTokenTypes.string = "string", SemanticTokenTypes.number = "number", SemanticTokenTypes.regexp = "regexp", SemanticTokenTypes.operator = "operator", SemanticTokenTypes.decorator = "decorator";
    })(SemanticTokenTypes || (exports.SemanticTokenTypes = SemanticTokenTypes = {}));
    var SemanticTokenModifiers;
    (function (SemanticTokenModifiers) {
      SemanticTokenModifiers.declaration = "declaration", SemanticTokenModifiers.definition = "definition", SemanticTokenModifiers.readonly = "readonly", SemanticTokenModifiers.static = "static", SemanticTokenModifiers.deprecated = "deprecated", SemanticTokenModifiers.abstract = "abstract", SemanticTokenModifiers.async = "async", SemanticTokenModifiers.modification = "modification", SemanticTokenModifiers.documentation = "documentation", SemanticTokenModifiers.defaultLibrary = "defaultLibrary";
    })(SemanticTokenModifiers || (exports.SemanticTokenModifiers = SemanticTokenModifiers = {}));
    var SemanticTokens;
    (function (SemanticTokens) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId == "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] == "number");
      }
      __name(is, "is"), SemanticTokens.is = is;
    })(SemanticTokens || (exports.SemanticTokens = SemanticTokens = {}));
    var InlineValueText;
    (function (InlineValueText) {
      function create(range, text) {
        return {
          range: range,
          text: text
        };
      }
      __name(create, "create"), InlineValueText.create = create;
      function is(value) {
        var candidate = value;
        return candidate != null && Range.is(candidate.range) && Is.string(candidate.text);
      }
      __name(is, "is"), InlineValueText.is = is;
    })(InlineValueText || (exports.InlineValueText = InlineValueText = {}));
    var InlineValueVariableLookup;
    (function (InlineValueVariableLookup) {
      function create(range, variableName, caseSensitiveLookup) {
        return {
          range: range,
          variableName: variableName,
          caseSensitiveLookup: caseSensitiveLookup
        };
      }
      __name(create, "create"), InlineValueVariableLookup.create = create;
      function is(value) {
        var candidate = value;
        return candidate != null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
      }
      __name(is, "is"), InlineValueVariableLookup.is = is;
    })(InlineValueVariableLookup || (exports.InlineValueVariableLookup = InlineValueVariableLookup = {}));
    var InlineValueEvaluatableExpression;
    (function (InlineValueEvaluatableExpression) {
      function create(range, expression) {
        return {
          range: range,
          expression: expression
        };
      }
      __name(create, "create"), InlineValueEvaluatableExpression.create = create;
      function is(value) {
        var candidate = value;
        return candidate != null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
      }
      __name(is, "is"), InlineValueEvaluatableExpression.is = is;
    })(InlineValueEvaluatableExpression || (exports.InlineValueEvaluatableExpression = InlineValueEvaluatableExpression = {}));
    var InlineValueContext;
    (function (InlineValueContext) {
      function create(frameId, stoppedLocation) {
        return {
          frameId: frameId,
          stoppedLocation: stoppedLocation
        };
      }
      __name(create, "create"), InlineValueContext.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
      }
      __name(is, "is"), InlineValueContext.is = is;
    })(InlineValueContext || (exports.InlineValueContext = InlineValueContext = {}));
    var InlayHintKind;
    (function (InlayHintKind) {
      InlayHintKind.Type = 1, InlayHintKind.Parameter = 2;
      function is(value) {
        return value === 1 || value === 2;
      }
      __name(is, "is"), InlayHintKind.is = is;
    })(InlayHintKind || (exports.InlayHintKind = InlayHintKind = {}));
    var InlayHintLabelPart;
    (function (InlayHintLabelPart) {
      function create(value) {
        return {
          value: value
        };
      }
      __name(create, "create"), InlayHintLabelPart.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
      }
      __name(is, "is"), InlayHintLabelPart.is = is;
    })(InlayHintLabelPart || (exports.InlayHintLabelPart = InlayHintLabelPart = {}));
    var InlayHint;
    (function (InlayHint) {
      function create(position, label, kind) {
        var result = {
          position: position,
          label: label
        };
        return kind !== void 0 && (result.kind = kind), result;
      }
      __name(create, "create"), InlayHint.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
      }
      __name(is, "is"), InlayHint.is = is;
    })(InlayHint || (exports.InlayHint = InlayHint = {}));
    var StringValue;
    (function (StringValue) {
      function createSnippet(value) {
        return {
          kind: "snippet",
          value: value
        };
      }
      __name(createSnippet, "createSnippet"), StringValue.createSnippet = createSnippet;
    })(StringValue || (exports.StringValue = StringValue = {}));
    var InlineCompletionItem;
    (function (InlineCompletionItem) {
      function create(insertText, filterText, range, command) {
        return {
          insertText: insertText,
          filterText: filterText,
          range: range,
          command: command
        };
      }
      __name(create, "create"), InlineCompletionItem.create = create;
    })(InlineCompletionItem || (exports.InlineCompletionItem = InlineCompletionItem = {}));
    var InlineCompletionList;
    (function (InlineCompletionList) {
      function create(items) {
        return {
          items: items
        };
      }
      __name(create, "create"), InlineCompletionList.create = create;
    })(InlineCompletionList || (exports.InlineCompletionList = InlineCompletionList = {}));
    var InlineCompletionTriggerKind;
    (function (InlineCompletionTriggerKind) {
      InlineCompletionTriggerKind.Invoked = 0, InlineCompletionTriggerKind.Automatic = 1;
    })(InlineCompletionTriggerKind || (exports.InlineCompletionTriggerKind = InlineCompletionTriggerKind = {}));
    var SelectedCompletionInfo;
    (function (SelectedCompletionInfo) {
      function create(range, text) {
        return {
          range: range,
          text: text
        };
      }
      __name(create, "create"), SelectedCompletionInfo.create = create;
    })(SelectedCompletionInfo || (exports.SelectedCompletionInfo = SelectedCompletionInfo = {}));
    var InlineCompletionContext;
    (function (InlineCompletionContext) {
      function create(triggerKind, selectedCompletionInfo) {
        return {
          triggerKind: triggerKind,
          selectedCompletionInfo: selectedCompletionInfo
        };
      }
      __name(create, "create"), InlineCompletionContext.create = create;
    })(InlineCompletionContext || (exports.InlineCompletionContext = InlineCompletionContext = {}));
    var WorkspaceFolder;
    (function (WorkspaceFolder) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
      }
      __name(is, "is"), WorkspaceFolder.is = is;
    })(WorkspaceFolder || (exports.WorkspaceFolder = WorkspaceFolder = {})), exports.EOL = [`
`, `\r
`, "\r"];
    var TextDocument;
    (function (TextDocument) {
      function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
      }
      __name(create, "create"), TextDocument.create = create;
      function is(value) {
        var candidate = value;
        return !!(Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt));
      }
      __name(is, "is"), TextDocument.is = is;
      function applyEdits(document, edits) {
        for (var text = document.getText(), sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            return diff === 0 ? a.range.start.character - b.range.start.character : diff;
          }), lastModifiedOffset = text.length, i = sortedEdits.length - 1; i >= 0; i--) {
          var e = sortedEdits[i],
            startOffset = document.offsetAt(e.range.start),
            endOffset = document.offsetAt(e.range.end);
          if (endOffset <= lastModifiedOffset) text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);else throw new Error("Overlapping edit");
          lastModifiedOffset = startOffset;
        }
        return text;
      }
      __name(applyEdits, "applyEdits"), TextDocument.applyEdits = applyEdits;
      function mergeSort(data, compare) {
        if (data.length <= 1) return data;
        var p = data.length / 2 | 0,
          left = data.slice(0, p),
          right = data.slice(p);
        mergeSort(left, compare), mergeSort(right, compare);
        for (var leftIdx = 0, rightIdx = 0, i = 0; leftIdx < left.length && rightIdx < right.length;) {
          var ret = compare(left[leftIdx], right[rightIdx]);
          ret <= 0 ? data[i++] = left[leftIdx++] : data[i++] = right[rightIdx++];
        }
        for (; leftIdx < left.length;) data[i++] = left[leftIdx++];
        for (; rightIdx < right.length;) data[i++] = right[rightIdx++];
        return data;
      }
      __name(mergeSort, "mergeSort");
    })(TextDocument || (exports.TextDocument = TextDocument = {}));
    var FullTextDocument = function () {
        function FullTextDocument(uri, languageId, version, content) {
          this._uri = uri, this._languageId = languageId, this._version = version, this._content = content, this._lineOffsets = void 0;
        }
        return __name(FullTextDocument, "FullTextDocument"), Object.defineProperty(FullTextDocument.prototype, "uri", {
          get: __name(function () {
            return this._uri;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), Object.defineProperty(FullTextDocument.prototype, "languageId", {
          get: __name(function () {
            return this._languageId;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), Object.defineProperty(FullTextDocument.prototype, "version", {
          get: __name(function () {
            return this._version;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), FullTextDocument.prototype.getText = function (range) {
          if (range) {
            var start = this.offsetAt(range.start),
              end = this.offsetAt(range.end);
            return this._content.substring(start, end);
          }
          return this._content;
        }, FullTextDocument.prototype.update = function (event, version) {
          this._content = event.text, this._version = version, this._lineOffsets = void 0;
        }, FullTextDocument.prototype.getLineOffsets = function () {
          if (this._lineOffsets === void 0) {
            for (var lineOffsets = [], text = this._content, isLineStart = !0, i = 0; i < text.length; i++) {
              isLineStart && (lineOffsets.push(i), isLineStart = !1);
              var ch = text.charAt(i);
              isLineStart = ch === "\r" || ch === `
`, ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === `
` && i++;
            }
            isLineStart && text.length > 0 && lineOffsets.push(text.length), this._lineOffsets = lineOffsets;
          }
          return this._lineOffsets;
        }, FullTextDocument.prototype.positionAt = function (offset) {
          offset = Math.max(Math.min(offset, this._content.length), 0);
          var lineOffsets = this.getLineOffsets(),
            low = 0,
            high = lineOffsets.length;
          if (high === 0) return Position.create(0, offset);
          for (; low < high;) {
            var mid = Math.floor((low + high) / 2);
            lineOffsets[mid] > offset ? high = mid : low = mid + 1;
          }
          var line = low - 1;
          return Position.create(line, offset - lineOffsets[line]);
        }, FullTextDocument.prototype.offsetAt = function (position) {
          var lineOffsets = this.getLineOffsets();
          if (position.line >= lineOffsets.length) return this._content.length;
          if (position.line < 0) return 0;
          var lineOffset = lineOffsets[position.line],
            nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
          return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
        }, Object.defineProperty(FullTextDocument.prototype, "lineCount", {
          get: __name(function () {
            return this.getLineOffsets().length;
          }, "get"),
          enumerable: !1,
          configurable: !0
        }), FullTextDocument;
      }(),
      Is;
    (function (Is) {
      var toString = Object.prototype.toString;
      function defined(value) {
        return typeof value < "u";
      }
      __name(defined, "defined"), Is.defined = defined;
      function undefined(value) {
        return typeof value > "u";
      }
      __name(undefined, "undefined"), Is.undefined = undefined;
      function boolean(value) {
        return value === !0 || value === !1;
      }
      __name(boolean, "boolean"), Is.boolean = boolean;
      function string(value) {
        return toString.call(value) === "[object String]";
      }
      __name(string, "string"), Is.string = string;
      function number(value) {
        return toString.call(value) === "[object Number]";
      }
      __name(number, "number"), Is.number = number;
      function numberRange(value, min, max) {
        return toString.call(value) === "[object Number]" && min <= value && value <= max;
      }
      __name(numberRange, "numberRange"), Is.numberRange = numberRange;
      function integer(value) {
        return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
      }
      __name(integer, "integer"), Is.integer = integer;
      function uinteger(value) {
        return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
      }
      __name(uinteger, "uinteger"), Is.uinteger = uinteger;
      function func(value) {
        return toString.call(value) === "[object Function]";
      }
      __name(func, "func"), Is.func = func;
      function objectLiteral(value) {
        return value !== null && typeof value == "object";
      }
      __name(objectLiteral, "objectLiteral"), Is.objectLiteral = objectLiteral;
      function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
      }
      __name(typedArray, "typedArray"), Is.typedArray = typedArray;
    })(Is || (Is = {}));
  });
});