var _ParseError = class _ParseError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
};,__name(_ParseError, "ParseError");,var ParseError = _ParseError,
  ParseRegistry;,(function (ParseRegistry) {
  let registry = new Map([["Assert", (type, references, value) => (Assert(type, references, value), value)], ["Cast", (type, references, value) => Cast(type, references, value)], ["Clean", (type, references, value) => Clean(type, references, value)], ["Clone", (_type, _references, value) => Clone(value)], ["Convert", (type, references, value) => Convert(type, references, value)], ["Decode", (type, references, value) => HasTransform(type, references) ? TransformDecode(type, references, value) : value], ["Default", (type, references, value) => Default(type, references, value)], ["Encode", (type, references, value) => HasTransform(type, references) ? TransformEncode(type, references, value) : value]]);
  function Delete(key) {
    registry.delete(key);
  }
  __name(Delete, "Delete"), ParseRegistry.Delete = Delete;
  function Set(key, callback) {
    registry.set(key, callback);
  }
  __name(Set, "Set"), ParseRegistry.Set = Set;
  function Get(key) {
    return registry.get(key);
  }
  __name(Get, "Get"), ParseRegistry.Get = Get;
})(ParseRegistry || (ParseRegistry = {}));,var ParseDefault = ["Clone", "Clean", "Default", "Convert", "Assert", "Decode"];,function ParseValue(operations, type, references, value) {
  return operations.reduce((value, operationKey) => {
    let operation = ParseRegistry.Get(operationKey);
    if (IsUndefined(operation)) throw new ParseError(`Unable to find Parse operation '${operationKey}'`);
    return operation(type, references, value);
  }, value);
},__name(ParseValue, "ParseValue");,function Parse(...args) {
  let [operations, schema, references, value] = args.length === 4 ? [args[0], args[1], args[2], args[3]] : args.length === 3 ? IsArray(args[0]) ? [args[0], args[1], [], args[2]] : [ParseDefault, args[0], args[1], args[2]] : args.length === 2 ? [ParseDefault, args[0], [], args[1]] : (() => {
    throw new ParseError("Invalid Arguments");
  })();
  return ParseValue(operations, schema, references, value);
},__name(Parse, "Parse");