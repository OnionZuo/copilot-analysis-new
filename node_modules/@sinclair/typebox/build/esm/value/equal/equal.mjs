function ObjectType(left, right) {
  if (!IsObject(right)) return !1;
  let leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)],
    rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];
  return leftKeys.length !== rightKeys.length ? !1 : leftKeys.every(key => Equal(left[key], right[key]));
},__name(ObjectType, "ObjectType");,function DateType(left, right) {
  return IsDate(right) && left.getTime() === right.getTime();
},__name(DateType, "DateType");,function ArrayType(left, right) {
  return !IsArray(right) || left.length !== right.length ? !1 : left.every((value, index) => Equal(value, right[index]));
},__name(ArrayType, "ArrayType");,function TypedArrayType(left, right) {
  return !IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name ? !1 : left.every((value, index) => Equal(value, right[index]));
},__name(TypedArrayType, "TypedArrayType");,function ValueType(left, right) {
  return left === right;
},__name(ValueType, "ValueType");,function Equal(left, right) {
  if (IsDate(left)) return DateType(left, right);
  if (IsTypedArray(left)) return TypedArrayType(left, right);
  if (IsArray(left)) return ArrayType(left, right);
  if (IsObject(left)) return ObjectType(left, right);
  if (IsValueType(left)) return ValueType(left, right);
  throw new Error("ValueEquals: Unable to compare value");
},__name(Equal, "Equal");