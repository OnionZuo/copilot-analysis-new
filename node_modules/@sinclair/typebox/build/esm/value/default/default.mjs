function ValueOrDefault(schema, value) {
  let defaultValue = HasPropertyKey(schema, "default") ? schema.default : void 0,
    clone = IsFunction(defaultValue) ? defaultValue() : Clone(defaultValue);
  return IsUndefined(value) ? clone : IsObject(value) && IsObject(clone) ? Object.assign(clone, value) : value;
},__name(ValueOrDefault, "ValueOrDefault");,function HasDefaultProperty(schema) {
  return IsKind(schema) && "default" in schema;
},__name(HasDefaultProperty, "HasDefaultProperty");,function FromArray(schema, references, value) {
  if (IsArray(value)) {
    for (let i = 0; i < value.length; i++) value[i] = Visit(schema.items, references, value[i]);
    return value;
  }
  let defaulted = ValueOrDefault(schema, value);
  if (!IsArray(defaulted)) return defaulted;
  for (let i = 0; i < defaulted.length; i++) defaulted[i] = Visit(schema.items, references, defaulted[i]);
  return defaulted;
},__name(FromArray, "FromArray");,function FromDate(schema, references, value) {
  return IsDate(value) ? value : ValueOrDefault(schema, value);
},__name(FromDate, "FromDate");,function FromImport(schema, references, value) {
  let definitions = globalThis.Object.values(schema.$defs),
    target = schema.$defs[schema.$ref];
  return Visit(target, [...references, ...definitions], value);
},__name(FromImport, "FromImport");,function FromIntersect(schema, references, value) {
  let defaulted = ValueOrDefault(schema, value);
  return schema.allOf.reduce((acc, schema) => {
    let next = Visit(schema, references, defaulted);
    return IsObject(next) ? {
      ...acc,
      ...next
    } : next;
  }, {});
},__name(FromIntersect, "FromIntersect");,function FromObject(schema, references, value) {
  let defaulted = ValueOrDefault(schema, value);
  if (!IsObject(defaulted)) return defaulted;
  let knownPropertyKeys = Object.getOwnPropertyNames(schema.properties);
  for (let key of knownPropertyKeys) {
    let propertyValue = Visit(schema.properties[key], references, defaulted[key]);
    IsUndefined(propertyValue) || (defaulted[key] = Visit(schema.properties[key], references, defaulted[key]));
  }
  if (!HasDefaultProperty(schema.additionalProperties)) return defaulted;
  for (let key of Object.getOwnPropertyNames(defaulted)) knownPropertyKeys.includes(key) || (defaulted[key] = Visit(schema.additionalProperties, references, defaulted[key]));
  return defaulted;
},__name(FromObject, "FromObject");,function FromRecord(schema, references, value) {
  let defaulted = ValueOrDefault(schema, value);
  if (!IsObject(defaulted)) return defaulted;
  let additionalPropertiesSchema = schema.additionalProperties,
    [propertyKeyPattern, propertySchema] = Object.entries(schema.patternProperties)[0],
    knownPropertyKey = new RegExp(propertyKeyPattern);
  for (let key of Object.getOwnPropertyNames(defaulted)) knownPropertyKey.test(key) && HasDefaultProperty(propertySchema) && (defaulted[key] = Visit(propertySchema, references, defaulted[key]));
  if (!HasDefaultProperty(additionalPropertiesSchema)) return defaulted;
  for (let key of Object.getOwnPropertyNames(defaulted)) knownPropertyKey.test(key) || (defaulted[key] = Visit(additionalPropertiesSchema, references, defaulted[key]));
  return defaulted;
},__name(FromRecord, "FromRecord");,function FromRef(schema, references, value) {
  return Visit(Deref(schema, references), references, ValueOrDefault(schema, value));
},__name(FromRef, "FromRef");,function FromThis(schema, references, value) {
  return Visit(Deref(schema, references), references, value);
},__name(FromThis, "FromThis");,function FromTuple(schema, references, value) {
  let defaulted = ValueOrDefault(schema, value);
  if (!IsArray(defaulted) || IsUndefined(schema.items)) return defaulted;
  let [items, max] = [schema.items, Math.max(schema.items.length, defaulted.length)];
  for (let i = 0; i < max; i++) i < items.length && (defaulted[i] = Visit(items[i], references, defaulted[i]));
  return defaulted;
},__name(FromTuple, "FromTuple");,function FromUnion(schema, references, value) {
  let defaulted = ValueOrDefault(schema, value);
  for (let inner of schema.anyOf) {
    let result = Visit(inner, references, Clone(defaulted));
    if (Check(inner, references, result)) return result;
  }
  return defaulted;
},__name(FromUnion, "FromUnion");,function Visit(schema, references, value) {
  let references_ = Pushref(schema, references),
    schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray(schema_, references_, value);
    case "Date":
      return FromDate(schema_, references_, value);
    case "Import":
      return FromImport(schema_, references_, value);
    case "Intersect":
      return FromIntersect(schema_, references_, value);
    case "Object":
      return FromObject(schema_, references_, value);
    case "Record":
      return FromRecord(schema_, references_, value);
    case "Ref":
      return FromRef(schema_, references_, value);
    case "This":
      return FromThis(schema_, references_, value);
    case "Tuple":
      return FromTuple(schema_, references_, value);
    case "Union":
      return FromUnion(schema_, references_, value);
    default:
      return ValueOrDefault(schema_, value);
  }
},__name(Visit, "Visit");,function Default(...args) {
  return args.length === 3 ? Visit(args[0], args[1], args[2]) : Visit(args[0], [], args[1]);
},__name(Default, "Default");