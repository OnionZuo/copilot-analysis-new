function IsStandardObject(value) {
  return IsObject(value) && !IsArray(value);
},__name(IsStandardObject, "IsStandardObject");,var _ValueMutateError = class _ValueMutateError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
};,__name(_ValueMutateError, "ValueMutateError");,var ValueMutateError = _ValueMutateError;,function ObjectType(root, path, current, next) {
  if (!IsStandardObject(current)) pointer_exports.Set(root, path, Clone(next));else {
    let currentKeys = Object.getOwnPropertyNames(current),
      nextKeys = Object.getOwnPropertyNames(next);
    for (let currentKey of currentKeys) nextKeys.includes(currentKey) || delete current[currentKey];
    for (let nextKey of nextKeys) currentKeys.includes(nextKey) || (current[nextKey] = null);
    for (let nextKey of nextKeys) Visit(root, `${path}/${nextKey}`, current[nextKey], next[nextKey]);
  }
},__name(ObjectType, "ObjectType");,function ArrayType(root, path, current, next) {
  if (!IsArray(current)) pointer_exports.Set(root, path, Clone(next));else {
    for (let index = 0; index < next.length; index++) Visit(root, `${path}/${index}`, current[index], next[index]);
    current.splice(next.length);
  }
},__name(ArrayType, "ArrayType");,function TypedArrayType(root, path, current, next) {
  if (IsTypedArray(current) && current.length === next.length) for (let i = 0; i < current.length; i++) current[i] = next[i];else pointer_exports.Set(root, path, Clone(next));
},__name(TypedArrayType, "TypedArrayType");,function ValueType(root, path, current, next) {
  current !== next && pointer_exports.Set(root, path, next);
},__name(ValueType, "ValueType");,function Visit(root, path, current, next) {
  if (IsArray(next)) return ArrayType(root, path, current, next);
  if (IsTypedArray(next)) return TypedArrayType(root, path, current, next);
  if (IsStandardObject(next)) return ObjectType(root, path, current, next);
  if (IsValueType(next)) return ValueType(root, path, current, next);
},__name(Visit, "Visit");,function IsNonMutableValue(value) {
  return IsTypedArray(value) || IsValueType(value);
},__name(IsNonMutableValue, "IsNonMutableValue");,function IsMismatchedValue(current, next) {
  return IsStandardObject(current) && IsArray(next) || IsArray(current) && IsStandardObject(next);
},__name(IsMismatchedValue, "IsMismatchedValue");,function Mutate(current, next) {
  if (IsNonMutableValue(current) || IsNonMutableValue(next)) throw new ValueMutateError("Only object and array types can be mutated at the root level");
  if (IsMismatchedValue(current, next)) throw new ValueMutateError("Cannot assign due type mismatch of assignable values");
  Visit(current, "", current, next);
},__name(Mutate, "Mutate");