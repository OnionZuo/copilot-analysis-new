var _ValueHashError = class _ValueHashError extends TypeBoxError {
  constructor(value) {
    super("Unable to hash value"), this.value = value;
  }
};,__name(_ValueHashError, "ValueHashError");,var ValueHashError = _ValueHashError,
  ByteMarker;,(function (ByteMarker) {
  ByteMarker[ByteMarker.Undefined = 0] = "Undefined", ByteMarker[ByteMarker.Null = 1] = "Null", ByteMarker[ByteMarker.Boolean = 2] = "Boolean", ByteMarker[ByteMarker.Number = 3] = "Number", ByteMarker[ByteMarker.String = 4] = "String", ByteMarker[ByteMarker.Object = 5] = "Object", ByteMarker[ByteMarker.Array = 6] = "Array", ByteMarker[ByteMarker.Date = 7] = "Date", ByteMarker[ByteMarker.Uint8Array = 8] = "Uint8Array", ByteMarker[ByteMarker.Symbol = 9] = "Symbol", ByteMarker[ByteMarker.BigInt = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));,var Accumulator = BigInt("14695981039346656037"),
  [Prime, Size] = [BigInt("1099511628211"), BigInt("18446744073709551616")],
  Bytes = Array.from({
    length: 256
  }).map((_, i) => BigInt(i)),
  F64 = new Float64Array(1),
  F64In = new DataView(F64.buffer),
  F64Out = new Uint8Array(F64.buffer);,function* NumberToBytes(value) {
  let byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);
  for (let i = 0; i < byteCount; i++) yield value >> 8 * (byteCount - 1 - i) & 255;
},__name(NumberToBytes, "NumberToBytes");,function ArrayType(value) {
  FNV1A64(ByteMarker.Array);
  for (let item of value) Visit(item);
},__name(ArrayType, "ArrayType");,function BooleanType(value) {
  FNV1A64(ByteMarker.Boolean), FNV1A64(value ? 1 : 0);
},__name(BooleanType, "BooleanType");,function BigIntType(value) {
  FNV1A64(ByteMarker.BigInt), F64In.setBigInt64(0, value);
  for (let byte of F64Out) FNV1A64(byte);
},__name(BigIntType, "BigIntType");,function DateType(value) {
  FNV1A64(ByteMarker.Date), Visit(value.getTime());
},__name(DateType, "DateType");,function NullType(value) {
  FNV1A64(ByteMarker.Null);
},__name(NullType, "NullType");,function NumberType(value) {
  FNV1A64(ByteMarker.Number), F64In.setFloat64(0, value);
  for (let byte of F64Out) FNV1A64(byte);
},__name(NumberType, "NumberType");,function ObjectType(value) {
  FNV1A64(ByteMarker.Object);
  for (let key of globalThis.Object.getOwnPropertyNames(value).sort()) Visit(key), Visit(value[key]);
},__name(ObjectType, "ObjectType");,function StringType(value) {
  FNV1A64(ByteMarker.String);
  for (let i = 0; i < value.length; i++) for (let byte of NumberToBytes(value.charCodeAt(i))) FNV1A64(byte);
},__name(StringType, "StringType");,function SymbolType(value) {
  FNV1A64(ByteMarker.Symbol), Visit(value.description);
},__name(SymbolType, "SymbolType");,function Uint8ArrayType(value) {
  FNV1A64(ByteMarker.Uint8Array);
  for (let i = 0; i < value.length; i++) FNV1A64(value[i]);
},__name(Uint8ArrayType, "Uint8ArrayType");,function UndefinedType(value) {
  return FNV1A64(ByteMarker.Undefined);
},__name(UndefinedType, "UndefinedType");,function Visit(value) {
  if (IsArray(value)) return ArrayType(value);
  if (IsBoolean(value)) return BooleanType(value);
  if (IsBigInt(value)) return BigIntType(value);
  if (IsDate(value)) return DateType(value);
  if (IsNull(value)) return NullType(value);
  if (IsNumber(value)) return NumberType(value);
  if (IsObject(value)) return ObjectType(value);
  if (IsString(value)) return StringType(value);
  if (IsSymbol(value)) return SymbolType(value);
  if (IsUint8Array(value)) return Uint8ArrayType(value);
  if (IsUndefined(value)) return UndefinedType(value);
  throw new ValueHashError(value);
},__name(Visit, "Visit");,function FNV1A64(byte) {
  Accumulator = Accumulator ^ Bytes[byte], Accumulator = Accumulator * Prime % Size;
},__name(FNV1A64, "FNV1A64");,function Hash(value) {
  return Accumulator = BigInt("14695981039346656037"), Visit(value), Accumulator;
},__name(Hash, "Hash");