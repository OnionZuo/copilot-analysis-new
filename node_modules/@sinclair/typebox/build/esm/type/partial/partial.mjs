function FromComputed(target, parameters) {
  return Computed("Partial", [Computed(target, parameters)]);
},__name(FromComputed, "FromComputed");,function FromRef($ref) {
  return Computed("Partial", [Ref($ref)]);
},__name(FromRef, "FromRef");,function FromProperties(properties) {
  let partialProperties = {};
  for (let K of globalThis.Object.getOwnPropertyNames(properties)) partialProperties[K] = Optional(properties[K]);
  return partialProperties;
},__name(FromProperties, "FromProperties");,function FromObject(type) {
  let options = Discard(type, [TransformKind, "$id", "required", "properties"]),
    properties = FromProperties(type.properties);
  return Object(properties, options);
},__name(FromObject, "FromObject");,function FromRest(types) {
  return types.map(type => PartialResolve(type));
},__name(FromRest, "FromRest");,function PartialResolve(type) {
  return IsComputed(type) ? FromComputed(type.target, type.parameters) : IsRef(type) ? FromRef(type.$ref) : IsIntersect(type) ? Intersect(FromRest(type.allOf)) : IsUnion(type) ? Union(FromRest(type.anyOf)) : IsObject(type) ? FromObject(type) : IsBigInt(type) || IsBoolean(type) || IsInteger(type) || IsLiteral(type) || IsNull(type) || IsNumber(type) || IsString(type) || IsSymbol(type) || IsUndefined(type) ? type : Object({});
},__name(PartialResolve, "PartialResolve");,function Partial(type, options) {
  return IsMappedResult(type) ? PartialFromMappedResult(type, options) : CreateType({
    ...PartialResolve(type),
    ...options
  });
},__name(Partial, "Partial");