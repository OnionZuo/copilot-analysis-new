function FromConstructor(args, type) {
  return type.parameters = FromTypes(args, type.parameters), type.returns = FromType(args, type.returns), type;
},__name(FromConstructor, "FromConstructor");,function FromFunction(args, type) {
  return type.parameters = FromTypes(args, type.parameters), type.returns = FromType(args, type.returns), type;
},__name(FromFunction, "FromFunction");,function FromIntersect(args, type) {
  return type.allOf = FromTypes(args, type.allOf), type;
},__name(FromIntersect, "FromIntersect");,function FromUnion(args, type) {
  return type.anyOf = FromTypes(args, type.anyOf), type;
},__name(FromUnion, "FromUnion");,function FromTuple(args, type) {
  return IsUndefined(type.items) || (type.items = FromTypes(args, type.items)), type;
},__name(FromTuple, "FromTuple");,function FromArray(args, type) {
  return type.items = FromType(args, type.items), type;
},__name(FromArray, "FromArray");,function FromAsyncIterator(args, type) {
  return type.items = FromType(args, type.items), type;
},__name(FromAsyncIterator, "FromAsyncIterator");,function FromIterator(args, type) {
  return type.items = FromType(args, type.items), type;
},__name(FromIterator, "FromIterator");,function FromPromise(args, type) {
  return type.item = FromType(args, type.item), type;
},__name(FromPromise, "FromPromise");,function FromObject(args, type) {
  let mappedProperties = FromProperties(args, type.properties);
  return {
    ...type,
    ...Object(mappedProperties)
  };
},__name(FromObject, "FromObject");,function FromRecord(args, type) {
  let mappedKey = FromType(args, RecordKey(type)),
    mappedValue = FromType(args, RecordValue(type)),
    result = Record(mappedKey, mappedValue);
  return {
    ...type,
    ...result
  };
},__name(FromRecord, "FromRecord");,function FromArgument(args, argument) {
  return argument.index in args ? args[argument.index] : Unknown();
},__name(FromArgument, "FromArgument");,function FromProperty(args, type) {
  let isReadonly = IsReadonly(type),
    isOptional = IsOptional(type),
    mapped = FromType(args, type);
  return isReadonly && isOptional ? ReadonlyOptional(mapped) : isReadonly && !isOptional ? Readonly(mapped) : !isReadonly && isOptional ? Optional(mapped) : mapped;
},__name(FromProperty, "FromProperty");,function FromProperties(args, properties) {
  return globalThis.Object.getOwnPropertyNames(properties).reduce((result, key) => ({
    ...result,
    [key]: FromProperty(args, properties[key])
  }), {});
},__name(FromProperties, "FromProperties");,function FromTypes(args, types) {
  return types.map(type => FromType(args, type));
},__name(FromTypes, "FromTypes");,function FromType(args, type) {
  return IsConstructor(type) ? FromConstructor(args, type) : IsFunction(type) ? FromFunction(args, type) : IsIntersect(type) ? FromIntersect(args, type) : IsUnion(type) ? FromUnion(args, type) : IsTuple(type) ? FromTuple(args, type) : IsArray(type) ? FromArray(args, type) : IsAsyncIterator(type) ? FromAsyncIterator(args, type) : IsIterator(type) ? FromIterator(args, type) : IsPromise(type) ? FromPromise(args, type) : IsObject(type) ? FromObject(args, type) : IsRecord(type) ? FromRecord(args, type) : IsArgument(type) ? FromArgument(args, type) : type;
},__name(FromType, "FromType");,function Instantiate(type, args) {
  return FromType(args, CloneType(type));
},__name(Instantiate, "Instantiate");