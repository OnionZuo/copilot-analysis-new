function IsIntersectOptional(types) {
  return types.every(left => IsOptional(left));
},__name(IsIntersectOptional, "IsIntersectOptional");,function RemoveOptionalFromType(type) {
  return Discard(type, [OptionalKind]);
},__name(RemoveOptionalFromType, "RemoveOptionalFromType");,function RemoveOptionalFromRest(types) {
  return types.map(left => IsOptional(left) ? RemoveOptionalFromType(left) : left);
},__name(RemoveOptionalFromRest, "RemoveOptionalFromRest");,function ResolveIntersect(types, options) {
  return IsIntersectOptional(types) ? Optional(IntersectCreate(RemoveOptionalFromRest(types), options)) : IntersectCreate(RemoveOptionalFromRest(types), options);
},__name(ResolveIntersect, "ResolveIntersect");,function IntersectEvaluated(types, options = {}) {
  if (types.length === 1) return CreateType(types[0], options);
  if (types.length === 0) return Never(options);
  if (types.some(schema => IsTransform(schema))) throw new Error("Cannot intersect transform types");
  return ResolveIntersect(types, options);
},__name(IntersectEvaluated, "IntersectEvaluated");