var _TransformDecodeBuilder = class _TransformDecodeBuilder {
  constructor(schema) {
    this.schema = schema;
  }
  Decode(decode) {
    return new TransformEncodeBuilder(this.schema, decode);
  }
};,__name(_TransformDecodeBuilder, "TransformDecodeBuilder");,var TransformDecodeBuilder = _TransformDecodeBuilder,
  _TransformEncodeBuilder = class _TransformEncodeBuilder {
    constructor(schema, decode) {
      this.schema = schema, this.decode = decode;
    }
    EncodeTransform(encode, schema) {
      let Codec = {
        Encode: __name(value => schema[TransformKind].Encode(encode(value)), "Encode"),
        Decode: __name(value => this.decode(schema[TransformKind].Decode(value)), "Decode")
      };
      return {
        ...schema,
        [TransformKind]: Codec
      };
    }
    EncodeSchema(encode, schema) {
      let Codec = {
        Decode: this.decode,
        Encode: encode
      };
      return {
        ...schema,
        [TransformKind]: Codec
      };
    }
    Encode(encode) {
      return IsTransform(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema);
    }
  };,__name(_TransformEncodeBuilder, "TransformEncodeBuilder");,var TransformEncodeBuilder = _TransformEncodeBuilder;,function Transform(schema) {
  return new TransformDecodeBuilder(schema);
},__name(Transform, "Transform");