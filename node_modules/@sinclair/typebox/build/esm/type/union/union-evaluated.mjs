function IsUnionOptional(types) {
  return types.some(type => IsOptional(type));
},__name(IsUnionOptional, "IsUnionOptional");,function RemoveOptionalFromRest(types) {
  return types.map(left => IsOptional(left) ? RemoveOptionalFromType(left) : left);
},__name(RemoveOptionalFromRest, "RemoveOptionalFromRest");,function RemoveOptionalFromType(T) {
  return Discard(T, [OptionalKind]);
},__name(RemoveOptionalFromType, "RemoveOptionalFromType");,function ResolveUnion(types, options) {
  return IsUnionOptional(types) ? Optional(UnionCreate(RemoveOptionalFromRest(types), options)) : UnionCreate(RemoveOptionalFromRest(types), options);
},__name(ResolveUnion, "ResolveUnion");,function UnionEvaluated(T, options) {
  return T.length === 1 ? CreateType(T[0], options) : T.length === 0 ? Never(options) : ResolveUnion(T, options);
},__name(UnionEvaluated, "UnionEvaluated");