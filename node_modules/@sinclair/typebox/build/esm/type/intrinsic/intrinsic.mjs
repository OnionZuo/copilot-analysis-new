function ApplyUncapitalize(value) {
  let [first, rest] = [value.slice(0, 1), value.slice(1)];
  return [first.toLowerCase(), rest].join("");
},__name(ApplyUncapitalize, "ApplyUncapitalize");,function ApplyCapitalize(value) {
  let [first, rest] = [value.slice(0, 1), value.slice(1)];
  return [first.toUpperCase(), rest].join("");
},__name(ApplyCapitalize, "ApplyCapitalize");,function ApplyUppercase(value) {
  return value.toUpperCase();
},__name(ApplyUppercase, "ApplyUppercase");,function ApplyLowercase(value) {
  return value.toLowerCase();
},__name(ApplyLowercase, "ApplyLowercase");,function FromTemplateLiteral(schema, mode, options) {
  let expression = TemplateLiteralParseExact(schema.pattern);
  if (!IsTemplateLiteralExpressionFinite(expression)) return {
    ...schema,
    pattern: FromLiteralValue(schema.pattern, mode)
  };
  let literals = [...TemplateLiteralExpressionGenerate(expression)].map(value => Literal(value)),
    mapped = FromRest(literals, mode),
    union = Union(mapped);
  return TemplateLiteral([union], options);
},__name(FromTemplateLiteral, "FromTemplateLiteral");,function FromLiteralValue(value, mode) {
  return typeof value == "string" ? mode === "Uncapitalize" ? ApplyUncapitalize(value) : mode === "Capitalize" ? ApplyCapitalize(value) : mode === "Uppercase" ? ApplyUppercase(value) : mode === "Lowercase" ? ApplyLowercase(value) : value : value.toString();
},__name(FromLiteralValue, "FromLiteralValue");,function FromRest(T, M) {
  return T.map(L => Intrinsic(L, M));
},__name(FromRest, "FromRest");,function Intrinsic(schema, mode, options = {}) {
  return IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) : IsTemplateLiteral(schema) ? FromTemplateLiteral(schema, mode, options) : IsUnion(schema) ? Union(FromRest(schema.anyOf, mode), options) : IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) : CreateType(schema, options);
},__name(Intrinsic, "Intrinsic");