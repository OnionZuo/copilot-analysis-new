function FromMappedResult(K, P) {
  return K in P ? FromSchemaType(K, P[K]) : MappedResult(P);
},__name(FromMappedResult, "FromMappedResult");,function MappedKeyToKnownMappedResultProperties(K) {
  return {
    [K]: Literal(K)
  };
},__name(MappedKeyToKnownMappedResultProperties, "MappedKeyToKnownMappedResultProperties");,function MappedKeyToUnknownMappedResultProperties(P) {
  let Acc = {};
  for (let L of P) Acc[L] = Literal(L);
  return Acc;
},__name(MappedKeyToUnknownMappedResultProperties, "MappedKeyToUnknownMappedResultProperties");,function MappedKeyToMappedResultProperties(K, P) {
  return SetIncludes(P, K) ? MappedKeyToKnownMappedResultProperties(K) : MappedKeyToUnknownMappedResultProperties(P);
},__name(MappedKeyToMappedResultProperties, "MappedKeyToMappedResultProperties");,function FromMappedKey(K, P) {
  let R = MappedKeyToMappedResultProperties(K, P);
  return FromMappedResult(K, R);
},__name(FromMappedKey, "FromMappedKey");,function FromRest(K, T) {
  return T.map(L => FromSchemaType(K, L));
},__name(FromRest, "FromRest");,function FromProperties(K, T) {
  let Acc = {};
  for (let K2 of globalThis.Object.getOwnPropertyNames(T)) Acc[K2] = FromSchemaType(K, T[K2]);
  return Acc;
},__name(FromProperties, "FromProperties");,function FromSchemaType(K, T) {
  var _a;
  let options = {
    ...T
  };
  return IsOptional(T) ? Optional(FromSchemaType(K, Discard(T, [OptionalKind]))) : IsReadonly(T) ? Readonly(FromSchemaType(K, Discard(T, [ReadonlyKind]))) : IsMappedResult(T) ? FromMappedResult(K, T.properties) : IsMappedKey(T) ? FromMappedKey(K, T.keys) : IsConstructor(T) ? Constructor(FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) : IsFunction(T) ? Function(FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) : IsAsyncIterator(T) ? AsyncIterator(FromSchemaType(K, T.items), options) : IsIterator(T) ? Iterator(FromSchemaType(K, T.items), options) : IsIntersect(T) ? Intersect(FromRest(K, T.allOf), options) : IsUnion(T) ? Union(FromRest(K, T.anyOf), options) : IsTuple(T) ? Tuple(FromRest(K, (_a = T.items) != null ? _a : []), options) : IsObject(T) ? Object(FromProperties(K, T.properties), options) : IsArray(T) ? Array(FromSchemaType(K, T.items), options) : IsPromise(T) ? Promise(FromSchemaType(K, T.item), options) : T;
},__name(FromSchemaType, "FromSchemaType");,function MappedFunctionReturnType(K, T) {
  let Acc = {};
  for (let L of K) Acc[L] = FromSchemaType(L, T);
  return Acc;
},__name(MappedFunctionReturnType, "MappedFunctionReturnType");,function Mapped(key, map, options) {
  let K = IsSchema(key) ? IndexPropertyKeys(key) : key,
    RT = map({
      [Kind]: "MappedKey",
      keys: K
    }),
    R = MappedFunctionReturnType(K, RT);
  return Object(R, options);
},__name(Mapped, "Mapped");