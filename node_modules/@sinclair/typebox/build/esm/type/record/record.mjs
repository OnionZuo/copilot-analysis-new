function RecordCreateFromPattern(pattern, T, options) {
  return CreateType({
    [Kind]: "Record",
    type: "object",
    patternProperties: {
      [pattern]: T
    }
  }, options);
},__name(RecordCreateFromPattern, "RecordCreateFromPattern");,function RecordCreateFromKeys(K, T, options) {
  let result = {};
  for (let K2 of K) result[K2] = T;
  return Object(result, {
    ...options,
    [Hint]: "Record"
  });
},__name(RecordCreateFromKeys, "RecordCreateFromKeys");,function FromTemplateLiteralKey(K, T, options) {
  return IsTemplateLiteralFinite(K) ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options) : RecordCreateFromPattern(K.pattern, T, options);
},__name(FromTemplateLiteralKey, "FromTemplateLiteralKey");,function FromUnionKey(key, type, options) {
  return RecordCreateFromKeys(IndexPropertyKeys(Union(key)), type, options);
},__name(FromUnionKey, "FromUnionKey");,function FromLiteralKey(key, type, options) {
  return RecordCreateFromKeys([key.toString()], type, options);
},__name(FromLiteralKey, "FromLiteralKey");,function FromRegExpKey(key, type, options) {
  return RecordCreateFromPattern(key.source, type, options);
},__name(FromRegExpKey, "FromRegExpKey");,function FromStringKey(key, type, options) {
  let pattern = IsUndefined(key.pattern) ? PatternStringExact : key.pattern;
  return RecordCreateFromPattern(pattern, type, options);
},__name(FromStringKey, "FromStringKey");,function FromAnyKey(_, type, options) {
  return RecordCreateFromPattern(PatternStringExact, type, options);
},__name(FromAnyKey, "FromAnyKey");,function FromNeverKey(_key, type, options) {
  return RecordCreateFromPattern(PatternNeverExact, type, options);
},__name(FromNeverKey, "FromNeverKey");,function FromBooleanKey(_key, type, options) {
  return Object({
    true: type,
    false: type
  }, options);
},__name(FromBooleanKey, "FromBooleanKey");,function FromIntegerKey(_key, type, options) {
  return RecordCreateFromPattern(PatternNumberExact, type, options);
},__name(FromIntegerKey, "FromIntegerKey");,function FromNumberKey(_, type, options) {
  return RecordCreateFromPattern(PatternNumberExact, type, options);
},__name(FromNumberKey, "FromNumberKey");,function Record(key, type, options = {}) {
  return IsUnion(key) ? FromUnionKey(key.anyOf, type, options) : IsTemplateLiteral(key) ? FromTemplateLiteralKey(key, type, options) : IsLiteral(key) ? FromLiteralKey(key.const, type, options) : IsBoolean(key) ? FromBooleanKey(key, type, options) : IsInteger(key) ? FromIntegerKey(key, type, options) : IsNumber(key) ? FromNumberKey(key, type, options) : IsRegExp(key) ? FromRegExpKey(key, type, options) : IsString(key) ? FromStringKey(key, type, options) : IsAny(key) ? FromAnyKey(key, type, options) : IsNever(key) ? FromNeverKey(key, type, options) : Never(options);
},__name(Record, "Record");,function RecordPattern(record) {
  return globalThis.Object.getOwnPropertyNames(record.patternProperties)[0];
},__name(RecordPattern, "RecordPattern");,function RecordKey(type) {
  let pattern = RecordPattern(type);
  return pattern === PatternStringExact ? String() : pattern === PatternNumberExact ? Number() : String({
    pattern: pattern
  });
},__name(RecordKey, "RecordKey");,function RecordValue(type) {
  return type.patternProperties[RecordPattern(type)];
},__name(RecordValue, "RecordValue");