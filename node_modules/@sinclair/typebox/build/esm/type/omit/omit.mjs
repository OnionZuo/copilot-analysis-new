function FromIntersect(types, propertyKeys) {
  return types.map(type => OmitResolve(type, propertyKeys));
},__name(FromIntersect, "FromIntersect");,function FromUnion(types, propertyKeys) {
  return types.map(type => OmitResolve(type, propertyKeys));
},__name(FromUnion, "FromUnion");,function FromProperty(properties, key) {
  let {
    [key]: _,
    ...R
  } = properties;
  return R;
},__name(FromProperty, "FromProperty");,function FromProperties(properties, propertyKeys) {
  return propertyKeys.reduce((T, K2) => FromProperty(T, K2), properties);
},__name(FromProperties, "FromProperties");,function FromObject(properties, propertyKeys) {
  let options = Discard(properties, [TransformKind, "$id", "required", "properties"]),
    omittedProperties = FromProperties(properties.properties, propertyKeys);
  return Object(omittedProperties, options);
},__name(FromObject, "FromObject");,function UnionFromPropertyKeys(propertyKeys) {
  let result = propertyKeys.reduce((result, key) => IsLiteralValue(key) ? [...result, Literal(key)] : result, []);
  return Union(result);
},__name(UnionFromPropertyKeys, "UnionFromPropertyKeys");,function OmitResolve(properties, propertyKeys) {
  return IsIntersect(properties) ? Intersect(FromIntersect(properties.allOf, propertyKeys)) : IsUnion(properties) ? Union(FromUnion(properties.anyOf, propertyKeys)) : IsObject(properties) ? FromObject(properties, propertyKeys) : Object({});
},__name(OmitResolve, "OmitResolve");,function Omit(type, key, options) {
  let typeKey = IsArray(key) ? UnionFromPropertyKeys(key) : key,
    propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key,
    isTypeRef = IsRef(type),
    isKeyRef = IsRef(key);
  return IsMappedResult(type) ? OmitFromMappedResult(type, propertyKeys, options) : IsMappedKey(key) ? OmitFromMappedKey(type, key, options) : isTypeRef && isKeyRef ? Computed("Omit", [type, typeKey], options) : !isTypeRef && isKeyRef ? Computed("Omit", [type, typeKey], options) : isTypeRef && !isKeyRef ? Computed("Omit", [type, typeKey], options) : CreateType({
    ...OmitResolve(type, propertyKeys),
    ...options
  });
},__name(Omit, "Omit");