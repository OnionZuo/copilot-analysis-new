function* FromUnion(syntax) {
  let trim = syntax.trim().replace(/"|'/g, "");
  return trim === "boolean" ? yield Boolean() : trim === "number" ? yield Number() : trim === "bigint" ? yield BigInt() : trim === "string" ? yield String() : yield (() => {
    let literals = trim.split("|").map(literal => Literal(literal.trim()));
    return literals.length === 0 ? Never() : literals.length === 1 ? literals[0] : UnionEvaluated(literals);
  })();
},__name(FromUnion, "FromUnion");,function* FromTerminal(syntax) {
  if (syntax[1] !== "{") {
    let L = Literal("$"),
      R = FromSyntax(syntax.slice(1));
    return yield* [L, ...R];
  }
  for (let i = 2; i < syntax.length; i++) if (syntax[i] === "}") {
    let L = FromUnion(syntax.slice(2, i)),
      R = FromSyntax(syntax.slice(i + 1));
    return yield* [...L, ...R];
  }
  yield Literal(syntax);
},__name(FromTerminal, "FromTerminal");,function* FromSyntax(syntax) {
  for (let i = 0; i < syntax.length; i++) if (syntax[i] === "$") {
    let L = Literal(syntax.slice(0, i)),
      R = FromTerminal(syntax.slice(i));
    return yield* [L, ...R];
  }
  yield Literal(syntax);
},__name(FromSyntax, "FromSyntax");,function TemplateLiteralSyntax(syntax) {
  return [...FromSyntax(syntax)];
},__name(TemplateLiteralSyntax, "TemplateLiteralSyntax");