var _TemplateLiteralFiniteError = class _TemplateLiteralFiniteError extends TypeBoxError {};,__name(_TemplateLiteralFiniteError, "TemplateLiteralFiniteError");,var TemplateLiteralFiniteError = _TemplateLiteralFiniteError;,function IsNumberExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "0" && expression.expr[1].type === "const" && expression.expr[1].const === "[1-9][0-9]*";
},__name(IsNumberExpression, "IsNumberExpression");,function IsBooleanExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "true" && expression.expr[1].type === "const" && expression.expr[1].const === "false";
},__name(IsBooleanExpression, "IsBooleanExpression");,function IsStringExpression(expression) {
  return expression.type === "const" && expression.const === ".*";
},__name(IsStringExpression, "IsStringExpression");,function IsTemplateLiteralExpressionFinite(expression) {
  return IsNumberExpression(expression) || IsStringExpression(expression) ? !1 : IsBooleanExpression(expression) ? !0 : expression.type === "and" ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "or" ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "const" ? !0 : (() => {
    throw new TemplateLiteralFiniteError("Unknown expression type");
  })();
},__name(IsTemplateLiteralExpressionFinite, "IsTemplateLiteralExpressionFinite");,function IsTemplateLiteralFinite(schema) {
  let expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression);
},__name(IsTemplateLiteralFinite, "IsTemplateLiteralFinite");