function ExcludeRest(L, R) {
  let excluded = L.filter(inner => ExtendsCheck(inner, R) === ExtendsResult.False);
  return excluded.length === 1 ? excluded[0] : Union(excluded);
},__name(ExcludeRest, "ExcludeRest");,function Exclude(L, R, options = {}) {
  return IsTemplateLiteral(L) ? CreateType(ExcludeFromTemplateLiteral(L, R), options) : IsMappedResult(L) ? CreateType(ExcludeFromMappedResult(L, R), options) : CreateType(IsUnion(L) ? ExcludeRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);
},__name(Exclude, "Exclude");