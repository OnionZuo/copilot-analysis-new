var _TModule = class _TModule {
  constructor($defs) {
    let computed = ComputeModuleProperties($defs),
      identified = this.WithIdentifiers(computed);
    this.$defs = identified;
  }
  Import(key, options) {
    let $defs = {
      ...this.$defs,
      [key]: CreateType(this.$defs[key], options)
    };
    return CreateType({
      [Kind]: "Import",
      $defs: $defs,
      $ref: key
    });
  }
  WithIdentifiers($defs) {
    return globalThis.Object.getOwnPropertyNames($defs).reduce((result, key) => ({
      ...result,
      [key]: {
        ...$defs[key],
        $id: key
      }
    }), {});
  }
};,__name(_TModule, "TModule");,var TModule = _TModule;,function Module(properties) {
  return new TModule(properties);
},__name(Module, "Module");