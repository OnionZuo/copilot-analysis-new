function CompositeKeys(T) {
  let Acc = [];
  for (let L of T) Acc.push(...KeyOfPropertyKeys(L));
  return SetDistinct(Acc);
},__name(CompositeKeys, "CompositeKeys");,function FilterNever(T) {
  return T.filter(L => !IsNever(L));
},__name(FilterNever, "FilterNever");,function CompositeProperty(T, K) {
  let Acc = [];
  for (let L of T) Acc.push(...IndexFromPropertyKeys(L, [K]));
  return FilterNever(Acc);
},__name(CompositeProperty, "CompositeProperty");,function CompositeProperties(T, K) {
  let Acc = {};
  for (let L of K) Acc[L] = IntersectEvaluated(CompositeProperty(T, L));
  return Acc;
},__name(CompositeProperties, "CompositeProperties");,function Composite(T, options) {
  let K = CompositeKeys(T),
    P = CompositeProperties(T, K);
  return Object(P, options);
},__name(Composite, "Composite");