function FromArray(T) {
  return T.map(L => FromValue(L, !1));
},__name(FromArray, "FromArray");,function FromProperties(value) {
  let Acc = {};
  for (let K of globalThis.Object.getOwnPropertyNames(value)) Acc[K] = Readonly(FromValue(value[K], !1));
  return Acc;
},__name(FromProperties, "FromProperties");,function ConditionalReadonly(T, root) {
  return root === !0 ? T : Readonly(T);
},__name(ConditionalReadonly, "ConditionalReadonly");,function FromValue(value, root) {
  return IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) : IsIterator(value) ? ConditionalReadonly(Any(), root) : IsArray(value) ? Readonly(Tuple(FromArray(value))) : IsUint8Array(value) ? Uint8Array() : IsDate(value) ? Date() : IsObject(value) ? ConditionalReadonly(Object(FromProperties(value)), root) : IsFunction(value) ? ConditionalReadonly(Function([], Unknown()), root) : IsUndefined(value) ? Undefined() : IsNull(value) ? Null() : IsSymbol(value) ? Symbol() : IsBigInt(value) ? BigInt() : IsNumber(value) ? Literal(value) : IsBoolean(value) ? Literal(value) : IsString(value) ? Literal(value) : Object({});
},__name(FromValue, "FromValue");,function Const(T, options) {
  return CreateType(FromValue(T, !0), options);
},__name(Const, "Const");