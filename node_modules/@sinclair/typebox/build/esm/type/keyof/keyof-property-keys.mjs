function FromRest(types) {
  let result = [];
  for (let L of types) result.push(KeyOfPropertyKeys(L));
  return result;
},__name(FromRest, "FromRest");,function FromIntersect(types) {
  let propertyKeysArray = FromRest(types);
  return SetUnionMany(propertyKeysArray);
},__name(FromIntersect, "FromIntersect");,function FromUnion(types) {
  let propertyKeysArray = FromRest(types);
  return SetIntersectMany(propertyKeysArray);
},__name(FromUnion, "FromUnion");,function FromTuple(types) {
  return types.map((_, indexer) => indexer.toString());
},__name(FromTuple, "FromTuple");,function FromArray(_) {
  return ["[number]"];
},__name(FromArray, "FromArray");,function FromProperties(T) {
  return globalThis.Object.getOwnPropertyNames(T);
},__name(FromProperties, "FromProperties");,function FromPatternProperties(patternProperties) {
  return includePatternProperties ? globalThis.Object.getOwnPropertyNames(patternProperties).map(key => key[0] === "^" && key[key.length - 1] === "$" ? key.slice(1, key.length - 1) : key) : [];
},__name(FromPatternProperties, "FromPatternProperties");,function KeyOfPropertyKeys(type) {
  var _a;
  return IsIntersect(type) ? FromIntersect(type.allOf) : IsUnion(type) ? FromUnion(type.anyOf) : IsTuple(type) ? FromTuple((_a = type.items) != null ? _a : []) : IsArray(type) ? FromArray(type.items) : IsObject(type) ? FromProperties(type.properties) : IsRecord(type) ? FromPatternProperties(type.patternProperties) : [];
},__name(KeyOfPropertyKeys, "KeyOfPropertyKeys");,var includePatternProperties = !1;,function KeyOfPattern(schema) {
  includePatternProperties = !0;
  let keys = KeyOfPropertyKeys(schema);
  return includePatternProperties = !1, `^(${keys.map(key => `(${key})`).join("|")})$`;
},__name(KeyOfPattern, "KeyOfPattern");