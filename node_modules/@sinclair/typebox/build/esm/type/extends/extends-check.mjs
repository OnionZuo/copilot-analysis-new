var _ExtendsResolverError = class _ExtendsResolverError extends TypeBoxError {};,__name(_ExtendsResolverError, "ExtendsResolverError");,var ExtendsResolverError = _ExtendsResolverError,
  ExtendsResult;,(function (ExtendsResult) {
  ExtendsResult[ExtendsResult.Union = 0] = "Union", ExtendsResult[ExtendsResult.True = 1] = "True", ExtendsResult[ExtendsResult.False = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));,function IntoBooleanResult(result) {
  return result === ExtendsResult.False ? result : ExtendsResult.True;
},__name(IntoBooleanResult, "IntoBooleanResult");,function Throw(message) {
  throw new ExtendsResolverError(message);
},__name(Throw, "Throw");,function IsStructuralRight(right) {
  return type_exports.IsNever(right) || type_exports.IsIntersect(right) || type_exports.IsUnion(right) || type_exports.IsUnknown(right) || type_exports.IsAny(right);
},__name(IsStructuralRight, "IsStructuralRight");,function StructuralRight(left, right) {
  return type_exports.IsNever(right) ? FromNeverRight(left, right) : type_exports.IsIntersect(right) ? FromIntersectRight(left, right) : type_exports.IsUnion(right) ? FromUnionRight(left, right) : type_exports.IsUnknown(right) ? FromUnknownRight(left, right) : type_exports.IsAny(right) ? FromAnyRight(left, right) : Throw("StructuralRight");
},__name(StructuralRight, "StructuralRight");,function FromAnyRight(left, right) {
  return ExtendsResult.True;
},__name(FromAnyRight, "FromAnyRight");,function FromAny(left, right) {
  return type_exports.IsIntersect(right) ? FromIntersectRight(left, right) : type_exports.IsUnion(right) && right.anyOf.some(schema => type_exports.IsAny(schema) || type_exports.IsUnknown(schema)) ? ExtendsResult.True : type_exports.IsUnion(right) ? ExtendsResult.Union : type_exports.IsUnknown(right) || type_exports.IsAny(right) ? ExtendsResult.True : ExtendsResult.Union;
},__name(FromAny, "FromAny");,function FromArrayRight(left, right) {
  return type_exports.IsUnknown(left) ? ExtendsResult.False : type_exports.IsAny(left) ? ExtendsResult.Union : type_exports.IsNever(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromArrayRight, "FromArrayRight");,function FromArray(left, right) {
  return type_exports.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsArray(right) ? IntoBooleanResult(Visit(left.items, right.items)) : ExtendsResult.False;
},__name(FromArray, "FromArray");,function FromAsyncIterator(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsAsyncIterator(right) ? IntoBooleanResult(Visit(left.items, right.items)) : ExtendsResult.False;
},__name(FromAsyncIterator, "FromAsyncIterator");,function FromBigInt(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsBigInt(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromBigInt, "FromBigInt");,function FromBooleanRight(left, right) {
  return type_exports.IsLiteralBoolean(left) || type_exports.IsBoolean(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromBooleanRight, "FromBooleanRight");,function FromBoolean(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsBoolean(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromBoolean, "FromBoolean");,function FromConstructor(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsConstructor(right) ? left.parameters.length > right.parameters.length ? ExtendsResult.False : left.parameters.every((schema, index) => IntoBooleanResult(Visit(right.parameters[index], schema)) === ExtendsResult.True) ? IntoBooleanResult(Visit(left.returns, right.returns)) : ExtendsResult.False : ExtendsResult.False;
},__name(FromConstructor, "FromConstructor");,function FromDate(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsDate(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromDate, "FromDate");,function FromFunction(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsFunction(right) ? left.parameters.length > right.parameters.length ? ExtendsResult.False : left.parameters.every((schema, index) => IntoBooleanResult(Visit(right.parameters[index], schema)) === ExtendsResult.True) ? IntoBooleanResult(Visit(left.returns, right.returns)) : ExtendsResult.False : ExtendsResult.False;
},__name(FromFunction, "FromFunction");,function FromIntegerRight(left, right) {
  return type_exports.IsLiteral(left) && value_exports.IsNumber(left.const) || type_exports.IsNumber(left) || type_exports.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromIntegerRight, "FromIntegerRight");,function FromInteger(left, right) {
  return type_exports.IsInteger(right) || type_exports.IsNumber(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : ExtendsResult.False;
},__name(FromInteger, "FromInteger");,function FromIntersectRight(left, right) {
  return right.allOf.every(schema => Visit(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromIntersectRight, "FromIntersectRight");,function FromIntersect(left, right) {
  return left.allOf.some(schema => Visit(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromIntersect, "FromIntersect");,function FromIterator(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsIterator(right) ? IntoBooleanResult(Visit(left.items, right.items)) : ExtendsResult.False;
},__name(FromIterator, "FromIterator");,function FromLiteral(left, right) {
  return type_exports.IsLiteral(right) && right.const === left.const ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsString(right) ? FromStringRight(left, right) : type_exports.IsNumber(right) ? FromNumberRight(left, right) : type_exports.IsInteger(right) ? FromIntegerRight(left, right) : type_exports.IsBoolean(right) ? FromBooleanRight(left, right) : ExtendsResult.False;
},__name(FromLiteral, "FromLiteral");,function FromNeverRight(left, right) {
  return ExtendsResult.False;
},__name(FromNeverRight, "FromNeverRight");,function FromNever(left, right) {
  return ExtendsResult.True;
},__name(FromNever, "FromNever");,function UnwrapTNot(schema) {
  let [current, depth] = [schema, 0];
  for (; type_exports.IsNot(current);) current = current.not, depth += 1;
  return depth % 2 === 0 ? current : Unknown();
},__name(UnwrapTNot, "UnwrapTNot");,function FromNot(left, right) {
  return type_exports.IsNot(left) ? Visit(UnwrapTNot(left), right) : type_exports.IsNot(right) ? Visit(left, UnwrapTNot(right)) : Throw("Invalid fallthrough for Not");
},__name(FromNot, "FromNot");,function FromNull(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsNull(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromNull, "FromNull");,function FromNumberRight(left, right) {
  return type_exports.IsLiteralNumber(left) || type_exports.IsNumber(left) || type_exports.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromNumberRight, "FromNumberRight");,function FromNumber(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsInteger(right) || type_exports.IsNumber(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromNumber, "FromNumber");,function IsObjectPropertyCount(schema, count) {
  return Object.getOwnPropertyNames(schema.properties).length === count;
},__name(IsObjectPropertyCount, "IsObjectPropertyCount");,function IsObjectStringLike(schema) {
  return IsObjectArrayLike(schema);
},__name(IsObjectStringLike, "IsObjectStringLike");,function IsObjectSymbolLike(schema) {
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "description" in schema.properties && type_exports.IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (type_exports.IsString(schema.properties.description.anyOf[0]) && type_exports.IsUndefined(schema.properties.description.anyOf[1]) || type_exports.IsString(schema.properties.description.anyOf[1]) && type_exports.IsUndefined(schema.properties.description.anyOf[0]));
},__name(IsObjectSymbolLike, "IsObjectSymbolLike");,function IsObjectNumberLike(schema) {
  return IsObjectPropertyCount(schema, 0);
},__name(IsObjectNumberLike, "IsObjectNumberLike");,function IsObjectBooleanLike(schema) {
  return IsObjectPropertyCount(schema, 0);
},__name(IsObjectBooleanLike, "IsObjectBooleanLike");,function IsObjectBigIntLike(schema) {
  return IsObjectPropertyCount(schema, 0);
},__name(IsObjectBigIntLike, "IsObjectBigIntLike");,function IsObjectDateLike(schema) {
  return IsObjectPropertyCount(schema, 0);
},__name(IsObjectDateLike, "IsObjectDateLike");,function IsObjectUint8ArrayLike(schema) {
  return IsObjectArrayLike(schema);
},__name(IsObjectUint8ArrayLike, "IsObjectUint8ArrayLike");,function IsObjectFunctionLike(schema) {
  let length = Number();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit(schema.properties.length, length)) === ExtendsResult.True;
},__name(IsObjectFunctionLike, "IsObjectFunctionLike");,function IsObjectConstructorLike(schema) {
  return IsObjectPropertyCount(schema, 0);
},__name(IsObjectConstructorLike, "IsObjectConstructorLike");,function IsObjectArrayLike(schema) {
  let length = Number();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit(schema.properties.length, length)) === ExtendsResult.True;
},__name(IsObjectArrayLike, "IsObjectArrayLike");,function IsObjectPromiseLike(schema) {
  let then = Function([Any()], Any());
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "then" in schema.properties && IntoBooleanResult(Visit(schema.properties.then, then)) === ExtendsResult.True;
},__name(IsObjectPromiseLike, "IsObjectPromiseLike");,function Property(left, right) {
  return Visit(left, right) === ExtendsResult.False || type_exports.IsOptional(left) && !type_exports.IsOptional(right) ? ExtendsResult.False : ExtendsResult.True;
},__name(Property, "Property");,function FromObjectRight(left, right) {
  return type_exports.IsUnknown(left) ? ExtendsResult.False : type_exports.IsAny(left) ? ExtendsResult.Union : type_exports.IsNever(left) || type_exports.IsLiteralString(left) && IsObjectStringLike(right) || type_exports.IsLiteralNumber(left) && IsObjectNumberLike(right) || type_exports.IsLiteralBoolean(left) && IsObjectBooleanLike(right) || type_exports.IsSymbol(left) && IsObjectSymbolLike(right) || type_exports.IsBigInt(left) && IsObjectBigIntLike(right) || type_exports.IsString(left) && IsObjectStringLike(right) || type_exports.IsSymbol(left) && IsObjectSymbolLike(right) || type_exports.IsNumber(left) && IsObjectNumberLike(right) || type_exports.IsInteger(left) && IsObjectNumberLike(right) || type_exports.IsBoolean(left) && IsObjectBooleanLike(right) || type_exports.IsUint8Array(left) && IsObjectUint8ArrayLike(right) || type_exports.IsDate(left) && IsObjectDateLike(right) || type_exports.IsConstructor(left) && IsObjectConstructorLike(right) || type_exports.IsFunction(left) && IsObjectFunctionLike(right) ? ExtendsResult.True : type_exports.IsRecord(left) && type_exports.IsString(RecordKey(left)) ? right[Hint] === "Record" ? ExtendsResult.True : ExtendsResult.False : type_exports.IsRecord(left) && type_exports.IsNumber(RecordKey(left)) ? IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False : ExtendsResult.False;
},__name(FromObjectRight, "FromObjectRight");,function FromObject(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsObject(right) ? (() => {
    for (let key of Object.getOwnPropertyNames(right.properties)) {
      if (!(key in left.properties) && !type_exports.IsOptional(right.properties[key])) return ExtendsResult.False;
      if (type_exports.IsOptional(right.properties[key])) return ExtendsResult.True;
      if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) return ExtendsResult.False;
    }
    return ExtendsResult.True;
  })() : ExtendsResult.False;
},__name(FromObject, "FromObject");,function FromPromise(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True : type_exports.IsPromise(right) ? IntoBooleanResult(Visit(left.item, right.item)) : ExtendsResult.False;
},__name(FromPromise, "FromPromise");,function RecordKey(schema) {
  return PatternNumberExact in schema.patternProperties ? Number() : PatternStringExact in schema.patternProperties ? String() : Throw("Unknown record key pattern");
},__name(RecordKey, "RecordKey");,function RecordValue(schema) {
  return PatternNumberExact in schema.patternProperties ? schema.patternProperties[PatternNumberExact] : PatternStringExact in schema.patternProperties ? schema.patternProperties[PatternStringExact] : Throw("Unable to get record value schema");
},__name(RecordValue, "RecordValue");,function FromRecordRight(left, right) {
  let [Key, Value] = [RecordKey(right), RecordValue(right)];
  return type_exports.IsLiteralString(left) && type_exports.IsNumber(Key) && IntoBooleanResult(Visit(left, Value)) === ExtendsResult.True ? ExtendsResult.True : type_exports.IsUint8Array(left) && type_exports.IsNumber(Key) || type_exports.IsString(left) && type_exports.IsNumber(Key) || type_exports.IsArray(left) && type_exports.IsNumber(Key) ? Visit(left, Value) : type_exports.IsObject(left) ? (() => {
    for (let key of Object.getOwnPropertyNames(left.properties)) if (Property(Value, left.properties[key]) === ExtendsResult.False) return ExtendsResult.False;
    return ExtendsResult.True;
  })() : ExtendsResult.False;
},__name(FromRecordRight, "FromRecordRight");,function FromRecord(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? Visit(RecordValue(left), RecordValue(right)) : ExtendsResult.False;
},__name(FromRecord, "FromRecord");,function FromRegExp(left, right) {
  let L = type_exports.IsRegExp(left) ? String() : left,
    R = type_exports.IsRegExp(right) ? String() : right;
  return Visit(L, R);
},__name(FromRegExp, "FromRegExp");,function FromStringRight(left, right) {
  return type_exports.IsLiteral(left) && value_exports.IsString(left.const) || type_exports.IsString(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromStringRight, "FromStringRight");,function FromString(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsString(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromString, "FromString");,function FromSymbol(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsSymbol(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromSymbol, "FromSymbol");,function FromTemplateLiteral(left, right) {
  return type_exports.IsTemplateLiteral(left) ? Visit(TemplateLiteralToUnion(left), right) : type_exports.IsTemplateLiteral(right) ? Visit(left, TemplateLiteralToUnion(right)) : Throw("Invalid fallthrough for TemplateLiteral");
},__name(FromTemplateLiteral, "FromTemplateLiteral");,function IsArrayOfTuple(left, right) {
  return type_exports.IsArray(right) && left.items !== void 0 && left.items.every(schema => Visit(schema, right.items) === ExtendsResult.True);
},__name(IsArrayOfTuple, "IsArrayOfTuple");,function FromTupleRight(left, right) {
  return type_exports.IsNever(left) ? ExtendsResult.True : type_exports.IsUnknown(left) ? ExtendsResult.False : type_exports.IsAny(left) ? ExtendsResult.Union : ExtendsResult.False;
},__name(FromTupleRight, "FromTupleRight");,function FromTuple(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) && IsObjectArrayLike(right) || type_exports.IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True : type_exports.IsTuple(right) ? value_exports.IsUndefined(left.items) && !value_exports.IsUndefined(right.items) || !value_exports.IsUndefined(left.items) && value_exports.IsUndefined(right.items) ? ExtendsResult.False : value_exports.IsUndefined(left.items) && !value_exports.IsUndefined(right.items) || left.items.every((schema, index) => Visit(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False : ExtendsResult.False;
},__name(FromTuple, "FromTuple");,function FromUint8Array(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsUint8Array(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromUint8Array, "FromUint8Array");,function FromUndefined(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsRecord(right) ? FromRecordRight(left, right) : type_exports.IsVoid(right) ? FromVoidRight(left, right) : type_exports.IsUndefined(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromUndefined, "FromUndefined");,function FromUnionRight(left, right) {
  return right.anyOf.some(schema => Visit(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromUnionRight, "FromUnionRight");,function FromUnion(left, right) {
  return left.anyOf.every(schema => Visit(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromUnion, "FromUnion");,function FromUnknownRight(left, right) {
  return ExtendsResult.True;
},__name(FromUnknownRight, "FromUnknownRight");,function FromUnknown(left, right) {
  return type_exports.IsNever(right) ? FromNeverRight(left, right) : type_exports.IsIntersect(right) ? FromIntersectRight(left, right) : type_exports.IsUnion(right) ? FromUnionRight(left, right) : type_exports.IsAny(right) ? FromAnyRight(left, right) : type_exports.IsString(right) ? FromStringRight(left, right) : type_exports.IsNumber(right) ? FromNumberRight(left, right) : type_exports.IsInteger(right) ? FromIntegerRight(left, right) : type_exports.IsBoolean(right) ? FromBooleanRight(left, right) : type_exports.IsArray(right) ? FromArrayRight(left, right) : type_exports.IsTuple(right) ? FromTupleRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsUnknown(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromUnknown, "FromUnknown");,function FromVoidRight(left, right) {
  return type_exports.IsUndefined(left) || type_exports.IsUndefined(left) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromVoidRight, "FromVoidRight");,function FromVoid(left, right) {
  return type_exports.IsIntersect(right) ? FromIntersectRight(left, right) : type_exports.IsUnion(right) ? FromUnionRight(left, right) : type_exports.IsUnknown(right) ? FromUnknownRight(left, right) : type_exports.IsAny(right) ? FromAnyRight(left, right) : type_exports.IsObject(right) ? FromObjectRight(left, right) : type_exports.IsVoid(right) ? ExtendsResult.True : ExtendsResult.False;
},__name(FromVoid, "FromVoid");,function Visit(left, right) {
  return type_exports.IsTemplateLiteral(left) || type_exports.IsTemplateLiteral(right) ? FromTemplateLiteral(left, right) : type_exports.IsRegExp(left) || type_exports.IsRegExp(right) ? FromRegExp(left, right) : type_exports.IsNot(left) || type_exports.IsNot(right) ? FromNot(left, right) : type_exports.IsAny(left) ? FromAny(left, right) : type_exports.IsArray(left) ? FromArray(left, right) : type_exports.IsBigInt(left) ? FromBigInt(left, right) : type_exports.IsBoolean(left) ? FromBoolean(left, right) : type_exports.IsAsyncIterator(left) ? FromAsyncIterator(left, right) : type_exports.IsConstructor(left) ? FromConstructor(left, right) : type_exports.IsDate(left) ? FromDate(left, right) : type_exports.IsFunction(left) ? FromFunction(left, right) : type_exports.IsInteger(left) ? FromInteger(left, right) : type_exports.IsIntersect(left) ? FromIntersect(left, right) : type_exports.IsIterator(left) ? FromIterator(left, right) : type_exports.IsLiteral(left) ? FromLiteral(left, right) : type_exports.IsNever(left) ? FromNever(left, right) : type_exports.IsNull(left) ? FromNull(left, right) : type_exports.IsNumber(left) ? FromNumber(left, right) : type_exports.IsObject(left) ? FromObject(left, right) : type_exports.IsRecord(left) ? FromRecord(left, right) : type_exports.IsString(left) ? FromString(left, right) : type_exports.IsSymbol(left) ? FromSymbol(left, right) : type_exports.IsTuple(left) ? FromTuple(left, right) : type_exports.IsPromise(left) ? FromPromise(left, right) : type_exports.IsUint8Array(left) ? FromUint8Array(left, right) : type_exports.IsUndefined(left) ? FromUndefined(left, right) : type_exports.IsUnion(left) ? FromUnion(left, right) : type_exports.IsUnknown(left) ? FromUnknown(left, right) : type_exports.IsVoid(left) ? FromVoid(left, right) : Throw(`Unknown left type operand '${left[Kind]}'`);
},__name(Visit, "Visit");,function ExtendsCheck(left, right) {
  return Visit(left, right);
},__name(ExtendsCheck, "ExtendsCheck");