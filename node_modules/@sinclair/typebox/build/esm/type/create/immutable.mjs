function ImmutableArray(value) {
  return globalThis.Object.freeze(value).map(value => Immutable(value));
},__name(ImmutableArray, "ImmutableArray");,function ImmutableObject(value) {
  let result = {};
  for (let key of Object.getOwnPropertyNames(value)) result[key] = Immutable(value[key]);
  for (let key of Object.getOwnPropertySymbols(value)) result[key] = Immutable(value[key]);
  return globalThis.Object.freeze(result);
},__name(ImmutableObject, "ImmutableObject");,function Immutable(value) {
  return IsArray(value) ? ImmutableArray(value) : IsDate(value) ? value : IsUint8Array(value) ? value : IsRegExp(value) ? value : IsObject(value) ? ImmutableObject(value) : value;
},__name(Immutable, "Immutable");