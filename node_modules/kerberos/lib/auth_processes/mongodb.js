var require_mongodb = __commonJSMin((exports, module) => {
  "use strict";

  var dns = require("dns"),
    kerberos = rle(),
    _MongoAuthProcess = class _MongoAuthProcess {
      constructor(host, port, serviceName, options) {
        options = options || {}, this.host = host, this.port = port, this.serviceName = serviceName || options.gssapiServiceName || "mongodb", this.canonicalizeHostName = typeof options.gssapiCanonicalizeHostName == "boolean" ? options.gssapiCanonicalizeHostName : !1, this._transition = firstTransition(this), this.retries = 10;
      }
      init(username, password, callback) {
        let self = this;
        this.username = username, this.password = password;
        function performGssapiCanonicalizeHostName(canonicalizeHostName, host, callback) {
          if (!canonicalizeHostName) return callback();
          dns.resolveCname(host, (err, r) => {
            if (err) return callback(err);
            Array.isArray(r) && r.length > 0 && (self.host = r[0]), callback();
          });
        }
        __name(performGssapiCanonicalizeHostName, "performGssapiCanonicalizeHostName"), performGssapiCanonicalizeHostName(this.canonicalizeHostName, this.host, err => {
          if (err) return callback(err);
          let initOptions = {};
          password != null && Object.assign(initOptions, {
            user: username,
            password: password
          });
          let service = process.platform === "win32" ? `${this.serviceName}/${this.host}` : `${this.serviceName}@${this.host}`;
          kerberos.initializeClient(service, initOptions, (err, client) => {
            if (err) return callback(err, null);
            self.client = client, callback(null, client);
          });
        });
      }
      transition(payload, callback) {
        if (this._transition == null) return callback(new Error("Transition finished"));
        this._transition(payload, callback);
      }
    };
  __name(_MongoAuthProcess, "MongoAuthProcess");
  var MongoAuthProcess = _MongoAuthProcess;
  function firstTransition(auth) {
    return (payload, callback) => {
      auth.client.step("", (err, response) => {
        if (err) return callback(err);
        auth._transition = secondTransition(auth), callback(null, response);
      });
    };
  }
  __name(firstTransition, "firstTransition");
  function secondTransition(auth) {
    return (payload, callback) => {
      auth.client.step(payload, (err, response) => {
        if (err && auth.retries === 0) return callback(err);
        if (err) return auth.retries = auth.retries - 1, auth.transition(payload, callback);
        auth._transition = thirdTransition(auth), callback(null, response || "");
      });
    };
  }
  __name(secondTransition, "secondTransition");
  function thirdTransition(auth) {
    return (payload, callback) => {
      auth.client.unwrap(payload, (err, response) => {
        if (err) return callback(err, !1);
        auth.client.wrap(response, {
          user: auth.username
        }, (err, wrapped) => {
          if (err) return callback(err, !1);
          auth._transition = fourthTransition(auth), callback(null, wrapped);
        });
      });
    };
  }
  __name(thirdTransition, "thirdTransition");
  function fourthTransition(auth) {
    return (payload, callback) => {
      auth._transition = null, callback(null, !0);
    };
  }
  __name(fourthTransition, "fourthTransition");
  module.exports = {
    MongoAuthProcess: MongoAuthProcess
  };
});