var require_messages = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
  var is = S1(),
    ErrorCodes;
  (function (ErrorCodes) {
    ErrorCodes.ParseError = -32700, ErrorCodes.InvalidRequest = -32600, ErrorCodes.MethodNotFound = -32601, ErrorCodes.InvalidParams = -32602, ErrorCodes.InternalError = -32603, ErrorCodes.jsonrpcReservedErrorRangeStart = -32099, ErrorCodes.serverErrorStart = -32099, ErrorCodes.MessageWriteError = -32099, ErrorCodes.MessageReadError = -32098, ErrorCodes.PendingResponseRejected = -32097, ErrorCodes.ConnectionInactive = -32096, ErrorCodes.ServerNotInitialized = -32002, ErrorCodes.UnknownErrorCode = -32001, ErrorCodes.jsonrpcReservedErrorRangeEnd = -32e3, ErrorCodes.serverErrorEnd = -32e3;
  })(ErrorCodes || (exports.ErrorCodes = ErrorCodes = {}));
  var _ResponseError = class _ResponseError extends Error {
    constructor(code, message, data) {
      super(message), this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode, this.data = data, Object.setPrototypeOf(this, _ResponseError.prototype);
    }
    toJson() {
      let result = {
        code: this.code,
        message: this.message
      };
      return this.data !== void 0 && (result.data = this.data), result;
    }
  };
  __name(_ResponseError, "ResponseError");
  var ResponseError = _ResponseError;
  exports.ResponseError = ResponseError;
  var _ParameterStructures = class _ParameterStructures {
    constructor(kind) {
      this.kind = kind;
    }
    static is(value) {
      return value === _ParameterStructures.auto || value === _ParameterStructures.byName || value === _ParameterStructures.byPosition;
    }
    toString() {
      return this.kind;
    }
  };
  __name(_ParameterStructures, "ParameterStructures");
  var ParameterStructures = _ParameterStructures;
  exports.ParameterStructures = ParameterStructures;
  ParameterStructures.auto = new ParameterStructures("auto");
  ParameterStructures.byPosition = new ParameterStructures("byPosition");
  ParameterStructures.byName = new ParameterStructures("byName");
  var _AbstractMessageSignature = class _AbstractMessageSignature {
    constructor(method, numberOfParams) {
      this.method = method, this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
      return ParameterStructures.auto;
    }
  };
  __name(_AbstractMessageSignature, "AbstractMessageSignature");
  var AbstractMessageSignature = _AbstractMessageSignature;
  exports.AbstractMessageSignature = AbstractMessageSignature;
  var _RequestType0 = class _RequestType0 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 0);
    }
  };
  __name(_RequestType0, "RequestType0");
  var RequestType0 = _RequestType0;
  exports.RequestType0 = RequestType0;
  var _RequestType = class _RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
      super(method, 1), this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
      return this._parameterStructures;
    }
  };
  __name(_RequestType, "RequestType");
  var RequestType = _RequestType;
  exports.RequestType = RequestType;
  var _RequestType1 = class _RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
      super(method, 1), this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
      return this._parameterStructures;
    }
  };
  __name(_RequestType1, "RequestType1");
  var RequestType1 = _RequestType1;
  exports.RequestType1 = RequestType1;
  var _RequestType2 = class _RequestType2 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 2);
    }
  };
  __name(_RequestType2, "RequestType2");
  var RequestType2 = _RequestType2;
  exports.RequestType2 = RequestType2;
  var _RequestType3 = class _RequestType3 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 3);
    }
  };
  __name(_RequestType3, "RequestType3");
  var RequestType3 = _RequestType3;
  exports.RequestType3 = RequestType3;
  var _RequestType4 = class _RequestType4 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 4);
    }
  };
  __name(_RequestType4, "RequestType4");
  var RequestType4 = _RequestType4;
  exports.RequestType4 = RequestType4;
  var _RequestType5 = class _RequestType5 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 5);
    }
  };
  __name(_RequestType5, "RequestType5");
  var RequestType5 = _RequestType5;
  exports.RequestType5 = RequestType5;
  var _RequestType6 = class _RequestType6 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 6);
    }
  };
  __name(_RequestType6, "RequestType6");
  var RequestType6 = _RequestType6;
  exports.RequestType6 = RequestType6;
  var _RequestType7 = class _RequestType7 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 7);
    }
  };
  __name(_RequestType7, "RequestType7");
  var RequestType7 = _RequestType7;
  exports.RequestType7 = RequestType7;
  var _RequestType8 = class _RequestType8 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 8);
    }
  };
  __name(_RequestType8, "RequestType8");
  var RequestType8 = _RequestType8;
  exports.RequestType8 = RequestType8;
  var _RequestType9 = class _RequestType9 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 9);
    }
  };
  __name(_RequestType9, "RequestType9");
  var RequestType9 = _RequestType9;
  exports.RequestType9 = RequestType9;
  var _NotificationType = class _NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
      super(method, 1), this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
      return this._parameterStructures;
    }
  };
  __name(_NotificationType, "NotificationType");
  var NotificationType = _NotificationType;
  exports.NotificationType = NotificationType;
  var _NotificationType0 = class _NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 0);
    }
  };
  __name(_NotificationType0, "NotificationType0");
  var NotificationType0 = _NotificationType0;
  exports.NotificationType0 = NotificationType0;
  var _NotificationType1 = class _NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
      super(method, 1), this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
      return this._parameterStructures;
    }
  };
  __name(_NotificationType1, "NotificationType1");
  var NotificationType1 = _NotificationType1;
  exports.NotificationType1 = NotificationType1;
  var _NotificationType2 = class _NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 2);
    }
  };
  __name(_NotificationType2, "NotificationType2");
  var NotificationType2 = _NotificationType2;
  exports.NotificationType2 = NotificationType2;
  var _NotificationType3 = class _NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 3);
    }
  };
  __name(_NotificationType3, "NotificationType3");
  var NotificationType3 = _NotificationType3;
  exports.NotificationType3 = NotificationType3;
  var _NotificationType4 = class _NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 4);
    }
  };
  __name(_NotificationType4, "NotificationType4");
  var NotificationType4 = _NotificationType4;
  exports.NotificationType4 = NotificationType4;
  var _NotificationType5 = class _NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 5);
    }
  };
  __name(_NotificationType5, "NotificationType5");
  var NotificationType5 = _NotificationType5;
  exports.NotificationType5 = NotificationType5;
  var _NotificationType6 = class _NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 6);
    }
  };
  __name(_NotificationType6, "NotificationType6");
  var NotificationType6 = _NotificationType6;
  exports.NotificationType6 = NotificationType6;
  var _NotificationType7 = class _NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 7);
    }
  };
  __name(_NotificationType7, "NotificationType7");
  var NotificationType7 = _NotificationType7;
  exports.NotificationType7 = NotificationType7;
  var _NotificationType8 = class _NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 8);
    }
  };
  __name(_NotificationType8, "NotificationType8");
  var NotificationType8 = _NotificationType8;
  exports.NotificationType8 = NotificationType8;
  var _NotificationType9 = class _NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
      super(method, 9);
    }
  };
  __name(_NotificationType9, "NotificationType9");
  var NotificationType9 = _NotificationType9;
  exports.NotificationType9 = NotificationType9;
  var Message;
  (function (Message) {
    function isRequest(message) {
      let candidate = message;
      return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    __name(isRequest, "isRequest"), Message.isRequest = isRequest;
    function isNotification(message) {
      let candidate = message;
      return candidate && is.string(candidate.method) && message.id === void 0;
    }
    __name(isNotification, "isNotification"), Message.isNotification = isNotification;
    function isResponse(message) {
      let candidate = message;
      return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    __name(isResponse, "isResponse"), Message.isResponse = isResponse;
  })(Message || (exports.Message = Message = {}));
});