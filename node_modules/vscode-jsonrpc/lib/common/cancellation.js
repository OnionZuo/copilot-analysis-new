var require_cancellation = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.CancellationTokenSource = exports.CancellationToken = void 0;
  var ral_1 = zy(),
    Is = S1(),
    events_1 = N1(),
    CancellationToken;
  (function (CancellationToken) {
    CancellationToken.None = Object.freeze({
      isCancellationRequested: !1,
      onCancellationRequested: events_1.Event.None
    }), CancellationToken.Cancelled = Object.freeze({
      isCancellationRequested: !0,
      onCancellationRequested: events_1.Event.None
    });
    function is(value) {
      let candidate = value;
      return candidate && (candidate === CancellationToken.None || candidate === CancellationToken.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
    }
    __name(is, "is"), CancellationToken.is = is;
  })(CancellationToken || (exports.CancellationToken = CancellationToken = {}));
  var shortcutEvent = Object.freeze(function (callback, context) {
      let handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
      return {
        dispose() {
          handle.dispose();
        }
      };
    }),
    _MutableToken = class _MutableToken {
      constructor() {
        this._isCancelled = !1;
      }
      cancel() {
        this._isCancelled || (this._isCancelled = !0, this._emitter && (this._emitter.fire(void 0), this.dispose()));
      }
      get isCancellationRequested() {
        return this._isCancelled;
      }
      get onCancellationRequested() {
        return this._isCancelled ? shortcutEvent : (this._emitter || (this._emitter = new events_1.Emitter()), this._emitter.event);
      }
      dispose() {
        this._emitter && (this._emitter.dispose(), this._emitter = void 0);
      }
    };
  __name(_MutableToken, "MutableToken");
  var MutableToken = _MutableToken,
    _CancellationTokenSource = class _CancellationTokenSource {
      get token() {
        return this._token || (this._token = new MutableToken()), this._token;
      }
      cancel() {
        this._token ? this._token.cancel() : this._token = CancellationToken.Cancelled;
      }
      dispose() {
        this._token ? this._token instanceof MutableToken && this._token.dispose() : this._token = CancellationToken.None;
      }
    };
  __name(_CancellationTokenSource, "CancellationTokenSource");
  var CancellationTokenSource = _CancellationTokenSource;
  exports.CancellationTokenSource = CancellationTokenSource;
});