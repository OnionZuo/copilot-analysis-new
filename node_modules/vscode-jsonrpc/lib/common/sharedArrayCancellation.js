var require_sharedArrayCancellation = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
  var cancellation_1 = bL(),
    CancellationState;
  (function (CancellationState) {
    CancellationState.Continue = 0, CancellationState.Cancelled = 1;
  })(CancellationState || (CancellationState = {}));
  var _SharedArraySenderStrategy = class _SharedArraySenderStrategy {
    constructor() {
      this.buffers = new Map();
    }
    enableCancellation(request) {
      if (request.id === null) return;
      let buffer = new SharedArrayBuffer(4),
        data = new Int32Array(buffer, 0, 1);
      data[0] = CancellationState.Continue, this.buffers.set(request.id, buffer), request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
      let buffer = this.buffers.get(id);
      if (buffer === void 0) return;
      let data = new Int32Array(buffer, 0, 1);
      Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
      this.buffers.delete(id);
    }
    dispose() {
      this.buffers.clear();
    }
  };
  __name(_SharedArraySenderStrategy, "SharedArraySenderStrategy");
  var SharedArraySenderStrategy = _SharedArraySenderStrategy;
  exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
  var _SharedArrayBufferCancellationToken = class _SharedArrayBufferCancellationToken {
    constructor(buffer) {
      this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
      return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
      throw new Error("Cancellation over SharedArrayBuffer doesn't support cancellation events");
    }
  };
  __name(_SharedArrayBufferCancellationToken, "SharedArrayBufferCancellationToken");
  var SharedArrayBufferCancellationToken = _SharedArrayBufferCancellationToken,
    _SharedArrayBufferCancellationTokenSource = class _SharedArrayBufferCancellationTokenSource {
      constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
      }
      cancel() {}
      dispose() {}
    };
  __name(_SharedArrayBufferCancellationTokenSource, "SharedArrayBufferCancellationTokenSource");
  var SharedArrayBufferCancellationTokenSource = _SharedArrayBufferCancellationTokenSource,
    _SharedArrayReceiverStrategy = class _SharedArrayReceiverStrategy {
      constructor() {
        this.kind = "request";
      }
      createCancellationTokenSource(request) {
        let buffer = request.$cancellationData;
        return buffer === void 0 ? new cancellation_1.CancellationTokenSource() : new SharedArrayBufferCancellationTokenSource(buffer);
      }
    };
  __name(_SharedArrayReceiverStrategy, "SharedArrayReceiverStrategy");
  var SharedArrayReceiverStrategy = _SharedArrayReceiverStrategy;
  exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
});