var require_semaphore = __commonJSMin(exports => {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  exports.Semaphore = void 0;
  var ral_1 = zy(),
    _Semaphore = class _Semaphore {
      constructor(capacity = 1) {
        if (capacity <= 0) throw new Error("Capacity must be greater than 0");
        this._capacity = capacity, this._active = 0, this._waiting = [];
      }
      lock(thunk) {
        return new Promise((resolve, reject) => {
          this._waiting.push({
            thunk: thunk,
            resolve: resolve,
            reject: reject
          }), this.runNext();
        });
      }
      get active() {
        return this._active;
      }
      runNext() {
        this._waiting.length === 0 || this._active === this._capacity || (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
      }
      doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) return;
        let next = this._waiting.shift();
        if (this._active++, this._active > this._capacity) throw new Error("To many thunks active");
        try {
          let result = next.thunk();
          result instanceof Promise ? result.then(value => {
            this._active--, next.resolve(value), this.runNext();
          }, err => {
            this._active--, next.reject(err), this.runNext();
          }) : (this._active--, next.resolve(result), this.runNext());
        } catch (err) {
          this._active--, next.reject(err), this.runNext();
        }
      }
    };
  __name(_Semaphore, "Semaphore");
  var Semaphore = _Semaphore;
  exports.Semaphore = Semaphore;
});