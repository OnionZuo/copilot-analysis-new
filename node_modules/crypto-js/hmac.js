var require_hmac = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    (function () {
      var C = CryptoJS,
        C_lib = C.lib,
        Base = C_lib.Base,
        C_enc = C.enc,
        Utf8 = C_enc.Utf8,
        C_algo = C.algo,
        HMAC = C_algo.HMAC = Base.extend({
          init: __name(function (hasher, key) {
            hasher = this._hasher = new hasher.init(), typeof key == "string" && (key = Utf8.parse(key));
            var hasherBlockSize = hasher.blockSize,
              hasherBlockSizeBytes = hasherBlockSize * 4;
            key.sigBytes > hasherBlockSizeBytes && (key = hasher.finalize(key)), key.clamp();
            for (var oKey = this._oKey = key.clone(), iKey = this._iKey = key.clone(), oKeyWords = oKey.words, iKeyWords = iKey.words, i = 0; i < hasherBlockSize; i++) oKeyWords[i] ^= 1549556828, iKeyWords[i] ^= 909522486;
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes, this.reset();
          }, "init"),
          reset: __name(function () {
            var hasher = this._hasher;
            hasher.reset(), hasher.update(this._iKey);
          }, "reset"),
          update: __name(function (messageUpdate) {
            return this._hasher.update(messageUpdate), this;
          }, "update"),
          finalize: __name(function (messageUpdate) {
            var hasher = this._hasher,
              innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }, "finalize")
        });
    })();
  });
});