var require_sha256 = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    return function (Math) {
      var C = CryptoJS,
        C_lib = C.lib,
        WordArray = C_lib.WordArray,
        Hasher = C_lib.Hasher,
        C_algo = C.algo,
        H = [],
        K = [];
      (function () {
        function isPrime(n) {
          for (var sqrtN = Math.sqrt(n), factor = 2; factor <= sqrtN; factor++) if (!(n % factor)) return !1;
          return !0;
        }
        __name(isPrime, "isPrime");
        function getFractionalBits(n) {
          return (n - (n | 0)) * 4294967296 | 0;
        }
        __name(getFractionalBits, "getFractionalBits");
        for (var n = 2, nPrime = 0; nPrime < 64;) isPrime(n) && (nPrime < 8 && (H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2))), K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3)), nPrime++), n++;
      })();
      var W = [],
        SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: __name(function () {
            this._hash = new WordArray.init(H.slice(0));
          }, "_doReset"),
          _doProcessBlock: __name(function (M, offset) {
            for (var H = this._hash.words, a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7], i = 0; i < 64; i++) {
              if (i < 16) W[i] = M[offset + i] | 0;else {
                var gamma0x = W[i - 15],
                  gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3,
                  gamma1x = W[i - 2],
                  gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g,
                maj = a & b ^ a & c ^ b & c,
                sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22),
                sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25),
                t1 = h + sigma1 + ch + K[i] + W[i],
                t2 = sigma0 + maj;
              h = g, g = f, f = e, e = d + t1 | 0, d = c, c = b, b = a, a = t1 + t2 | 0;
            }
            H[0] = H[0] + a | 0, H[1] = H[1] + b | 0, H[2] = H[2] + c | 0, H[3] = H[3] + d | 0, H[4] = H[4] + e | 0, H[5] = H[5] + f | 0, H[6] = H[6] + g | 0, H[7] = H[7] + h | 0;
          }, "_doProcessBlock"),
          _doFinalize: __name(function () {
            var data = this._data,
              dataWords = data.words,
              nBitsTotal = this._nDataBytes * 8,
              nBitsLeft = data.sigBytes * 8;
            return dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32, dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296), dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal, data.sigBytes = dataWords.length * 4, this._process(), this._hash;
          }, "_doFinalize"),
          clone: __name(function () {
            var clone = Hasher.clone.call(this);
            return clone._hash = this._hash.clone(), clone;
          }, "clone")
        });
      C.SHA256 = Hasher._createHelper(SHA256), C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    }(Math), CryptoJS.SHA256;
  });
});