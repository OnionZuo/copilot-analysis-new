var require_x64_core = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    return function (undefined) {
      var C = CryptoJS,
        C_lib = C.lib,
        Base = C_lib.Base,
        X32WordArray = C_lib.WordArray,
        C_x64 = C.x64 = {},
        X64Word = C_x64.Word = Base.extend({
          init: __name(function (high, low) {
            this.high = high, this.low = low;
          }, "init")
        }),
        X64WordArray = C_x64.WordArray = Base.extend({
          init: __name(function (words, sigBytes) {
            words = this.words = words || [], sigBytes != undefined ? this.sigBytes = sigBytes : this.sigBytes = words.length * 8;
          }, "init"),
          toX32: __name(function () {
            for (var x64Words = this.words, x64WordsLength = x64Words.length, x32Words = [], i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high), x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          }, "toX32"),
          clone: __name(function () {
            for (var clone = Base.clone.call(this), words = clone.words = this.words.slice(0), wordsLength = words.length, i = 0; i < wordsLength; i++) words[i] = words[i].clone();
            return clone;
          }, "clone")
        });
    }(), CryptoJS;
  });
});