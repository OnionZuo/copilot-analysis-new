var require_sha1 = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    return function () {
      var C = CryptoJS,
        C_lib = C.lib,
        WordArray = C_lib.WordArray,
        Hasher = C_lib.Hasher,
        C_algo = C.algo,
        W = [],
        SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: __name(function () {
            this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          }, "_doReset"),
          _doProcessBlock: __name(function (M, offset) {
            for (var H = this._hash.words, a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], i = 0; i < 80; i++) {
              if (i < 16) W[i] = M[offset + i] | 0;else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              i < 20 ? t += (b & c | ~b & d) + 1518500249 : i < 40 ? t += (b ^ c ^ d) + 1859775393 : i < 60 ? t += (b & c | b & d | c & d) - 1894007588 : t += (b ^ c ^ d) - 899497514, e = d, d = c, c = b << 30 | b >>> 2, b = a, a = t;
            }
            H[0] = H[0] + a | 0, H[1] = H[1] + b | 0, H[2] = H[2] + c | 0, H[3] = H[3] + d | 0, H[4] = H[4] + e | 0;
          }, "_doProcessBlock"),
          _doFinalize: __name(function () {
            var data = this._data,
              dataWords = data.words,
              nBitsTotal = this._nDataBytes * 8,
              nBitsLeft = data.sigBytes * 8;
            return dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32, dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296), dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal, data.sigBytes = dataWords.length * 4, this._process(), this._hash;
          }, "_doFinalize"),
          clone: __name(function () {
            var clone = Hasher.clone.call(this);
            return clone._hash = this._hash.clone(), clone;
          }, "clone")
        });
      C.SHA1 = Hasher._createHelper(SHA1), C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    }(), CryptoJS.SHA1;
  });
});