var require_lib_typedarrays = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    return function () {
      if (typeof ArrayBuffer == "function") {
        var C = CryptoJS,
          C_lib = C.lib,
          WordArray = C_lib.WordArray,
          superInit = WordArray.init,
          subInit = WordArray.init = function (typedArray) {
            if (typedArray instanceof ArrayBuffer && (typedArray = new Uint8Array(typedArray)), (typedArray instanceof Int8Array || typeof Uint8ClampedArray < "u" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) && (typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength)), typedArray instanceof Uint8Array) {
              for (var typedArrayByteLength = typedArray.byteLength, words = [], i = 0; i < typedArrayByteLength; i++) words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
              superInit.call(this, words, typedArrayByteLength);
            } else superInit.apply(this, arguments);
          };
        subInit.prototype = WordArray;
      }
    }(), CryptoJS.lib.WordArray;
  });
});