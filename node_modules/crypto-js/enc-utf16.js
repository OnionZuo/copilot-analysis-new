var require_enc_utf16 = __commonJSMin((exports, module) => {
  (function (root, factory) {
    typeof exports == "object" ? module.exports = exports = factory(wi()) : typeof define == "function" && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(exports, function (CryptoJS) {
    return function () {
      var C = CryptoJS,
        C_lib = C.lib,
        WordArray = C_lib.WordArray,
        C_enc = C.enc,
        Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: __name(function (wordArray) {
            for (var words = wordArray.words, sigBytes = wordArray.sigBytes, utf16Chars = [], i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          }, "stringify"),
          parse: __name(function (utf16Str) {
            for (var utf16StrLength = utf16Str.length, words = [], i = 0; i < utf16StrLength; i++) words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            return WordArray.create(words, utf16StrLength * 2);
          }, "parse")
        };
      C_enc.Utf16LE = {
        stringify: __name(function (wordArray) {
          for (var words = wordArray.words, sigBytes = wordArray.sigBytes, utf16Chars = [], i = 0; i < sigBytes; i += 2) {
            var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
            utf16Chars.push(String.fromCharCode(codePoint));
          }
          return utf16Chars.join("");
        }, "stringify"),
        parse: __name(function (utf16Str) {
          for (var utf16StrLength = utf16Str.length, words = [], i = 0; i < utf16StrLength; i++) words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
          return WordArray.create(words, utf16StrLength * 2);
        }, "parse")
      };
      function swapEndian(word) {
        return word << 8 & 4278255360 | word >>> 8 & 16711935;
      }
      __name(swapEndian, "swapEndian");
    }(), CryptoJS.enc.Utf16;
  });
});